    Task  * T;                      // working task.
    Task  * createTask();           // create task of default sizes
    Task  * createTask(int tob_size, int tib_size, int DS_size, int RS_size, int CS_size);
    void	abort(int, char*);		// abort as given id and given error message
    /////////////////////////////////////////////////////////////////////////////////////////////////////
    void    dClear();               // clear data stack
    void    dPush(int);             // push integer on top of data stack
    int	    dPop();                 // pop integer from top of data stack
    int     dPick(int);             // push i-th item of data stack on top (0 is the top)
    void    dRoll(int);             // roll i-th item of data stack to top (0 is the top)
    void    dBackRoll(int);         // back roll top of data stack to i-th
    int	    dDepth();               // current depth of data stack
    boolean dHasItems(int);         // check if data stack has given number of items
    boolean dHasSpace(int);         // check if data stack has space for given number of items
    boolean dIsFull();              // check if data stack full
    /////////////////////////////////////////////////////////////////////////////////////////////////////
    void    rClear();               // clear return stack
    void    rPush(int);             // push integer onto return stack
    int     rPop();                 // pop integer from return stack
    int     rTop(int);              // top i-th integer of return stack
    int     rDepth();               // current depth of return stack
    boolean rHasItems(int);         // check if return stack has given number of items
    /////////////////////////////////////////////////////////////////////////////////////////////////////
    void    flush();                // flush out 																		  from tob
    void    print (char);           // print char	 (flush out if  it's '\n' or buffer full)								to tob
    void    cr();                	// print '\n' and flush out																to tob
	void	qcr(int n);				// print '\n' if strlen(tob)+n >= tobLmt
    void    print (char*);          // print string	(flush out for each '\n' or buffer full)								to tob
    void    print (char*, int);     // print given number of characters														to tob
	void    print (int, int);		// print decimal number at least  given base											to tob
	void    printZ(int, int);		// print decimal number at least given number of digits (with leading  zero, if needed)	to tob
	void    print (int);			// print decimal number																	to tob
	void    printHexZ(int, int);	// print hexadecimal number of given number of digits (leading  zeros, if needed)		to tob
	void    printHex (int, int);	// print hexadecimal number of given number of digits (leading spaces, if needed)		to tob
	void    printHex (int);			// print hexadecimal number																to tob
	void    printHex (char*);		// print string address in hexadecimal													to tob
	void    printHex (Word*);		// print forth word address in hexadecimal												to tob
	void    printHex (Word**);      // print pointer of forth word address in hexadecimal									to tob
    void    dotS();                 // show data stack
    void    dotId(Word*);           // show word's ID and name
    void    showStacks();           // show return stack and data stack
    void    dot(int);               // print integer.
    void    dotR(int i,int n, char);// print i in n-char wide (leading zeros or spaces).
    /////////////////////////////////////////////////////////////////////////////////////////////////////
    char	toDigit(int i);         			// convert int i to char as a digit (where 0 <= i < 36)
	char  * toStr (int i, int b);				// convert int i to  base b str
	char  * toStr (int i, int b, int n, char c);// convert int i to  base b str of at least n bytes with leading c if needed
    char  * toDec (int i);						// convert int i to decimal str
    char  * toDec (int i, int n); 				// convert int i to decimal str of of at least n bytes
    char  * toDecZ(int i, int n); 				// convert int i to decimal str of at least n bytes
    char  * toHex (int i);						// convert int i to		hex str.
    char  * toHex (int i, int n);				// convert int i to		hex str of at least n bytes with leading ' ' if needed
    char  * toHexZ(int i, int n);				// convert int i to 	hex str of at least n bytes with leading '0' if needed
    /////////////////////////////////////////////////////////////////////////////////////////////////////
    boolean isFloatingNumber(nStr); // return 1 if given string is a valid floating number; return 0 otherwise.
    char  * hexPrefix(char*);       // return remain string if prefix 0x or $, otherwise return 0.
    int     toNumber(nStr);         // convert token as a number to integer (according to base) or decimal floating number.
    boolean isNAN();                // return 1 if token converted is not a number; return 0 otherwise.
    /////////////////////////////////////////////////////////////////////////////////////////////////////
    void    cpInit();               // initializing word list to compile in colon definition.
    void    compile(Word*);         // compile w into word list of colon definition.
    Word ** cpClone();              // make a copy of word list of colon definition for a new forth word.
    /////////////////////////////////////////////////////////////////////////////////////////////////////
    Word  * createWord(uint16_t flag, uint16_t id, nStr name, FuncP code, int data);// flag includes bits of IMME, CMPO, and HIDE
    void    forgetWord(nStr name);	// forget all forth words since the word of given name
	Word  * newPrimitive(nStr name, FuncP code, char*codeName); // create forth primitive word of given name, code, and label in cpp.
    Word  * newPrimitive(nStr,FuncP);// create forth primitive word of given name and given code.
    Word  * newConstant(nStr,int);  // create forth constant word of given name and value.
    Word  * newVariable(nStr,int*); // create forth constant word of given name and value.
    bool    isWord(Word*);          // if given object is a forth word, return 1, else 0.
    void    showWordType(Word*);    // show type of given foth word
    void    vocInit(Word*);         // link given forth word as the last word in vocabulary
    Word  * vocSearch(char*);       // search the forth word of given name in vocabulary
    void    vocAdd(Word*);          // add given forth word into vocabulary
    /////////////////////////////////////////////////////////////////////////////////////////////////////
    bool    isConstantType(Word*);  // check if given forth word is constant type then return 1; otherwise return 0.
    bool    isValueType(Word*);     // check if given forth word is value type then return 1; otherwise return 0.
    bool    isVariableType(Word*);  // check if given forth word is vareable type then return 1; otherwise return 0.
    bool    isColonType(Word*);     // check if given forth word is colon type then return 1; otherwise return 0.
    bool    isPrimitiveType(Word*); // check if given forth word is primitive type then return 1; otherwise return 0.
    /////////////////////////////////////////////////////////////////////////////////////////////////////
    void    words(char*);           // show all forth word names including given substring
    void    dump(int*, int);        // dump cells at given address
    void    see(Word *);            // see insight of given forth word
    /////////////////////////////////////////////////////////////////////////////////////////////////////
    void    ms(int);                // wait given number of milli seconds
    void    showTime();             // show current time in format hh:mm:ss.nnn
    /////////////////////////////////////////////////////////////////////////////////////////////////////
    void    init(long);      		// setup baud rate to communicate via serial port and run cpu0
    void    init(long, int);		// setup baud rate to communicate via serial port and run given cpu
    void    update();               // update FVM state
    /////////////////////////////////////////////////////////////////////////////////////////////////////
    void    setCalling();     	    // setup to execute colon definition
    void    callingWrd();           // execute word by word from the list of a colon definition
    void    ipPush();               // push working word and IP to return stack
    void    ipPop();                // pop IP and working word from return stack
    /////////////////////////////////////////////////////////////////////////////////////////////////////
    void    eval(char*);            // evaluate given script
    void    parsingTkn();           // parse and evaluate next token in tib
    char  * uniqueNStr(char*);      // create a unique NStr for given token
	char  * parseToken(char);       // parse token by given delimiter (for example, ' ', '"', or ')')
    void    evalToken(char*);	    // evalate given token
    /////////////////////////////////////////////////////////////////////////////////////////////////////
    void    initTib();           	// begining to read input line to tib
    void    readTibChar();          // read to tib char by char until '\r'
  ///////////////////////////////////////////////////////////////////////////////////////////////////////
    char    tmp[TMP_SIZE];          // buffer used in parseToken() and toStr() 
    char  * tmpLimit=tmp+TMP_SIZE-1;// address to hold the last '\0' of tmp
    int     hint=1; 				// hint message (show data stack before reading chars to tib)
    int		tobLmt=80;				// used if need to define ?cr
  ///////////////////////////////////////////////////////////////////////////////////////////////////////
  // all the following are used to compile or decompile forth words
    int     i_doCon, i_doVal, i_doVar, i_doCol, i_ret, i_doNext, i_doLit, i_zbran, i_bran, i_compile;
    Word  * w_doCon, * w_doVal, * w_doVar, * w_doCol,
          * w_ret, * w_doFor, * w_doNext, * w_doLit, * w_doStr, * w_doIf, * w_doElse, * w_doThen,
          * w_doBegin, * w_doAgain, * w_doUntil, * w_doWhile, * w_doRepeat, * w_compile, * redefined=0;
    int     needExtraCell[5]={ i_doLit, i_compile, i_doNext, i_zbran, i_bran };