// fvm_wifiboyWordset.cpp
#ifndef WORD_SET
#define WORD_SET
//                    "/////////////////////////////////////////////////"
char* word_set_logo = "//    fvm wifiboy_lib wordset 1.0  20190408    //\n";
//                    "/////////////////////////////////////////////////"
#include <Arduino.h>
#include <math.h>
#include <fvm.h>
#include <wifiboy_lib.h>
/////////////////////////////////////////////////////////////////////////////////////////////////////////
#define WORD( name ) (Word*)&W ## name
#define CONST( id, flag, symbol, name, value ) const Word W ## name = {LAST, id, flag, symbol, _doCon, (int)value}
#define PRIMI( id, flag, symbol, name, func ) const Word W ## name = {LAST, id, flag, symbol, func, (int)#func}
/////////////////////////////////////////////////////////////////////////////////////////////////////////
#define LAST 0
extern FVM F;
/////////////////////////////////////////////////////////////////////////////////////////////////////////
// wordset 0 ( handlers of different word types and programming control flows )
/////////////////////////////////////////////////////////////////////////////////////////////////////////
// W000 (con) ( -- a ) Get the address of constant type handler _doCon.
static void _doCon(){ F.dPush( F.T->W->p.con ); } // push P field content of the running forth word to stack.
CONST( 0x000, HIDEN, "\x05" "(con)", _doCon, _doCon );
#define LAST WORD( _doCon )
//////////////////////////////////////////////////////////////////////////
// W001 (val) ( -- a ) Get the address of value type handler _doVal.
static void _doVal(){ F.dPush( F.T->W->p.con ); } // push P field content of the running forth word to stack.
CONST( 0x001, HIDEN, "\x05" "(val)", _doVal, _doVal );
#define LAST WORD( _doVal )
//////////////////////////////////////////////////////////////////////////
// W002 (var) ( -- a ) Get the address of variable type handler _doVar.
static void _doVar(){ F.dPush( (int)( &F.T->W->p.con ) ); } // push P field address of the running forth word to stack.
CONST( 0x002, HIDEN, "\x05" "(var)", _doVar, _doVar );
#define LAST WORD( _doVar )
//////////////////////////////////////////////////////////////////////////
// W003 (col) ( -- )( -- w ip ) Get the address of colon type handler _doCol.
static void _doCol(){ F.ipPush(), F.T->IP = F.T->W->p.wpl; } // setup calling word-list pointed by P field content of the running forth word.
CONST( 0x003, HIDEN, "\x03" "(:)", _doCol, _doCol );
#define LAST WORD( _doCol )
//////////////////////////////////////////////////////////////////////////
// W004 (;) ( -- )( w ip -- ) end of colon type word definition (pop IP from return stack).
static void _ret(){ F.ipPop(); } // end of calling (return from word-list)
PRIMI( 0x004, COMPO_HIDEN, "\x03" "(;)", _ret, _ret );
#define LAST WORD( _ret )
Word *w_doLit=LAST;
//////////////////////////////////////////////////////////////////////////
// W005 exit ( -- )( w ip -- ) Exit from colon type word definition (pop IP from return stack).
PRIMI( 0x005, COMPO, "\x04" "exit", _exit, _ret );
#define LAST WORD( _exit )
//////////////////////////////////////////////////////////////////////////
// W006 (lit) ( -- n ) number in the next code cell pointed by IP.
static void _doLit(){ F.dPush( (int)*F.T->IP++ ); } // push the value pointed by IP to stack.
PRIMI( 0x006, COMPO_HIDEN, "\x05" "(lit)", _doLit, _doLit );
#define LAST WORD( _doLit )
//////////////////////////////////////////////////////////////////////////
// W007 (str) ( -- addr ) string addr in the code cell pointed by IP.
PRIMI( 0x007, COMPO_HIDEN, "\x05" "(str)", _doStr, _doLit );
#define LAST WORD( _doStr )
//////////////////////////////////////////////////////////////////////////
// W008 (for) ( n -- )( -- n ) push n to return stack as loop counter.
static void _doFor(){ F.rPush( F.dPop() ); } // push loop counter from stack to rack.
PRIMI( 0x008, COMPO_HIDEN, "\x05" "(for)", _doFor, _doFor );
#define LAST WORD( _doFor )
//////////////////////////////////////////////////////////////////////////
// W009 (next) ( -- )( n -- n-1 | ) decreases loop counter n, branch back relatively to the word after (for) if n>0.
static void _doNext(){ int n = F.rPop(); if( n ) F.rPush( --n ), F.T->IP += (int)*F.T->IP; else F.T->IP++; } // pop and dec loop counter, push and loop back relatively if non-zero
PRIMI( 0x009, COMPO_HIDEN, "\x06" "(next)", _doNext, _doNext );
#define LAST WORD( _doNext )
//////////////////////////////////////////////////////////////////////////
// W00a (if) ( flag -- ) branch forward relatively to the word after (else) or (then) if flag==0.
static void _zbran(){ if( F.dPop() == 0 ) F.T->IP += (int)*F.T->IP; else F.T->IP++; } // pop flag and branch relatively if flag==0
PRIMI( 0x00a, COMPO_HIDEN, "\x04" "(if)", _doIf, _zbran );
#define LAST WORD( _doIf )
//////////////////////////////////////////////////////////////////////////
// W00b (else) ( -- ) branch forward relatively to the word after (then).
static void _bran(){ F.T->IP += (int)*F.T->IP; } // branch relatively 
PRIMI( 0x00b, COMPO_HIDEN, "\x06" "(else)", _doElse, _bran );
#define LAST WORD( _doElse )
//////////////////////////////////////////////////////////////////////////
// W00c (then) ( -- ) end of the if-then or the if-else-then control flow.
static void _doThen(){};
PRIMI( 0x00c, COMPO_HIDEN, "\x06" "(then)", _doThen, _doThen );
#define LAST WORD( _doThen )
//////////////////////////////////////////////////////////////////////////
// W00d (begin) ( -- ) begin of the begin-again, begin-until, or begin-while-repeat control flows.
static void _doBegin(){};
PRIMI( 0x00d, COMPO_HIDEN, "\x07" "(begin)", _doBegin, _doBegin );
#define LAST WORD( _doBegin )
//////////////////////////////////////////////////////////////////////////
// W00e (again) ( -- ) branch backward relatively to the word after (begin).
PRIMI( 0x00e, COMPO_HIDEN, "\x07" "(again)", _doAgain, _bran );
#define LAST WORD( _doAgain )
//////////////////////////////////////////////////////////////////////////
// W00f (until) ( flag -- ) branch backward relatively to the word after (begin) if flag==0.
PRIMI( 0x00f, COMPO_HIDEN, "\x07" "(until)", _doUntil, _zbran );
#define LAST WORD( _doUntil )
//////////////////////////////////////////////////////////////////////////
// W010 (while) ( flag -- ) branch foreward relatively to the word after (repeat) if flag==0.
PRIMI( 0x010, COMPO_HIDEN, "\x07" "(while)", _doWhile, _zbran );
#define LAST WORD( _doWhile )
//////////////////////////////////////////////////////////////////////////
// W011 (repeat) ( -- ) branch backward relatively to the word after (begin).
PRIMI( 0x011, COMPO_HIDEN, "\x08" "(repeat)", _doRepeat, _bran );
#define LAST WORD( _doRepeat )
//////////////////////////////////////////////////////////////////////////
// W012 (to) ( n -- ) store n to value type word which is in next code cell pointer by IP.
static void _pto(){ Word *w =* F.T->IP++; w->p.con = F.dPop(); } // store value to P field of value type word pointed by IP
PRIMI( 0x012, COMPO_HIDEN, "\x04" "(to)", _pto, _pto );
#define LAST WORD( _pto )
//////////////////////////////////////////////////////////////////////////
// W013 constant <name> ( n -- ) define constant type word of given name by n.
static void _constant() { char*tkn = F.parseToken( ' ' ); F.createWord( 0, F.voc->nWord, tkn, _doCon, F.dPop() ); }
PRIMI( 0x013, 0, "\x08" "constant", _constant, _constant );
#define LAST WORD( _constant )
//////////////////////////////////////////////////////////////////////////
// W014 value <name> ( n -- ) define value type word of given name by n.
static void _value() { char*tkn = F.parseToken( ' ' ); F.createWord( 0, F.voc->nWord, tkn, _doVal, F.dPop() ); }
PRIMI( 0x014, 0, "\x05" "value", _value, _value );
#define LAST WORD( _value )
//////////////////////////////////////////////////////////////////////////
// W015 to <name> ( n -- ) store number to the value type word of given name.
static void _to() { 
  char*name = F.parseToken( ' ' );
  if ( ! name ) {
    F.abort( 601, "to value type word not given" ); return; }
  Word*w = F.vocSearch( name ); // find the word of given name
  if ( ! w ) { F.abort( 602, "to value type word unDef" ); return; }
  if( (int)w->code != (&W_doVal)->p.con ) {
    F.abort( 603, "to non value type word" ); return;
  }
  if ( F.T->state&CMPLING ) { // compiling
    F.compile( WORD( _pto ) ), F.compile( w ); return;
  }
  w->p.con = F.dPop(); return; // pop number and store to value type word
}
PRIMI( 0x015, IMMED, "\x02" "to", _to, _to );
#define LAST WORD( _to )
//////////////////////////////////////////////////////////////////////////
// W016 variable <name> ( -- ) define variable type word of given name.
static void _variable() { char*tkn = F.parseToken(' '); F.createWord(0, F.voc->nWord, tkn, _doVar, 0 ); }
PRIMI( 0x016, 0, "\x08" "variable", _variable, _variable );
#define LAST WORD( _variable )
//////////////////////////////////////////////////////////////////////////
// W017 ] ( -- ) enter compiling state
static void _rBracket() { F.T->state |= CMPLING; }
PRIMI( 0x017, 0, "\x01" "]", _rBracket, _rBracket );
#define LAST WORD( _rBracket ) 
//////////////////////////////////////////////////////////////////////////
// W018 [ ( -- ) leave compiling state.
static void _lBracket() { if( F.T->state & CMPLING ) F.T->state -= CMPLING; }
PRIMI( 0x018, IMMED, "\x01" "[", _lBracket, _lBracket );
#define LAST WORD( _lBracket ) 
//////////////////////////////////////////////////////////////////////////
// W019 : <name> ( -- ) define colon type word of given name.
static void _colon() { char *tkn=F.parseToken(' ');
  Word *w = F.createWord(0, F.voc->nWord, tkn, _doCol, 0); F.cpInit(), _rBracket(); }
PRIMI( 0x019, 0, "\x01" ":", _colon, _colon );
#define LAST WORD( _colon ) 
//////////////////////////////////////////////////////////////////////////
// W01a ; ( -- ) end of colon type word definition.
static void _semicolon() { F.compile( WORD( _ret ) ); Word *w = F.T->last;
    w->p.wpl = F.cpClone(); F.vocAdd( w ), _lBracket(); }
PRIMI( 0x01a, IMMED, "\x01" ";", _semicolon, _semicolon );
#define LAST WORD( _semicolon ) 
//////////////////////////////////////////////////////////////////////////
// W01b compile ( -- ) compile the forth word in the code cell pointed by IP.
static void _compile(){ *F.T->CP++ = *F.T->IP++; } // compile the value pointed by IP
PRIMI( 0x01b, COMPO_HIDEN, "\x07" "compile", _compile, _compile );
#define LAST WORD( _compile ) 
//////////////////////////////////////////////////////////////////////////
// W01c here ( -- addr ) end of compiled code.
static void _here(){ F.dPush((int)F.T->CP); }
PRIMI( 0x01c, 0, "\x04" "here", _here, _here );
#define LAST WORD( _here ) 
//////////////////////////////////////////////////////////////////////////
// W01d comma ( n -- ) compile given number.
static void _comma(){
//PRINTF("\n_comma() 0x%x ",F.dPick(0));
  F.compile((Word*)F.dPop()); }
PRIMI( 0x01d, 0, "\x01" ",", _comma, _comma );
#define LAST WORD( _comma ) 
//////////////////////////////////////////////////////////////////////////
// W01e >r ( n -- )( -- n ) push number onto return stack.
static void _toR () { F.rPush(F.dPop()); }
PRIMI( 0x01e, 0, "\x02" ">r", _toR, _toR );
#define LAST WORD( _toR ) 
//////////////////////////////////////////////////////////////////////////
// W01f r@ ( -- n )( n -- n ) top number of return stack.
static void _rFetch () { F.dPush(*(F.T->RP)); }
PRIMI( 0x01f, 0, "\x02" "r@", _rFetch, _rFetch );
#define LAST WORD( _rFetch ) 
//////////////////////////////////////////////////////////////////////////
// W020 r> ( -- n )( n -- ) pop number from return stack.
static void _rFrom () { F.dPush(F.rPop()); }
PRIMI( 0x020, 0, "\x02" "r>", _rFrom, _rFrom );
#define LAST WORD( _rFrom ) 
//////////////////////////////////////////////////////////////////////////
// W021 - ( a b -- a-b ) difference of 2 integer numbers, a-b.
static void _sub () { *(F.T->DP)-=F.dPop(); }
PRIMI( 0x021, 0, "\x01" "-", _sub, _sub );
#define LAST WORD( _sub ) 
//////////////////////////////////////////////////////////////////////////
// W022 cell/ ( n -- n/4 ) divide given integer number by 4.
static void _4slash () { (*(F.T->DP))/=4; }
PRIMI( 0x022, 0, "\x05" "cell/", _4slash, _4slash );
#define LAST WORD( _4slash ) 
//////////////////////////////////////////////////////////////////////////
// W023 ! ( n addr -- ) store 32-bit number into given memory address.
static void _store () { int *a=(int*)F.dPop(); *a=F.dPop(); }
PRIMI( 0x023, 0, "\x01" "!", _store, _store );
#define LAST WORD( _store ) 
//////////////////////////////////////////////////////////////////////////
// W024 over ( n1 n0  -- n1 n0 n1 ) copy the next number on top to data stack.
static void _over () { F.dPush(F.dPick(1)); }
PRIMI( 0x024, 0, "\x04" "over", _over, _over );
#define LAST WORD( _over ) 
//////////////////////////////////////////////////////////////////////////
// W025 swap ( n1 n0  -- n0 n1 ) swap top 2 numbers of data stack.
static void _swap () { F.dRoll(1); }
PRIMI( 0x025, 0, "\x04" "swap", _swap, _swap );
#define LAST WORD( _swap ) 
//////////////////////////////////////////////////////////////////////////
// W026 if ( -- a ) begin TRUE-part control flow (until "else" or "then").
const Word* L_if[] = { &W_compile, &W_doIf, &W_here, &W_doLit, (Word*)0, &W_comma, &W_ret };
const Word W_if = { LAST, 0x026, IMMED_COMPO, "\x02" "if", _doCol, (int)L_if };
#define LAST WORD( _if ) 
//////////////////////////////////////////////////////////////////////////
// W027 else ( a -- a' ) begin FALSE-part control flow (until "then").
const Word* L_else[] = { &W_toR, &W_compile, &W_doElse, &W_here, &W_doLit, (Word*)0, &W_comma,
  &W_here, &W_rFetch, &W_sub, &W_4slash, &W_rFrom, &W_store, &W_ret };
const Word W_else = { LAST, 0x027, IMMED_COMPO, "\x04" "else", _doCol, (int)L_else };
#define LAST WORD( _else ) 
//////////////////////////////////////////////////////////////////////////
// W028 then ( a -- ) end of TRUE-part or FALSE-part control flow.
const Word* L_then[] = { &W_here, &W_over, &W_sub, &W_4slash, &W_swap, &W_store, &W_ret };
const Word W_then = { LAST, 0x028, IMMED_COMPO, "\x04" "then", _doCol, (int)L_then };
#define LAST WORD( _then ) 
//////////////////////////////////////////////////////////////////////////
// W029 for ( -- a ) begin of counted loop control flow (until "next").
const Word* L_for[] = { &W_compile, &W_doFor, &W_here, &W_ret };
const Word W_for = { LAST, 0x029, IMMED_COMPO, "\x03" "for", _doCol, (int)L_for };
#define LAST WORD( _for ) 
//////////////////////////////////////////////////////////////////////////
// W02a next ( a -- ) end of counted loop control flow.
const Word* L_next[] = { &W_compile, &W_doNext, &W_here, &W_sub, &W_4slash, &W_comma, &W_ret };
const Word W_next = { LAST, 0x02a, IMMED_COMPO, "\x04" "next", _doCol, (int)L_next };
#define LAST WORD( _next ) 
//////////////////////////////////////////////////////////////////////////
// W02b begin ( -- a ) begin of loop control flow (until "again", "until", or "while").
const Word* L_begin[] = { &W_compile, &W_doBegin, &W_here, &W_ret };
const Word W_begin = { LAST, 0x02b, IMMED_COMPO, "\x05" "begin", _doCol, (int)L_begin };
#define LAST WORD( _begin ) 
//////////////////////////////////////////////////////////////////////////
// W02c again ( a -- ) end of infinite loop control flow.
const Word* L_again[] = { &W_compile, &W_doAgain, &W_here, &W_sub, &W_4slash, &W_comma, &W_ret };
const Word W_again = { LAST, 0x02c, IMMED_COMPO, "\x05" "again", _doCol, (int)L_again };
#define LAST WORD( _again ) 
//////////////////////////////////////////////////////////////////////////
// W02d until ( a -- ) end of loop control flow.
const Word* L_until[] = { &W_compile, &W_doUntil, &W_here, &W_sub, &W_4slash, &W_comma, &W_ret };
const Word W_until = { LAST, 0x02d, IMMED_COMPO, "\x05" "until", _doCol, (int)L_until };
#define LAST WORD( _until ) 
//////////////////////////////////////////////////////////////////////////
// W02e while ( a -- a b ) begin TRUE-part loop control flow (until "repeat").
const Word* L_while[] = { &W_compile, &W_doWhile, &W_here, &W_doLit, (Word*)0, &W_comma, &W_ret };
const Word W_while = { LAST, 0x02e, IMMED_COMPO, "\x05" "while", _doCol, (int)L_while };
#define LAST WORD( _while ) 
//////////////////////////////////////////////////////////////////////////
// W02f repeat ( a b -- ) end of TRUE-part loop control flow.
const Word* L_repeat[] = { &W_compile, &W_doRepeat, &W_swap, &W_here, &W_sub, &W_4slash, &W_comma, 
  &W_here, &W_over, &W_sub, &W_4slash, &W_swap, &W_store, &W_ret };
const Word W_repeat = { LAST, 0x02f, IMMED_COMPO, "\x06" "repeat", _doCol, (int)L_repeat };
#define LAST WORD( _repeat ) 
//////////////////////////////////////////////////////////////////////////
// W030 immediate ( -- ) set the last defined forth word as immediate type.
static void _immediate() { F.T->last->flag |= IMMED; }
PRIMI( 0x030, 0, "\x09" "immediate", _immediate, _immediate );
#define LAST WORD( _immediate ) 
//////////////////////////////////////////////////////////////////////////
// W031 compile-only ( -- ) set the last defined word as compile-only type.
static void _compile_only() { F.T->last->flag |= COMPO; }
PRIMI( 0x031, 0, "\x0c" "compile-only", _compile_only, _compile_only );
#define LAST WORD( _compile_only ) 
//////////////////////////////////////////////////////////////////////////
// W032 hidden ( -- ) set the last defined word as hidden type.
static void _hidden() { F.T->last->flag |= HIDEN; }
PRIMI( 0x032, 0, "\x06" "hidden", _hidden, _hidden );
#define LAST WORD( _hidden ) 
//////////////////////////////////////////////////////////////////////////
// W033 $" <string>" ( -- nStr ) create nString or compile nString.
static void _strQ () { 
  char *tkn=F.parseToken('"');
  if(F.T->state&CMPLING) F.compile( WORD( _doStr ) ), F.compile( (Word*)tkn );
  else F.dPush( (int)tkn ); }
PRIMI( 0x033, IMMED, "\x02" "$\"", _strQ, _strQ );
#define LAST WORD( _strQ ) 
//////////////////////////////////////////////////////////////////////////
// W034 ( <string>) ( -- ) ignore string delimited by right parenthesis.
static void _paren() { F.parseToken(')'); }
PRIMI( 0x034, IMMED, "\x01" "(", _paren, _paren );
#define LAST WORD( _paren ) 
//////////////////////////////////////////////////////////////////////////
// W035 literal ( n --  ) compile literal n.
static void _literal() { F.compile( WORD( _doLit ) ), F.compile( (Word*)F.dPop() ); }
PRIMI( 0x035, IMMED_COMPO, "\x07" "literal", _literal, _literal );
#define LAST WORD( _literal ) 
//////////////////////////////////////////////////////////////////////////
// W036 ? ( addr -- ) print 32-bit integer at given memory address.
static void _quest(){ F.dot( *(int*)( F.dPop() ) ); } //
PRIMI( 0x036, 0, "\x01" "?", _quest, _quest );
#define LAST WORD( _quest ) 
//////////////////////////////////////////////////////////////////////////
// W037 last ( -- addr ) in given address, pointer to the forth word just created (may not in vocabulary yet).
static void _last() { F.dPush( (int) &(F.T->last) ); }
PRIMI( 0x037, 0, "\x04" "last", _last, _last );
#define LAST WORD( _last ) 
//////////////////////////////////////////////////////////////////////////
// W038 <# ( i -- i ) begin to convert integer to digits string.
static void _bToDigits() { F.T->hld = F.tmp+TMP_SIZE-1, *(F.T->hld)=0; }
PRIMI( 0x038, 0, "\x02" "<#", _bToDigits, _bToDigits );
#define LAST WORD( _bToDigits ) 
//////////////////////////////////////////////////////////////////////////
// W039 hold ( char -- ) insert given char to digits string (may be ',').
static void _hold() { *(--(F.T->hld)) = F.dPop(); }
PRIMI( 0x039, 0, "\x04" "hold", _hold, _hold );
#define LAST WORD( _hold ) 
//////////////////////////////////////////////////////////////////////////
// W03a # ( i -- i/b ) convert i%b to a digit into tmp string buffer
static void _toDigit() { uint i = *F.T->DP; int8_t b = F.T->base;
  *F.T->DP = i/b; F.dPush(F.toDigit(i%b)); _hold(); }
PRIMI( 0x03a, 0, "\x01" "#", _toDigit, _toDigit );
#define LAST WORD( _toDigit ) 
//////////////////////////////////////////////////////////////////////////
// W03b #s ( i -- ) convert i to digits into tmp string buffer
static void _toStr() { while(*(F.T->DP)) _toDigit(); F.T->DP--; }
PRIMI( 0x03b, 0, "\x02" "#s", _toStr, _toStr );
#define LAST WORD( _toStr ) 
//////////////////////////////////////////////////////////////////////////
// W03c #> ( -- nStr ) end of number conversion, push the digits string onto data stack.
static void _theDigits() { char*p = F.T->hld, n = strlen(p); *(--p) = n; F.dPush( (int)p ); }
PRIMI( 0x03c, 0, "\x02" "#>", _theDigits, _theDigits );
#define LAST WORD( _theDigits ) 
//////////////////////////////////////////////////////////////////////////
// W03d z" <string>" ( -- zStr ) create zString or compile zString.
static void _zstrQ () { 
  char *tkn=F.parseToken('"')+1;
  if(F.T->state&CMPLING) F.compile( WORD( _doStr ) ), F.compile( (Word*)tkn );
  else F.dPush( (int)tkn ); }
PRIMI( 0x03d, IMMED, "\x02" "z\"", _zstrQ, _zstrQ );
#define LAST WORD( _zstrQ ) 
//////////////////////////////////////////////////////////////////////////
// wordset 1 ( number conversion base and memory access forth words )
//////////////////////////////////////////////////////////////////////////
// W100 binary ( -- ) set number conversion base = 2.
static void _binary() { F.T->base=2; }
PRIMI( 0x100, 0, "\x06" "binary", _binary, _binary );
#define LAST WORD( _binary ) 
//////////////////////////////////////////////////////////////////////////
// W101 octal ( -- ) set number conversion base = 8.
static void _octal() { F.T->base=8; }
PRIMI( 0x101, 0, "\x05" "octal", _octal, _octal );
#define LAST WORD( _octal ) 
//////////////////////////////////////////////////////////////////////////
// W102 decimal ( -- ) set number conversion base = 10.
static void _decimal() { F.T->base=10; }
PRIMI( 0x102, 0, "\x07" "decimal", _decimal, _decimal );
#define LAST WORD( _decimal ) 
//////////////////////////////////////////////////////////////////////////
// W103 hex ( -- ) set number conversion base = 16.
static void _hex() { F.T->base=16; }
PRIMI( 0x103, 0, "\x03" "hex", _hex, _hex );
#define LAST WORD( _hex ) 
//////////////////////////////////////////////////////////////////////////
// W104 base ( -- a ) push address of number conversion base to stack.
static void _base() { F.dPush((int)&(F.T->base)); }
PRIMI( 0x104, 0, "\x04" "base", _base, _base );
#define LAST WORD( _base ) 
//////////////////////////////////////////////////////////////////////////
// W105 strLen ( zStr -- n ) length of zStr (a string ended by 0).
static void _strLen() { F.dTop(strlen((char*)F.dTop())); }
PRIMI( 0x105, 0, "\x06" "strLen", _strLen, _strLen );
#define LAST WORD( _strLen ) 
//////////////////////////////////////////////////////////////////////////
// W106 @ ( a -- i ) fetch 32-bit number from given memory address.
static void _fetch () { F.dPush(*(int*)F.dPop()); }
PRIMI( 0x106, 0, "\x01" "@", _fetch, _fetch );
#define LAST WORD( _fetch ) 
//////////////////////////////////////////////////////////////////////////
// W107 c! ( c a -- ) store 8-bit number into given memory address.
static void _cStore() { uint8_t *p=(uint8_t *)F.dPop(); *p=(uint8_t)F.dPop(); }
PRIMI( 0x107, 0, "\x02" "c!", _cStore, _cStore );
#define LAST WORD( _cStore ) 
//////////////////////////////////////////////////////////////////////////
// W108 c@ ( a -- c ) fetch 8-bit char from given memory address.
void _cFetch() { F.dPush(*(int8_t *)F.dPop()); }
PRIMI( 0x108, 0, "\x02" "c@", _cFetch, _cFetch );
#define LAST WORD( _cFetch ) 
//////////////////////////////////////////////////////////////////////////
// W109 . ( n -- ) print given integer number and a space.
void _dot() { F.dot(F.dPop()); } 
PRIMI( 0x109, 0, "\x01" ".", _dot, _dot );
#define LAST WORD( _dot ) 
//////////////////////////////////////////////////////////////////////////
// W10a .r ( n m -- ) print given integer number right aligned in m-char wide (fill leading spaces if needed).
void _dotR() { int8_t n=F.dPop(); F.dotR(F.dPop(), n, ' '); } 
PRIMI( 0x10a, 0, "\x02" ".r", _dotR, _dotR );
#define LAST WORD( _dotR ) 
//////////////////////////////////////////////////////////////////////////
// W10b .0r ( n m -- ) print given integer number right aligned in m-char wide (fill leading '0' if needed).
void _dotZR() { int8_t n=F.dPop(); F.dotR(F.dPop(), n, '0'); } 
PRIMI( 0x10b, 0, "\x03" ".0r", _dotZR, _dotZR );
#define LAST WORD( _dotZR ) 
//////////////////////////////////////////////////////////////////////////
// W10c f. ( f -- ) print given floating number and a space.
void _fDot() { X x; x.i=F.dPop(); PRINTF("%f ", x.f); } 
PRIMI( 0x10c, 0, "\x02" "f.", _fDot, _fDot );
#define LAST WORD( _fDot ) 
//////////////////////////////////////////////////////////////////////////
// W10d >float ( i -- f ) convert number from integer to float.
void _toFloat() { X x; x.f=(float)*(F.T->DP); *(F.T->DP)=x.i; } 
PRIMI( 0x10d, 0, "\x06" ">float", _toFloat, _toFloat );
#define LAST WORD( _toFloat ) 
//////////////////////////////////////////////////////////////////////////
// W10e float> ( f -- i ) convert number from float to integer.
void _floatFrom() { X x; x.i=*(F.T->DP); *(F.T->DP)=(int)(x.f); } 
PRIMI( 0x10e, 0, "\x06" "float>", _floatFrom, _floatFrom );
#define LAST WORD( _floatFrom ) 
//////////////////////////////////////////////////////////////////////////
// W10f floor ( f -- f' ) the largest integer float not greater than given floating number.
void _floor() { X x; x.i=*(F.T->DP); x.f=floor(x.f); *(F.T->DP)=x.i; } 
PRIMI( 0x10f, 0, "\x05" "floor", _floor, _floor );
#define LAST WORD( _floor ) 
//////////////////////////////////////////////////////////////////////////
// W110 ceil ( f -- f' ) the smallest integer float not less than given floating number.
void _ceil() { X x; x.i=*(F.T->DP); x.f=ceil(x.f); *(F.T->DP)=x.i; } 
PRIMI( 0x110, 0, "\x04" "ceil", _ceil, _ceil );
#define LAST WORD( _ceil ) 
//////////////////////////////////////////////////////////////////////////
// W111 sin ( f -- sin(f) ) sine value of given angle (floating number expressed in radians).
void _sin() { X x; x.i=*(F.T->DP); x.f=sin(x.f); *(F.T->DP)=x.i; } 
PRIMI( 0x111, 0, "\x03" "sin", _sin, _sin );
#define LAST WORD( _sin ) 
//////////////////////////////////////////////////////////////////////////
// W112 cos ( f -- cos(f) ) cosine value of given angle (floating number expressed in radians).
void _cos() { X x; x.i=*(F.T->DP); x.f=cos(x.f); *(F.T->DP)=x.i; } 
PRIMI( 0x112, 0, "\x03" "cos", _cos, _cos );
#define LAST WORD( _cos ) 
//////////////////////////////////////////////////////////////////////////
// W113 exp ( f -- exp(f) ) exponential value of given floating number.
void _exp() { X x; x.i=*(F.T->DP); x.f=exp(x.f); *(F.T->DP)=x.i; } 
PRIMI( 0x113, 0, "\x03" "exp", _exp, _exp );
#define LAST WORD( _exp ) 
//////////////////////////////////////////////////////////////////////////
// W114 pow ( x y -- pow(x,y) ) raise given floating number x to fractional power y.
void _pow() { X x, y; x.i=F.dPop(), y.i=F.dPop(); x.f=pow((double)x.f,(double)y.f); *(F.T->DP)=x.i; } 
PRIMI( 0x114, 0, "\x03" "pow", _pow, _pow );
#define LAST WORD( _pow ) 
//////////////////////////////////////////////////////////////////////////
// W115 sqrt ( f -- sqrt(f) ) the square root of given floating number.
void _sqrt() { X x; x.i=*(F.T->DP); x.f=sqrt(x.f); *(F.T->DP)=x.i; } 
PRIMI( 0x115, 0, "\x04" "sqrt", _sqrt, _sqrt );
#define LAST WORD( _sqrt ) 
//////////////////////////////////////////////////////////////////////////
// W116 tan ( f -- tan(f) ) tangent of an angle (given floating number expressed in radians).
void _tan() { X x; x.i=*(F.T->DP); x.f=tan(x.f); *(F.T->DP)=x.i; } 
PRIMI( 0x116, 0, "\x03" "tan", _tan, _tan );
#define LAST WORD( _tan ) 
//////////////////////////////////////////////////////////////////////////
// W117 atan ( x -- atan(x) ) arc tangent (in radians) of given floating number.
void _atan() { X x; x.i=*(F.T->DP); x.f=atan(x.f); *(F.T->DP)=x.i; } 
PRIMI( 0x117, 0, "\x04" "atan", _atan, _atan );
#define LAST WORD( _atan ) 
//////////////////////////////////////////////////////////////////////////
// W118 atan2 ( y x -- tan2(y,x) ) arc tangent of 2 floating numbers y and x, y/x.
void _atan2() { X y, x; x.i=F.dPop(), y.i=*(F.T->DP); x.f=atan2(y.f,x.f); *(F.T->DP)=x.i; } 
PRIMI( 0x118, 0, "\x05" "atan2", _atan2, _atan2 );
#define LAST WORD( _atan2 ) 
//////////////////////////////////////////////////////////////////////////
// W119 f+ ( x y -- x+y ) sum of 2 floating numbers, x+y.
void _fPlus() { X x, y; y.i=F.dPop(), x.i=*(F.T->DP); x.f+=y.f; *(F.T->DP)=x.i; } 
const Word W_fPlus = { LAST, 0x119, 0, "\x02" "f+", _fPlus, (int)"_atan2fPlus" };
#define LAST WORD( _fPlus ) 
//////////////////////////////////////////////////////////////////////////
// W11a f- ( x y -- x-y ) difference of 2 floating numbers, x-y.
void _fMinus() { X x, y; y.i=F.dPop(), x.i=*(F.T->DP); x.f-=y.f; *(F.T->DP)=x.i; } 
PRIMI( 0x11a, 0, "\x02" "f-", _fMinus, _fMinus );
#define LAST WORD( _fMinus ) 
//////////////////////////////////////////////////////////////////////////
// W11b f* ( x y -- x*y ) product of 2 floating numbers, x*y.
void _fMul() { X x, y; y.i=F.dPop(), x.i=*(F.T->DP); x.f*=y.f; *(F.T->DP)=x.i; } 
PRIMI( 0x11b, 0, "\x02" "f*", _fMul, _fMul );
#define LAST WORD( _fMul ) 
//////////////////////////////////////////////////////////////////////////
// W11c f/ ( x y -- x/y ) quotient of 2 floating numbers, x/y.
void _fDiv() { X x, y; y.i=F.dPop(), x.i=*(F.T->DP); x.f/=y.f; *(F.T->DP)=x.i; } 
PRIMI( 0x11c, 0, "\x02" "f/", _fDiv, _fDiv );
#define LAST WORD( _fDiv ) 
//////////////////////////////////////////////////////////////////////////
// W11d f% ( x y -- x%y ) remainder of 2 floating numbers, x%y.
void _fMod() { X x, y; y.i=F.dPop(), x.i=*(F.T->DP); x.f=fmod(x.f,y.f); *(F.T->DP)=x.i; } 
PRIMI( 0x11d, 0, "\x02" "f%", _fMod, _fMod );
#define LAST WORD( _fMod ) 
//////////////////////////////////////////////////////////////////////////
// W11e fAbs ( x -- abs(x) ) absolute value of given floating number.
void _fAbs() { X x; x.i=*(F.T->DP); x.f=fabs(x.f); *(F.T->DP)=x.i; } 
PRIMI( 0x11e, 0, "\x04" "fAbs", _fAbs, _fAbs );
#define LAST WORD( _fAbs ) 
//////////////////////////////////////////////////////////////////////////
// W11f log ( x -- log(x) ) natural logarithm of given floating number.
void _log() { X x; x.i=*(F.T->DP); x.f=log(x.f); *(F.T->DP)=x.i; } 
PRIMI( 0x11f, 0, "\x03" "log", _log, _log );
#define LAST WORD( _log ) 
//////////////////////////////////////////////////////////////////////////
// W120 log10 ( x -- log10(x) ) logarithm of given floating number to base 10.
void _log10() { X x; x.i=*(F.T->DP); x.f=log10(x.f); *(F.T->DP)=x.i; } 
PRIMI( 0x120, 0, "\x05" "log10", _log10, _log10 );
#define LAST WORD( _log10 ) 
//////////////////////////////////////////////////////////////////////////
// wordset 2 ( arithmetic and stack operation words )
//////////////////////////////////////////////////////////////////////////
// W200 + ( a b -- a+b ) sum of 2 integer numbers, a+b.
static void _add () { *(F.T->DP)+=F.dPop(); }
PRIMI( 0x200, 0, "\x01" "+", _add, _add );
#define LAST WORD( _add ) 
//////////////////////////////////////////////////////////////////////////
// W201 * ( a b -- a*b ) product of 2 integer numbers, a*b.
static void _mul () { *(F.T->DP)*=F.dPop(); }
PRIMI( 0x201, 0, "\x01" "*", _mul, _mul );
#define LAST WORD( _mul ) 
//////////////////////////////////////////////////////////////////////////
// W202 / ( a b -- a/b ) quotient of 2 integer numbers, a/b.
static void _div () { *(F.T->DP)/=F.dPop(); }
PRIMI( 0x202, 0, "\x01" "/", _div, _div );
#define LAST WORD( _div ) 
//////////////////////////////////////////////////////////////////////////
// W203 mod ( a b -- a%b ) remainder of 2 integer numbers, a%b.
static void _mod () { *(F.T->DP)%=F.dPop(); }
PRIMI( 0x203, 0, "\x03" "mod", _mod, _mod );
#define LAST WORD( _mod ) 
//////////////////////////////////////////////////////////////////////////
// W204 negate ( n -- -n ) negative value of given integer number.
static void _negate () { *(F.T->DP)=-*(F.T->DP); }
PRIMI( 0x204, 0, "\x06" "negate", _negate, _negate );
#define LAST WORD( _negate ) 
//////////////////////////////////////////////////////////////////////////
// W205 abs ( n -- abs(n) ) absolute value of given integer number.
static void _abs () { int v=F.dPop(); F.dPush( abs(v) ); }
PRIMI( 0x205, 0, "\x03" "abs", _abs, _abs );
#define LAST WORD( _abs ) 
//////////////////////////////////////////////////////////////////////////
// W206 max ( a b -- max(a,b) )  maximum value of 2 integer numbers a and b,
static void _max_ () { int b=F.dPop(), a=F.dPop(); F.dPush( a>b?a:b ); }
PRIMI( 0x206, 0, "\x03" "max", _max, _max_ );
#define LAST WORD( _max ) 
//////////////////////////////////////////////////////////////////////////
// W207 min ( a b -- min(a,b) )  minimum value of a and b
static void _min_ () { int b=F.dPop(), a=F.dPop(); F.dPush( a<b?a:b ); }
PRIMI( 0x207, 0, "\x03" "min", _min, _min_ );
#define LAST WORD( _min ) 
//////////////////////////////////////////////////////////////////////////
// W208 ** ( a b -- a**b ) raise given integer number a to a integer power b.
static void _power () { float b=F.dPop(), a=F.dPop(); F.dPush(round(pow(a,b))); }
PRIMI( 0x208, 0, "\x02" "**", _power, _power );
#define LAST WORD( _power ) 
//////////////////////////////////////////////////////////////////////////
// W209 iSqrt ( v -- v**.5 )  sqrt(v)
static void _iSqrt () { float v=F.dPop(); F.dPush( round( sqrt( v ) ) ); }
PRIMI( 0x209, 0, "\x05" "iSqrt", _iSqrt, _iSqrt );
#define LAST WORD( _iSqrt ) 
//////////////////////////////////////////////////////////////////////////
// W20a 1+ ( n -- n+1 ) increase given integer number by 1.
static void _1plus () { (*F.T->DP)++; }
PRIMI( 0x20a, 0, "\x02" "1+", _1plus, _1plus );
#define LAST WORD( _1plus ) 
//////////////////////////////////////////////////////////////////////////
// W20b 2+ ( n -- n+2 ) increase given integer number by 2.
static void _2plus () { *F.T->DP += 2; }
PRIMI( 0x20b, 0, "\x02" "2+", _2plus, _2plus );
#define LAST WORD( _2plus ) 
//////////////////////////////////////////////////////////////////////////
// W20c cell+ ( n -- n+4 ) increase given integer number by 4.
static void _4plus () { *F.T->DP += 4; }
PRIMI( 0x20c, 0, "\x05" "cell+", _4plus, _4plus );
#define LAST WORD( _4plus ) 
//////////////////////////////////////////////////////////////////////////
// W20d 1- ( n -- n-1 ) decrease given integer number by 1.5 1
static void _1minus () { (*F.T->DP)--; }
PRIMI( 0x20d, 0, "\x02" "1-", _1minus, _1minus );
#define LAST WORD( _1minus ) 
//////////////////////////////////////////////////////////////////////////
// W20e 2- ( n -- n-2 ) decrease given integer number by 2.
static void _2minus () { *F.T->DP -= 2; }
PRIMI( 0x20e, 0, "\x02" "2-", _2minus, _2minus );
#define LAST WORD( _2minus ) 
//////////////////////////////////////////////////////////////////////////
// W20f cell- ( n -- n-4 ) decrease given integer number by 4.
static void _4minus () { *F.T->DP -= 4; }
PRIMI( 0x20f, 0, "\x05" "cell-", _4minus, _4minus );
#define LAST WORD( _4minus ) 
//////////////////////////////////////////////////////////////////////////
// W210 2* ( n -- n*2 ) multiply given integer number by 2.
static void _2times () { *F.T->DP *= 2; }
PRIMI( 0x210, 0, "\x02" "2*", _2times, _2times );
#define LAST WORD( _2times ) 
//////////////////////////////////////////////////////////////////////////
// W211 cells ( n -- n*4 ) multiply given integer number by 4.
static void _cells () { *F.T->DP *= 4; }
PRIMI( 0x211, 0, "\x05" "cells", _cells, _cells );
#define LAST WORD( _cells ) 
//////////////////////////////////////////////////////////////////////////
// W212 2/ ( n -- n/2 ) divide given integer number by 2.
static void _2slash () { *F.T->DP /= 2; }
PRIMI( 0x212, 0, "\x02" "2/", _2slash, _2slash );
#define LAST WORD( _2slash ) 
//////////////////////////////////////////////////////////////////////////
// W214 dup ( n -- n n ) copy the top of data stack.
static void _dup () { F.dPush( *F.T->DP ); }
PRIMI( 0x214, 0, "\x03" "dup", _dup, _dup );
#define LAST WORD( _dup ) 
//////////////////////////////////////////////////////////////////////////
// W215 pick ( ni .. n1 n0 i -- ni .. n1 n0 ni ) copy the top i-th of data stack.
static void _pick () { F.dPush( F.dPick( F.dPop() ) ); }
PRIMI( 0x215, 0, "\x04" "pick", _pick, _pick );
#define LAST WORD( _pick ) 
//////////////////////////////////////////////////////////////////////////
// W216 ?dup ( n -- n n | 0 ) copy the top of data stack if the top is not 0.
static void _qdup () { if(*F.T->DP) F.dPush(*F.T->DP); }
PRIMI( 0x216, 0, "\x04" "?dup", _qdup, _qdup );
#define LAST WORD( _qdup ) 
//////////////////////////////////////////////////////////////////////////
// W217 drop ( n -- ) drop the top of data stack.
static void _drop () { F.T->DP--; }
PRIMI( 0x217, 0, "\x04" "drop", _drop, _drop );
#define LAST WORD( _drop ) 
//////////////////////////////////////////////////////////////////////////
// W218 nip ( n1 n0 -- n0 ) drop the top next of data stack.
static void _nip () { int X=*(F.T->DP); F.T->DP-=2; F.dPush(X); }
PRIMI( 0x218, 0, "\x03" "nip", _nip, _nip );
#define LAST WORD( _nip ) 
//////////////////////////////////////////////////////////////////////////
// W21a rot ( n2 n1 n0  -- n1 n0 n2 ) roll n2 to top of data stack.
static void _rot () { F.dRoll(2); }
PRIMI( 0x21a, 0, "\x03" "rot", _rot, _rot );
#define LAST WORD( _rot ) 
//////////////////////////////////////////////////////////////////////////
// W21b roll ( ni .. n1 n0 i -- .. n1 n0 ni ) roll ni to top of data stack.
static void _roll () { F.dRoll(F.dPop()); }
PRIMI( 0x21b, 0, "\x04" "roll", _roll, _roll );
#define LAST WORD( _roll ) 
//////////////////////////////////////////////////////////////////////////
// W21c -rot ( n2 n1 n0  -- n0 n2 n1 ) back roll top of data stack to n2.
static void _backRot () { F.dBackRoll(2); }
PRIMI( 0x21c, 0, "\x04" "-rot", _backRot, _backRot );
#define LAST WORD( _backRot ) 
//////////////////////////////////////////////////////////////////////////
// W21d -roll ( ni .. n1 n0 i -- n0 ni .. n1 ) back roll top of data stack to ni.
static void _backRoll () { F.dBackRoll(F.dPop()); }
PRIMI( 0x21d, 0, "\x05" "-roll", _backRoll, _backRoll );
#define LAST WORD( _backRoll ) 
//////////////////////////////////////////////////////////////////////////
// W21e 2dup ( n1 n0 -- n1 n0 n1 n0 )  copy top double-number of data stack.
static void _2dup () { _over(), _over(); }
PRIMI( 0x21e, 0, "\x04" "2dup", _2dup, _2dup );
#define LAST WORD( _2dup ) 
//////////////////////////////////////////////////////////////////////////
// W21f 2drop ( n1 n0 -- ) drop top double-number of data stack.
static void _2drop () { F.T->DP-=2; }
PRIMI( 0x21f, 0, "\x05" "2drop", _2drop, _2drop );
#define LAST WORD( _2drop ) 
//////////////////////////////////////////////////////////////////////////
// W220 2over ( n3 n2 n1 n0 -- n3 n2 n1 n0 n3 n2 ) copy top next double-number of data stack.
static void _2over () { F.dPush(F.dPick(3)), F.dPush(F.dPick(3)); }
PRIMI( 0x220, 0, "\x05" "2over", _2over, _2over );
#define LAST WORD( _2over ) 
//////////////////////////////////////////////////////////////////////////
// W221 2swap ( n3 n2 n1 n0  -- n1 n0 n3 n2 ) swap top 2 double-numbers of data stack.
static void _2swap () { F.dRoll(3), F.dRoll(3); }
PRIMI( 0x221, 0, "\x05" "2swap", _2swap, _2swap );
#define LAST WORD( _2swap ) 
//////////////////////////////////////////////////////////////////////////
// W225 and ( a b -- a&b ) bitwise AND operation of 2 given numbers.
static void _and () { *F.T->DP &= F.dPop(); }
PRIMI( 0x225, 0, "\x03" "and", _and, _and );
#define LAST WORD( _and ) 
//////////////////////////////////////////////////////////////////////////
// W226 or ( a b -- a|b ) bitwise OR operation of 2 given numbers.
static void _or () { *F.T->DP |= F.dPop(); }
PRIMI( 0x226, 0, "\x02" "or", _or, _or );
#define LAST WORD( _or ) 
//////////////////////////////////////////////////////////////////////////
// W227 xor ( a b -- a^b ) bitwise XOR operation of 2 given numbers.
static void _xor () { *F.T->DP ^= F.dPop(); }
PRIMI( 0x227, 0, "\x03" "xor", _xor, _xor );
#define LAST WORD( _xor ) 
//////////////////////////////////////////////////////////////////////////
// W228 not ( n -- n^-1 ) bitwise XOR given number by -1.
static void _not () { *F.T->DP ^= -1; }
PRIMI( 0x228, 0, "\x03" "not", _not, _not );
#define LAST WORD( _not ) 
//////////////////////////////////////////////////////////////////////////
// W229 0= ( n -- n==0 ) check top integer on data stack if it is 0.
static void _0eq () { *F.T->DP = *F.T->DP==0; }
PRIMI( 0x229, 0, "\x02" "0=", _0eq, _0eq );
#define LAST WORD( _0eq ) 
//////////////////////////////////////////////////////////////////////////
// W22a 0!= ( n -- n!=0 ) check top integer on data stack if it is not 0.
static void _0ne () { *F.T->DP = *F.T->DP!=0; }
PRIMI( 0x22a, 0, "\x03" "0!=", _0ne, _0ne );
#define LAST WORD( _0ne ) 
//////////////////////////////////////////////////////////////////////////
// W22b 0< ( n -- n<0 ) check top integer on data stack if it is less than 0.
static void _0lt () { *F.T->DP = *F.T->DP<0; }
PRIMI( 0x22b, 0, "\x02" "0<", _0lt, _0lt );
#define LAST WORD( _0lt ) 
//////////////////////////////////////////////////////////////////////////
// W22c 0> ( n -- n>0 ) check top integer on data stack if it is greater than 0.
static void _0gt () { *F.T->DP = *F.T->DP>0; }
PRIMI( 0x22c, 0, "\x02" "0>", _0gt, _0gt );
#define LAST WORD( _0gt ) 
//////////////////////////////////////////////////////////////////////////
// W22d 0<= ( n -- n<=0 ) check top integer on data stack if it is not greater than 0.
static void _0le () { *F.T->DP = *F.T->DP<=0; }
PRIMI( 0x22d, 0, "\x03" "0<=", _0le, _0le );
#define LAST WORD( _0le ) 
//////////////////////////////////////////////////////////////////////////
// W22e 0>= ( n -- n>=0 ) check top integer on data stack if it is not less than 0.
static void _0ge () { *F.T->DP = *F.T->DP>=0; }
PRIMI( 0x22e, 0, "\x03" "0>=", _0ge, _0ge );
#define LAST WORD( _0ge ) 
//////////////////////////////////////////////////////////////////////////
// W22f = ( a b -- a==b ) check top 2 integers on data stack if they are equal.
static void _eq () { int X=F.dPop(); *F.T->DP = *F.T->DP==X; }
PRIMI( 0x22f, 0, "\x01" "=", _eq, _eq );
#define LAST WORD( _eq ) 
//////////////////////////////////////////////////////////////////////////
// W230 != ( a b -- a!=b ) check top 2 integers on data stack if they are not equal.
static void _ne () { int X=F.dPop(); *F.T->DP = *F.T->DP!=X; }
PRIMI( 0x230, 0, "\x02" "!=", _ne, _ne );
#define LAST WORD( _ne ) 
//////////////////////////////////////////////////////////////////////////
// W231 < ( a b -- a<b ) check top 2 integers on data stack if a<b.
static void _lt () { int X=F.dPop(); *F.T->DP = *F.T->DP<X; }
PRIMI( 0x231, 0, "\x01" "<", _lt, _lt );
#define LAST WORD( _lt ) 
//////////////////////////////////////////////////////////////////////////
// W232 > ( a b -- a>b ) check top 2 integers on data stack if a>b.
static void _gt () { int X=F.dPop(); *F.T->DP = *F.T->DP>X; }
PRIMI( 0x232, 0, "\x01" ">", _gt, _gt );
#define LAST WORD( _gt ) 
//////////////////////////////////////////////////////////////////////////
// W233 <= ( a b -- a<=b ) check top 2 integers on data stack if a<=b.
static void _le () { int X=F.dPop(); *F.T->DP = *F.T->DP<=X; }
PRIMI( 0x233, 0, "\x02" "<=", _le, _le );
#define LAST WORD( _le ) 
//////////////////////////////////////////////////////////////////////////
// W234 >= ( a b -- a>=b ) check top 2 integers on data stack if a>=b.
static void _ge () { int X=F.dPop(); *F.T->DP = *F.T->DP>=X; }
PRIMI( 0x234, 0, "\x02" ">=", _ge, _ge );
#define LAST WORD( _ge ) 
//////////////////////////////////////////////////////////////////////////
// W235 $= ( nStr1 nStr2 -- flag ) check if nStr1 == nStr2
static void _strEq () { F.dPush( strcmp( (char*)F.dPop(), (char*)F.dPop() ) == 0 ); }
PRIMI( 0x235, 0, "\x02" "$=", _strEq, _strEq );
#define LAST WORD( _strEq )
//////////////////////////////////////////////////////////////////////////
// W236 depth ( -- depth ) depth of data stack
static void _depth () { F.dPush(F.dDepth()); }
PRIMI( 0x236, 0, "\x05" "depth", _depth, _depth );
#define LAST WORD( _depth )
//////////////////////////////////////////////////////////////////////////
// W239 .s ( -- ) show data stack
static void _dotS() { F.dotS(); }
PRIMI( 0x239, 0, "\x02" ".s", _dotS, _dotS );
#define LAST WORD( _dotS )
//////////////////////////////////////////////////////////////////////////
// wordset 3 ( other primitive words )
//////////////////////////////////////////////////////////////////////////
// W300 char <char> ( -- ascii ) ascii code of given char.
static void _char () { 
  char c=*(F.parseToken(' ')+1);
  if(F.T->state&CMPLING) F.compile( WORD( _doLit ) ), F.compile( (Word*)c );
  else F.dPush( (int)c ); }
PRIMI( 0x300, IMMED, "\x04" "char", _char, _char );
#define LAST WORD( _char ) 
//////////////////////////////////////////////////////////////////////////
// W301 bl ( -- 0x20 ) ascii code of char blank.
const Word W_bl = { LAST, 0x301, 0, "\x02" "bl", _doCon, ' ' };
#define LAST WORD( _bl ) 
//////////////////////////////////////////////////////////////////////////
// W302 emit ( ascii -- ) print the char of given ascii code.
static void _emit () { 
  F.print((char)F.dPop()); }
PRIMI( 0x302, 0, "\x04" "emit", _emit, _emit );
#define LAST WORD( _emit ) 
//////////////////////////////////////////////////////////////////////////
// W303 print ( nStr -- ) print given nStr.
static void _print () { 
  F.print((char*)(F.dPop())+1); }
PRIMI( 0x303, 0, "\x05" "print", _print, _print );
#define LAST WORD( _print ) 
//////////////////////////////////////////////////////////////////////////
// W304 type ( addr n -- ) print string of given number of chars at given address.
static void _type () { char nch=F.dPop(), *adr=(char*)F.dPop(); while(*adr) F.print(*adr++); }
PRIMI( 0x304, 0, "\x04" "type", _type, _type );
#define LAST WORD( _type ) 
//////////////////////////////////////////////////////////////////////////
// W305 word <str> ( delimiter -- nStr ) parse string by given delimiter.
static void _word () { 
  F.dPush( (int)F.parseToken( (char)F.dPop() ) ); }
PRIMI( 0x305, 0, "\x04" "word", _word, _word );
#define LAST WORD( _word ) 
//////////////////////////////////////////////////////////////////////////
// W306 token <str> ( -- nStr ) parse string by white space (length trucated at 30).
static void _token () { 
  char *tkn=F.parseToken(' '), n=*tkn; if(n>0x1f){ *tkn=n=0x1f, *(tkn+n+1)=0; } F.dPush( (int)tkn ); }
PRIMI( 0x306, 0, "\x05" "token", _token, _token );
#define LAST WORD( _token ) 
//////////////////////////////////////////////////////////////////////////
// W307 eval ( nStr -- ) evaluate given nStr.
static void _eval(){ F.evalScript((char*)F.dPop()); }
PRIMI( 0x307, 0, "\x04" "eval", _eval, _eval );
#define LAST WORD( _eval ) 
//////////////////////////////////////////////////////////////////////////
// W308 find  ( nStr -- word ) find the forth word which name is of given nStr.
static void _find () { 
  Word*w=F.vocSearch((char*)F.dPop()); F.dPush((int)w); }
PRIMI( 0x308, 0, "\x04" "find", _find, _find );
#define LAST WORD( _find ) 
//////////////////////////////////////////////////////////////////////////
// W309 ' ( <nStr> -- word ) find the forth word of given name.
static void _tick () { 
  Word*w=F.vocSearch(F.parseToken(' ')); F.dPush((int)w); }
PRIMI( 0x309, 0, "\x01" "'", _tick, _tick );
#define LAST WORD( _tick ) 
//////////////////////////////////////////////////////////////////////////
// W30a context ( -- lfa ) the address contain the last word defined.
static void _context () { F.dPush((int)&(F.voc->context)); }
PRIMI( 0x30a, 0, "\x07" "context", _context, _context );
#define LAST WORD( _context ) 
//////////////////////////////////////////////////////////////////////////
// W30b ms ( n -- ) wait for n milli seconds
static void _ms () {
  F.ms(F.dPop()); }
PRIMI( 0x30b, 0, "\x02" "ms", _ms, _ms );
#define LAST WORD( _ms ) 
//////////////////////////////////////////////////////////////////////////
// W30f ." <string>" ( --  ) Print a string delimited by quote. compile only.
static void _dotQ() { F.compile( WORD( _doStr ) ), F.compile( (Word*)F.parseToken('"')), F.compile( WORD( _print ) ); }
PRIMI( 0x30f, IMMED_COMPO, "\x02" ".\"", _dotQ, _dotQ );
#define LAST WORD( _dotQ ) 
//////////////////////////////////////////////////////////////////////////
// W310 .( <string>) ( --  ) Print a string delimited by right parenthesis.
static void _dotP() { F.print(F.parseToken(')')+1); }
PRIMI( 0x310, 0, "\x02" ".(", _dotP, _dotP );
#define LAST WORD( _dotP ) 
//////////////////////////////////////////////////////////////////////////
// W311 cr ( --  ) Print carriage return line feed.
static void _cr() { F.print("\n"); }
PRIMI( 0x311, 0, "\x02" "cr", _cr, _cr );
#define LAST WORD( _cr ) 
//////////////////////////////////////////////////////////////////////////
// W312 (forget) ( nStr -- ) forget all words since the word of given name
static void _pForget() { F.forgetWord((char*)F.dPop()); }
PRIMI( 0x312, 0, "\x08" "(forget)", _pForget, _pForget );
#define LAST WORD( _pForget )
//////////////////////////////////////////////////////////////////////////
// W313 forget ( <name> -- ) forget all words since the word of given name
const Word* L_forget[] = { &W_bl, &W_word, &W_pForget, &W_ret };
const Word W_forget = { LAST, 0x313, 0, "\x06" "forget", _doCol, (int)L_forget };
#define LAST WORD( _forget ) 
//////////////////////////////////////////////////////////////////////////
// W312 ?cr ( -- ) Print '\n', if strlen(F.tob)>=F.tobLmt.
void _qcr(){ F.qcr(); }
PRIMI( 0x312, 0, "\x03" "?cr", _qcr, _qcr );
#define LAST WORD( _qcr ) 
//////////////////////////////////////////////////////////////////////////
// W313 .id ( w -- ) Print the name of given forth word.
void _dotId(){ F.dotId( (Word*) F.dPop() ); }
PRIMI( 0x313, 0, "\x03" ".id", _dotId, _dotId );
#define LAST WORD( _dotId ) 
//////////////////////////////////////////////////////////////////////////
// W314 getMillis ( -- ms ) get cpu time in milli seconds since powered on or reset.
void _getMillis(){ F.dPush( millis() ); }
PRIMI( 0x314, 0, "\x09" "getMillis", _getMillis, _getMillis );
#define LAST WORD( _getMillis ) 
//////////////////////////////////////////////////////////////////////////
// W315 getMicros ( -- us ) get cpu time in micro seconds since powered on or reset.
void _getMicros(){ F.dPush( micros() ); }
PRIMI( 0x314, 0, "\x09" "getMicros", _getMicros, _getMicros );
#define LAST WORD( _getMicros ) 
//////////////////////////////////////////////////////////////////////////
// wordset 4 ( tools )
//////////////////////////////////////////////////////////////////////////
// W400 words          ( -- ) show all word names
//      words <substr> ( -- ) show all word names including given substring
static void _words () {
  char *tkn=F.parseToken(' '); F.words(tkn); }
PRIMI( 0x400, 0, "\x05" "words", _words, _words );
#define LAST WORD( _words ) 
/////////////////////////////////////////////////////////////////////////////////////////////////////
// W401 (see) ( w -- ) see the given word
static void _psee   () { F.see((Word*)F.dPop()); }
PRIMI( 0x401, 0, "\x05" "(see)", _psee, _psee );
#define LAST WORD( _psee ) 
/////////////////////////////////////////////////////////////////////////////////////////////////////
// W402 see <name>     ( -- ) see the word of given name
static void _see   () { 
  F.see(F.vocSearch(F.parseToken(' '))); }
PRIMI( 0x402, 0, "\x03" "see", _see, _see );
#define LAST WORD( _see ) 
//////////////////////////////////////////////////////////////////////////
// W403 dump           ( a n -- ) show n cells at address a
static void _dump  () { 
  int X=F.dPop(); F.dump((int*)F.dPop(),X); }
PRIMI( 0x403, 0, "\x04" "dump", _dump, _dump );
#define LAST WORD( _dump ) 
//////////////////////////////////////////////////////////////////////////
// W404 trace <name>  ( ... -- ... ) trace the calling sequence of give forth colon word
static void _trace  () { 
  char* name = F.parseToken(' ');
if ( ! *name ) { F.abort( 4030, "trace word not given" ); return; }
  Word* w = F.vocSearch(name);
  if ( ! w ) { F.abort( 4031, "name to trace unDef" ); return; }
  F.T->W=w;
  F.see(w);
  F.print("trace \"\\x"), F.printHex((int)*name), F.print("\" \""), F.print(name+1), F.print("\" ");
  F.T->tracing=1; w->code();
}
PRIMI( 0x404, 0, "\x05" "trace", _trace, _trace );
#define LAST WORD( _trace ) 
/////////////////////////////////////////////////////////////////////////////////////////////////////////
// W405 checkAll ( -- ) check all words defined
static void _checkAll(){ 
  Word *w=F.voc->context; int16_t lastId=F.voc->lastId, i=F.voc->nWord;
  F.print("\nchecking all words");
  while(w){
    int16_t id=w->id; char *name=w->name, n=*name++; bool showName=false;
    if(id!=lastId && (lastId&0xff)!=0xff){
      F.print("\n??? id "), F.printHexZ(id,3), F.print(" not expected "), F.printHexZ(lastId,3), showName=true; 
    }
    if(strlen(name)!=n){
      F.print("\n??? nameLen "), F.print((int)strlen(name)), F.print(" not expected "), F.print((int)n), showName=true;
    }
    i--;
    if(showName){
      F.print('\n'), F.print(i), F.print(" W"), F.printHexZ(id,3);
      F.print(' '), F.showWordType(w), F.print("0x"), F.printHex(n), F.print(' '), F.print(w->name+1);
    }
    lastId=id-1, w=w->link;
  }
}
PRIMI( 0x405, 0, "\x08" "checkAll", _checkAll, _checkAll );
#define LAST WORD( _checkAll ) 
/////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
// W406 dir ( <path> -- ) show directory of given path
static void _dir(){
  char *dirs[32]; int8_t nDir=0;
  if( ! F.curDir ){ PRINTF("\nno SPIFFS directory "); return; }
  char * path = F.parseToken(' ');
  int pathLen;
  char * p = F.tmp;
  if( ! path ) {
    strcpy(p+1, F.curDir.name());
    *p = pathLen = strlen(p+1);
    p[1+pathLen] = 0;
    path = p;
  } else pathLen = strlen(path+1);
  if( *(path+1) != '/' ){
    strcpy( ++p, F.curDir.name() );
    p += strlen( p );
    strcpy( p, path+1 );
    p = F.tmp; *p = strlen( p+1 );
    path = p;
  }
  File dir = SPIFFS.open( path+1, FILE_READ );
  PRINTF( "\nshow directory 0x%x \"%s\" ", *path, path+1 );
  if( ! dir ){
    abort( 406, "invalid path" ); return;
  }
  File file;
  pathLen = strlen(path+1);
  pathLen += *((char*)path+pathLen) != '/' ? 1 : 0 ;
  while( file = dir.openNextFile(FILE_READ) ) {
    char *fileName = (char *)file.name() + pathLen; // short name
    char *nameEnd = strchr(fileName, '/');
    if( nameEnd ){
      int dirLen = nameEnd-fileName;
      char*dirName = p = F.tmp+1; strncpy(p, fileName, dirLen); *(p+dirLen) = 0;
      int8_t iDir = nDir-1;
      for ( ; iDir>=0; iDir-- )
    //{
      //PRINTF("strcmp( \"%s\", \"%s\"% ) = %d ", dirName, dirs[iDir], strcmp(dirName, dirs[iDir]) );
        if( strcmp(dirName, dirs[iDir])==0 ) break;
    //}
      if( !nDir || iDir<0 ){
        PRINTF( "\n   <dir> 0x%x \"%s\" ", dirLen, dirName );
        dirs[nDir++] = F.uniqueString(dirName-1)+1;
      }
    } else PRINTF( "\n  %6d 0x%x \"%s\" ", file.size(), strlen(fileName), fileName );
  }
}
PRIMI( 0x406, 0, "\x03" "dir", _dir, _dir );
#define LAST WORD( _dir ) 
*/
/////////////////////////////////////////////////////////////////////////////////////////////////////////
// wordset 5 ( digital input/output words )
//////////////////////////////////////////////////////////////////////////
// W500 led ( -- pin  ) gpio pin number of led on back side of wb32
const Word W_led = { LAST, 0x500, 0, "\x03" "led", _doCon, 16 };
#define LAST WORD( _led ) 
//////////////////////////////////////////////////////////////////////////
// W501 pinMode ( pin mode -- ) set pin as INPUT or OUTPUT
static void _pinMode () { int mode=F.dPop(); pinMode(F.dPop(),mode); }
PRIMI( 0x501, 0, "\x07" "pinMode", _pinMode, _pinMode );
#define LAST WORD( _pinMode ) 
//////////////////////////////////////////////////////////////////////////
// W502 INPUT ( -- mode ) pin mode INPUT
const Word W_INPUT = { LAST, 0x502, 0, "\x05" "INPUT", _doCon, INPUT };
#define LAST WORD( _INPUT ) 
//////////////////////////////////////////////////////////////////////////
// W503 OUTPUT ( -- mode ) pin mode OUTPUT
const Word W_OUTPUT = { LAST, 0x503, 0, "\x06" "OUTPUT", _doCon, OUTPUT };
#define LAST WORD( _OUTPUT ) 
//////////////////////////////////////////////////////////////////////////
// W504 digitalRead ( pin -- level ) read pin level
static void _digitalRead  () { *(F.T->DP)=digitalRead (*(F.T->DP)); }
const Word W_digitalRead = { LAST, 0x504, 0, "\x0b" "digitalRead", _digitalRead , (int)"_digitalRead" };
#define LAST WORD( _digitalRead ) 
//////////////////////////////////////////////////////////////////////////
// W505 digitalWrite ( pin level -- ) print pin to given level
static void _digitalWrite  () { int level=F.dPop(); digitalWrite (F.dPop(),level); }
const Word W_digitalWrite = { LAST, 0x505, 0, "\x0c" "digitalWrite", _digitalWrite, (int)"_digitalWrite"};
#define LAST WORD( _digitalWrite ) 
//////////////////////////////////////////////////////////////////////////
// W506 HIGH ( -- level ) pin level HIGH
const Word W_HIGH = { LAST, 0x506, 0, "\x04" "HIGH", _doCon, HIGH };
#define LAST WORD( _HIGH ) 
//////////////////////////////////////////////////////////////////////////
// W507 LOW ( -- level ) pin level LOW
const Word W_LOW = { LAST, 0x507, 0, "\x03" "LOW", _doCon, LOW };
#define LAST WORD( _LOW ) 
//////////////////////////////////////////////////////////////////////////
// W508 output ( pin -- ) set pin mode as OUTPUT
static void _output () { uint8_t pin=F.dPop(); pinMode(pin,OUTPUT); }
PRIMI( 0x508, 0, "\x06" "output", _output, _output );
#define LAST WORD( _output ) 
//////////////////////////////////////////////////////////////////////////
// W509 pinOut ( pin level -- ) set pin to given level
static void _pinOut () { uint8_t level=F.dPop(), pin=F.dPop();
//F.print(" digitalWrite(0x"), F.printHex(pin), F.print(", 0x"), F.printHex(level), F.print(") @ "), F.showTime(), F.cr();
  digitalWrite(pin, level); }
PRIMI( 0x509, 0, "\x06" "pinOut", _pinOut, _pinOut );
#define LAST WORD( _pinOut ) 
//////////////////////////////////////////////////////////////////////////
// W50a high ( pin -- ) set pin to level HIGH
static void _high () { F.dPush(HIGH), _pinOut(); }
PRIMI( 0x50a, 0, "\x04" "high", _high, _high );
#define LAST WORD( _high ) 
//////////////////////////////////////////////////////////////////////////
// W50b low ( pin -- ) set pin to level LOW
static void _low () { F.dPush(LOW), _pinOut(); }
PRIMI( 0x50b, 0, "\x03" "low", _low, _low );
#define LAST WORD( _low ) 
//////////////////////////////////////////////////////////////////////////
// W50c toggle ( pin -- ) toggle pin level
static void _toggle () { F.dPush(1-digitalRead(*(F.T->DP))); _pinOut(); }
PRIMI( 0x50c, 0, "\x06" "toggle", _toggle, _toggle );
#define LAST WORD( _toggle ) 
//////////////////////////////////////////////////////////////////////////
// W50d input ( pin -- ) set pin mode as INPUT
static void _input(){
  uint8_t pin=F.dPop();
  pinMode(pin,INPUT); }
PRIMI( 0x50d, 0, "\x05" "input", _input, _input );
#define LAST WORD( _input ) 
//////////////////////////////////////////////////////////////////////////
// W50e pinIn ( pin - level ) read pin level
static void _pinIn(){ // 21. pinin ( pin -- v ) read v from digital INPUT pin (v=0 for LOW or v=1 for HIGH)
  uint8_t pin=F.dPop(), level=digitalRead(pin);
//PRINTF("\ndigitalRead(0x%x)=0x%x; ",pin, level);
  F.dPush(level); } 
PRIMI( 0x50e, 0, "\x05" "pinIn", _pinIn, _pinIn );
#define LAST WORD( _pinIn ) 
//////////////////////////////////////////////////////////////////////////
#define LAST WORD( _pinIn ) 
#endif WS05_H
// ws06.h // wordset 06 ( defining words )
#ifndef WS06_H
#define WS06_H
//////////////////////////////////////////////////////////////////////////
// W600 blinks ( n -- ) blink led n times // : blinks 2* 1- for led toggle 1000 ms next ;
const Word* L_blinks[] = { &W_led, &W_output, &W_led, &W_high, &W_2times,
  &W_doBegin, &W_qdup,
  &W_doWhile, (Word*)9, &W_1minus, &W_led, &W_toggle, &W_doLit, (Word*)1000, &W_ms,
  &W_doRepeat, (Word*)-10,
  &W_ret };
const Word W_blinks = { LAST, 0x600, 0, "\x06" "blinks", _doCol, (int)L_blinks };
#define LAST WORD( _blinks ) 
//////////////////////////////////////////////////////////////////////////
// wordset 7 ( all color code words )
//////////////////////////////////////////////////////////////////////////
// W700 wbBLACK ( -- color ) color=0x0000
const Word W_wbBLACK = { LAST, 0x700, 0, "\x07" "wbBLACK", _doCon, 0x0000 };
#define LAST WORD( _wbBLACK ) 
//////////////////////////////////////////////////////////////////////////
// W701 wbNAVY ( -- color ) color=0x0F00
const Word W_wbNAVY = { LAST, 0x701, 0, "\x06" "wbNAVY", _doCon, 0x0f00 };
#define LAST WORD( _wbNAVY ) 
//////////////////////////////////////////////////////////////////////////
// W702 wbDARKGREEN ( -- color ) color=0xE003
const Word W_wbDARKGREEN = { LAST, 0x702, 0, "\x0b" "wbDARKGREEN", _doCon, 0xe003 };
#define LAST WORD( _wbDARKGREEN ) 
//////////////////////////////////////////////////////////////////////////
// W703 wbDARKCYAN ( -- color ) color=0xEF03
const Word W_wbDARKCYAN = { LAST, 0x703, 0, "\x0a" "wbDARKCYAN", _doCon, 0xef03 };
#define LAST WORD( _wbDARKCYAN ) 
//////////////////////////////////////////////////////////////////////////
// W704 wbMAROON ( -- color ) color=0x0078
const Word W_wbMAROON = { LAST, 0x704, 0, "\x08" "wbMAROON", _doCon, 0x0078 };
#define LAST WORD( _wbMAROON ) 
//////////////////////////////////////////////////////////////////////////
// W705 wbPURPLE ( -- color ) color=0x0F78
const Word W_wbPURPLE = { LAST, 0x705, 0, "\x08" "wbPURPLE", _doCon, 0x0f78 };
#define LAST WORD( _wbPURPLE ) 
//////////////////////////////////////////////////////////////////////////
// W706 wbOLIVE ( -- color ) color=0xE07B
const Word W_wbOLIVE = { LAST, 0x706, 0, "\x07" "wbOLIVE", _doCon, 0xe07b };
#define LAST WORD( _wbOLIVE ) 
//////////////////////////////////////////////////////////////////////////
// W707 wbLIGHTGREY ( -- color ) color=0x18C6
const Word W_wbLIGHTGREY = { LAST, 0x707, 0, "\x0b" "wbLIGHTGREY", _doCon, 0x18c6 };
#define LAST WORD( _wbLIGHTGREY ) 
//////////////////////////////////////////////////////////////////////////
// W708 wbDARKGREY ( -- color ) color=0xEF7B
const Word W_wbDARKGREY = { LAST, 0x708, 0, "\x0a" "wbDARKGREY", _doCon, 0xef7b };
#define LAST WORD( _wbDARKGREY ) 
//////////////////////////////////////////////////////////////////////////
// W709 wbBLUE ( -- color ) color=0x1F00
const Word W_wbBLUE = { LAST, 0x709, 0, "\x06" "wbBLUE", _doCon, 0x1f00 };
#define LAST WORD( _wbBLUE ) 
//////////////////////////////////////////////////////////////////////////
// W70a wbGREEN ( -- color ) color=0xE007
const Word W_wbGREEN = { LAST, 0x70a, 0, "\x07" "wbGREEN", _doCon, 0xe007 };
#define LAST WORD( _wbGREEN ) 
//////////////////////////////////////////////////////////////////////////
// W70b wbCYAN ( -- color ) color=0xFF07
const Word W_wbCYAN = { LAST, 0x70b, 0, "\x06" "wbCYAN", _doCon, 0xff07 };
#define LAST WORD( _wbCYAN ) 
//////////////////////////////////////////////////////////////////////////
// W70c wbRED ( -- color ) color=0x00F8
const Word W_wbRED = { LAST, 0x70c, 0, "\x05" "wbRED", _doCon, 0x00f8 };
#define LAST WORD( _wbRED ) 
//////////////////////////////////////////////////////////////////////////
// W70d wbMAGENTA ( -- color ) color=0x1FF8
const Word W_wbMAGENTA = { LAST, 0x70d, 0, "\x09" "wbMAGENTA", _doCon, 0x1ff8 };
#define LAST WORD( _wbMAGENTA ) 
//////////////////////////////////////////////////////////////////////////
// W70e wbYELLOW ( -- color ) color=0xE0FF
const Word W_wbYELLOW = { LAST, 0x70e, 0, "\x08" "wbYELLOW", _doCon, 0xe0ff };
#define LAST WORD( _wbYELLOW ) 
//////////////////////////////////////////////////////////////////////////
// W70f wbWHITE ( -- color ) color=0xFFFF
const Word W_wbWHITE = { LAST, 0x70f, 0, "\x07" "wbWHITE", _doCon, 0xffff };
#define LAST WORD( _wbWHITE ) 
//////////////////////////////////////////////////////////////////////////
// W710 wbORANGE ( -- color ) color=0x20FD
const Word W_wbORANGE = { LAST, 0x710, 0, "\x08" "wbORANGE", _doCon, 0x20fd };
#define LAST WORD( _wbORANGE ) 
//////////////////////////////////////////////////////////////////////////
// W711 wbGREENYELLOW ( -- color ) color=0xE5AF
const Word W_wbGREENYELLOW = { LAST, 0x711, 0, "\x0d" "wbGREENYELLOW", _doCon, 0xe5af };
#define LAST WORD( _wbGREENYELLOW ) 
//////////////////////////////////////////////////////////////////////////
// W712 wbPINK ( -- color ) color=0x1FF8
const Word W_wbPINK = { LAST, 0x712, 0, "\x06" "wbPINK", _doCon, 0x1ff8 };
#define LAST WORD( _wbPINK ) 
//////////////////////////////////////////////////////////////////////////
// W713 _wbColor ( i -- color ) color of given index
#define nColor 0x13
const uint16_t wbColor[nColor] = {
  0x0000, 0x0f00, 0xe003, 0xef03, 0x0078, 0x0f78, 0xe07b, 0x18c6,
  0xef7b, 0x1f00, 0xe007, 0xff07, 0x00f8, 0x1ff8, 0xe0ff, 0xffff,
  0x20fd, 0xe5af, 0x1ff8 };
static void _wbColor(){ F.dPush(wbColor[(F.dPop())%nColor]); }
PRIMI( 0x713, 0, "\x08" "_wbColor", _wbColor, _wbColor );
#define LAST WORD( _wbColor ) 
//////////////////////////////////////////////////////////////////////////
// W716 btLR ( -- pin ) the Left  Red    button
#define btLR     32
const Word W_btLR = { LAST, 0x716, 0, "\x04" "btLR", _doCon, btLR };
#define LAST WORD( _btLR ) 
//////////////////////////////////////////////////////////////////////////
// W717 btLG ( -- pin ) the Left  Green  button
#define btLG     33
const Word W_btLG = { LAST, 0x717, 0, "\x04" "btLG", _doCon, btLG };
#define LAST WORD( _btLG ) 
//////////////////////////////////////////////////////////////////////////
// W718 btRB ( -- pin ) the Right Blue   button
#define btRB     34
const Word W_btRB = { LAST, 0x718, 0, "\x04" "btRB", _doCon, btRB };
#define LAST WORD( _btRB ) 
//////////////////////////////////////////////////////////////////////////
// W719 btRY ( -- pin ) the Right Yellow button
#define btRY     35
const Word W_btRY = { LAST, 0x719, 0, "\x04" "btRY", _doCon, btRY };
#define LAST WORD( _btRY ) 
//////////////////////////////////////////////////////////////////////////
// W71a btSTART ( -- pin ) the small  right button
#define btSTART  23
const Word W_btSTART = { LAST, 0x71a, 0, "\x07" "btSTART", _doCon, btSTART };
#define LAST WORD( _btSTART ) 
//////////////////////////////////////////////////////////////////////////
// W71b btSELECT ( -- pin ) the small  left button
#define btSELECT 39
const Word W_btSELECT = { LAST, 0x71b, 0, "\x08" "btSELECT", _doCon, btSELECT };
#define LAST WORD( _btSELECT ) 
//////////////////////////////////////////////////////////////////////////
// W71c btPROG ( -- pin ) the small  top button on back side
#define btPROG    0
const Word W_btPROG = { LAST, 0x71c, 0, "\x06" "btPROG", _doCon, btPROG };
#define LAST WORD( _btPROG ) 
//////////////////////////////////////////////////////////////////////////
const int8_t buttons[7] = { btPROG, btLG, btSTART, btLR, btRY, btRB, btSELECT };
//////////////////////////////////////////////////////////////////////////
#define LED    16
#define BEEPER 25
// wordset 8 ( wifiboy 32 graphics type words )
/*
/////////////////////////////////////////////////////////////////////////////////////////////////////////
// W800 lcdInit ( -- ) linitialize lcd
static void _lcdInit(){ lcdInit(); }
const Word W_lcdInit = { LAST, 0x800, 0, "\x07" "lcdInit", lcdInit, (int)"lcdInit" };
#define LAST WORD( _lcdInit ) 
*/
/////////////////////////////////////////////////////////////////////////////////////////////////////////
// W801 wb_setAddrWindow ( x0 y0 x1 y1 -- ) set window rect
static void _wb_setAddrWindow(){
  uint16_t y1=(uint16_t)(F.dPop()), x1=(uint16_t)(F.dPop());
  uint16_t y0=(uint16_t)(F.dPop()), x0=(uint16_t)(F.dPop());
  wb_setAddrWindow(x0, y0, x1, y1);
}
PRIMI( 0x801, 0, "\x10" "wb_setAddrWindow", _wb_setAddrWindow, _wb_setAddrWindow );
#define LAST WORD( _wb_setAddrWindow ) 
/////////////////////////////////////////////////////////////////////////////////////////////////////////
// W802 wb_fillScreen ( color -- ) fill screen by given color
static void _wb_fillScreen(){
  uint16_t color=(uint16_t)(F.dPop());
  wb_fillScreen(color);
}
PRIMI( 0x802, 0, "\x0d" "wb_fillScreen", _wb_fillScreen, _wb_fillScreen );
#define LAST WORD( _wb_fillScreen ) 
/////////////////////////////////////////////////////////////////////////////////////////////////////////
// W803 wb_fillRect ( x y w h color -- ) fill rect by given color
static void _wb_fillRect(){
  uint16_t color=(uint16_t)(F.dPop());
  int16_t h=(int16_t)(F.dPop()), w=(int16_t)(F.dPop());
  int16_t y=(int16_t)(F.dPop()), x=(int16_t)(F.dPop());
  wb_fillRect(x, y, w, h, color);
}
PRIMI( 0x803, 0, "\x0b" "wb_fillRect", _wb_fillRect, _wb_fillRect );
#define LAST WORD( _wb_fillRect ) 
/////////////////////////////////////////////////////////////////////////////////////////////////////////
// W804 wb_drawPixel ( x y color -- ) at x,y draw pixel of given color
static void _wb_drawPixel(){
  uint16_t color=(uint16_t)(F.dPop());
  uint16_t y=(uint16_t)(F.dPop());
  uint16_t x=(uint16_t)(F.dPop());
  wb_drawPixel(x, y, color);
}
PRIMI( 0x804, 0, "\x0c" "wb_drawPixel", _wb_drawPixel, _wb_drawPixel );
#define LAST WORD( _wb_drawPixel ) 
/////////////////////////////////////////////////////////////////////////////////////////////////////////
// W805 wb_pushColor ( color -- ) push given color
static void _wb_pushColor(){
  uint16_t color=(uint16_t)(F.dPop());
  wb_pushColor(color);
}
PRIMI( 0x805, 0, "\x0c" "wb_pushColor", _wb_pushColor, _wb_pushColor );
#define LAST WORD( _wb_pushColor ) 
/////////////////////////////////////////////////////////////////////////////////////////////////////////
// W806 wb_drawFastVLine ( x y h color -- ) draw vertical line at x,y of hight h
static void _wb_drawFastVLine(){
  uint16_t color=(uint16_t)(F.dPop());
  int16_t h=(int16_t)(F.dPop());
  int16_t y=(int16_t)(F.dPop());
  int16_t x=(int16_t)(F.dPop());
  wb_drawFastVLine(x, y, h, color);
}
PRIMI( 0x806, 0, "\x10" "wb_drawFastVLine", _wb_drawFastVLine, _wb_drawFastVLine );
#define LAST WORD( _wb_drawFastVLine ) 
/////////////////////////////////////////////////////////////////////////////////////////////////////////
// W807 wb_drawFastHLine ( x y w color -- ) draw horizontal line at x,y of width w
static void _wb_drawFastHLine(){
  uint16_t color=(uint16_t)(F.dPop());
  int16_t w=(int16_t)(F.dPop());
  int16_t y=(int16_t)(F.dPop());
  int16_t x=(int16_t)(F.dPop());
  wb_drawFastHLine(x, y, w, color);
}
PRIMI( 0x807, 0, "\x10" "wb_drawFastHLine", _wb_drawFastHLine, _wb_drawFastHLine );
#define LAST WORD( _wb_drawFastHLine ) 
/////////////////////////////////////////////////////////////////////////////////////////////////////////
// W808 wb_drawRect ( x y w color -- ) draw rect at x,y of width w hight h
static void _wb_drawRect(){
  uint16_t color=(uint16_t)(F.dPop());
  int16_t h=(int16_t)(F.dPop());
  int16_t w=(int16_t)(F.dPop());
  int16_t y=(int16_t)(F.dPop());
  int16_t x=(int16_t)(F.dPop());
  wb_drawRect(x, y, w, h, color);
}
PRIMI( 0x808, 0, "\x0b" "wb_drawRect", _wb_drawRect, _wb_drawRect );
#define LAST WORD( _wb_drawRect ) 
/////////////////////////////////////////////////////////////////////////////////////////////////////////
// W809 wb_drawLine ( x0 y0 x1 y1 color w -- ) draw color line from x0,y0 to x1,y1 of width w
static void _wb_drawLine(){
  int16_t w=(int16_t)(F.dPop());
  uint16_t color=(uint16_t)(F.dPop());
  int16_t y1=(int16_t)(F.dPop());
  int16_t x1=(int16_t)(F.dPop());
  int16_t y0=(int16_t)(F.dPop());
  int16_t x0=(int16_t)(F.dPop());
  wb_drawLine(x0, y0, x1, y1, color, w);
}
PRIMI( 0x809, 0, "\x0b" "wb_drawLine", _wb_drawLine, _wb_drawLine );
#define LAST WORD( _wb_drawLine ) 
/////////////////////////////////////////////////////////////////////////////////////////////////////////
// W80a wb_drawCircle ( x y r color w -- ) draw color circle at x,y of radius r width w
static void _wb_drawCircle(){
  uint16_t w=(int16_t)(F.dPop());
  uint16_t color=(uint16_t)(F.dPop());
  int16_t r=(int16_t)(F.dPop());
  int16_t y=(int16_t)(F.dPop());
  int16_t x=(int16_t)(F.dPop());
  wb_drawCircle(x, y, r, color, w);
}
PRIMI( 0x80a, 0, "\x0d" "wb_drawCircle", _wb_drawCircle, _wb_drawCircle );
#define LAST WORD( _wb_drawCircle ) 
/////////////////////////////////////////////////////////////////////////////////////////////////////////
// W80b wb_drawCorner ( x y r corner color w -- ) draw color corner at x,y of radius r width w
static void _wb_drawCorner(){
  uint16_t w=(uint16_t)(F.dPop());
  uint16_t color=(uint16_t)(F.dPop());
  uint8_t corner=(uint8_t)(F.dPop());
  int16_t r=(int16_t)(F.dPop());
  int16_t y=(int16_t)(F.dPop());
  int16_t x=(int16_t)(F.dPop());
  wb_drawCorner(x, y, r, corner, color, w);
}
PRIMI( 0x80b, 0, "\x0d" "wb_drawCorner", _wb_drawCorner, _wb_drawCorner );
#define LAST WORD( _wb_drawCorner ) 
/////////////////////////////////////////////////////////////////////////////////////////////////////////
// W80c wb_fillCircle ( x y radius cornername delta color -- ) fill circle at x,y with given radius cornername delta color
static void _wb_fillCircle(){
  uint16_t color=(uint16_t)(F.dPop());
  int16_t delta=(int16_t)(F.dPop());
  uint8_t cornername=(uint8_t)(F.dPop());
  int16_t radius=(int16_t)(F.dPop());
  int16_t y=(int16_t)(F.dPop());
  int16_t x=(int16_t)(F.dPop());
  wb_fillCircle(x, y, radius, cornername, delta, color);
}
PRIMI( 0x80c, 0, "\x0d" "wb_fillCircle", _wb_fillCircle, _wb_fillCircle );
#define LAST WORD( _wb_fillCircle ) 
/////////////////////////////////////////////////////////////////////////////////////////////////////////
// W80d wb_fillCircle2 ( x y radius color -- ) fill circle at x,y with given radius color
static void _wb_fillCircle2(){
  uint16_t color=(uint16_t)(F.dPop());
  int16_t r=(int16_t)(F.dPop());
  int16_t y=(int16_t)(F.dPop());
  int16_t x=(int16_t)(F.dPop());
  wb_fillCircle2(x, y, r, color);
}
PRIMI( 0x80d, 0, "\x0e" "wb_fillCircle2", _wb_fillCircle2, _wb_fillCircle2 );
#define LAST WORD( _wb_fillCircle2 ) 
/////////////////////////////////////////////////////////////////////////////////////////////////////////
// W80e wb_drawImage ( x y w h image -- ) draw w*h image at x,y
static void _wb_drawImage(){
  char *a=(char *)(F.dPop());
  uint16_t *image=(uint16_t*)a;
  uint16_t h=(uint16_t)(F.dPop());
  uint16_t w=(uint16_t)(F.dPop());
  uint16_t y=(uint16_t)(F.dPop());
  uint16_t x=(uint16_t)(F.dPop());
  wb_drawImage(x, y, w, h, image);
  wb_drawPixel(10,10,0xffff);
}
PRIMI( 0x80e, 0, "\xc" "wb_drawImage", _wb_drawImage, _wb_drawImage );
#define LAST WORD( _wb_drawImage ) 
/////////////////////////////////////////////////////////////////////////////////////////////////////////
// W80f wb_setTextColor ( color bgColor -- ) set color and background color for text
static void _wb_setTextColor(){
  uint16_t bgColor=(uint16_t)(F.dPop());
  uint16_t color=(uint16_t)(F.dPop());
  wb_setTextColor(color, bgColor);
}
PRIMI( 0x80f, 0, "\x0f" "wb_setTextColor", _wb_setTextColor, _wb_setTextColor );
#define LAST WORD( _wb_setTextColor ) 
/////////////////////////////////////////////////////////////////////////////////////////////////////////
// W810 wb_drawString ( str x y size type -- ) at x,y draw string of given size type 
static void _wb_drawString(){
  uint8_t type=(uint8_t)(F.dPop());
  uint8_t size=(uint8_t)(F.dPop());
  uint16_t y=(uint16_t)(F.dPop());
  uint16_t x=(uint16_t)(F.dPop());
  const char *str=(const char *)(F.dPop());
  F.dPush( wb_drawString(str, x, y, size, type) );
}
PRIMI( 0x810, 0, "\x0d" "wb_drawString", _wb_drawString, _wb_drawString );
#define LAST WORD( _wb_drawString ) 
/////////////////////////////////////////////////////////////////////////////////////////////////////////
// W811 wb_drawChar ( uniCode x y size type -- w ) at x,y draw char of given uniCode size type, return width
static void _wb_drawChar(){
  uint8_t type=(uint8_t)(F.dPop());
  uint8_t size=(uint8_t)(F.dPop());
  uint16_t y=(uint16_t)(F.dPop());
  uint16_t x=(uint16_t)(F.dPop());
  uint16_t uniCode=(uint16_t)(F.dPop());
  F.dPush( wb_drawChar(uniCode, x, y, size, type) );
}
PRIMI( 0x811, 0, "\x0b" "wb_drawChar", _wb_drawChar, _wb_drawChar );
#define LAST WORD( _wb_drawChar ) 
/////////////////////////////////////////////////////////////////////////////////////////////////////////
// W812 wb_color565 ( r g b -- color ) get color code of given r g b
static void _wb_color565(){
  uint8_t b=(uint8_t)(F.dPop());
  uint8_t g=(uint8_t)(F.dPop());
  uint8_t r=(uint8_t)(F.dPop());
  F.dPush( (long)wb_color565(r, g, b) );
}
PRIMI( 0x812, 0, "\x0b" "wb_color565", _wb_color565, _wb_color565 );
#define LAST WORD( _wb_color565 ) 
/////////////////////////////////////////////////////////////////////////////////////////////////////////
// W813 wb_init ( -- ) initialize graphics system
static int _wb_init_done = 0;
static void _wb_init(){ if( _wb_init_done ) return; _wb_init_done = 1; wb_init(1); }
PRIMI( 0x813, 0, "\x07" "wb_init", _wb_init, _wb_init );
#define LAST WORD( _wb_init ) 
/////////////////////////////////////////////////////////////////////////////////////////////////////////
// W814 wb_setPal8 ( i -- color ) set palette of i-th color
static void _wb_setPal8(){
  uint16_t i=(uint16_t)(F.dPop());
  uint8_t color=(uint8_t)(F.dPop());
  wb_setPal8(i, color);
}
PRIMI( 0x814, 0, "\x0a" "wb_setPal8", _wb_setPal8, _wb_setPal8 );
#define LAST WORD( _wb_setPal8 ) 
/////////////////////////////////////////////////////////////////////////////////////////////////////////
// W815 wb_blit8 ( -- )
const Word W_wb_blit8 = { LAST, 0x815, 0, "\x08" "wb_blit8", wb_blit8, (int)"wb_blit8" };
#define LAST WORD( _wb_blit8 ) 
/////////////////////////////////////////////////////////////////////////////////////////////////////////
// W816 wb_blit8 ( xs ys ws xd yd width height image -- )
static void _wb_blitBuf8(){
  uint8_t *image=(uint8_t *)(F.dPop());
  uint16_t height=(uint16_t)(F.dPop());
  uint16_t width=(uint16_t)(F.dPop());
  int yd=(int)(F.dPop());
  int xd=(int)(F.dPop());
  uint16_t ws=(uint16_t)(F.dPop());
  uint16_t ys=(uint16_t)(F.dPop());
  uint16_t xs=(uint16_t)(F.dPop());
  wb_blitBuf8(xs, ys, ws, xd, yd, width, height, image);
}
PRIMI( 0x816, 0, "\x0b" "wb_blitBuf8", _wb_blitBuf8, _wb_blitBuf8 );
#define LAST WORD( _wb_blitBuf8 ) 
/////////////////////////////////////////////////////////////////////////////////////////////////////////
// W817 wb_rot8 ( dx dy angle scale offx offy w h sprite -- )
static void _wb_rot8(){
  uint8_t *sprite=(uint8_t *)(F.dPop());
  uint8_t h=(uint8_t)(F.dPop());
  uint8_t w=(uint8_t)(F.dPop());
  uint16_t offy=(uint16_t)(F.dPop());
  uint16_t offx=(uint16_t)(F.dPop());
  double scale=(double)(F.dPop());
  double angle=(double)(F.dPop());
  uint16_t dy=(uint16_t)(F.dPop());
  uint16_t dx=(uint16_t)(F.dPop());
  wb_rot8(dx, dy, angle, scale, offx, offy, w, h, sprite);
}
PRIMI( 0x817, 0, "\x07" "wb_rot8", _wb_rot8, _wb_rot8 );
#define LAST WORD( _wb_rot8 ) 
/////////////////////////////////////////////////////////////////////////////////////////////////////////
// W818 wb_setBuf8 ( i d -- )
static void _wb_setBuf8(){
  uint8_t d=(uint8_t)(F.dPop());
  uint32_t i=(uint32_t)(F.dPop());
  wb_setBuf8(i, d);
}
PRIMI( 0x818, 0, "\x0a" "wb_setBuf8", _wb_setBuf8, _wb_setBuf8 );
#define LAST WORD( _wb_setBuf8 ) 
/////////////////////////////////////////////////////////////////////////////////////////////////////////
// W819 wb_initBuf8 ( -- )
const Word W_wb_initBuf8 = { LAST, 0x819, 0, "\x0b" "wb_initBuf8", wb_initBuf8, (int)"wb_initBuf8" };
#define LAST WORD( _wb_initBuf8 ) 
/////////////////////////////////////////////////////////////////////////////////////////////////////////
// W81a wb_clearBuf8 ( -- )
const Word W_wb_clearBuf8 = { LAST, 0x81a, 0, "\x0c" "wb_clearBuf8", wb_clearBuf8, (int)"wb_clearBuf8" };
#define LAST WORD( _wb_clearBuf8 ) 
/////////////////////////////////////////////////////////////////////////////////////////////////////////
// W81b wb_tickerInit ( us code -- )
static void _wb_tickerInit(){
  FuncP code=(FuncP)(F.dPop());
  uint32_t us=(uint32_t)(F.dPop());
  wb_tickerInit(us, code);
}
PRIMI( 0x81b, 0, "\x0d" "wb_tickerInit", _wb_tickerInit, _wb_tickerInit );
#define LAST WORD( _wb_tickerInit ) 
/////////////////////////////////////////////////////////////////////////////////////////////////////////
// W81c wb_tickerAlarm ( us -- )
static void _wb_tickerAlarm(){ uint32_t t=(uint32_t)(F.dPop()); wb_tickerAlarm(t); }
PRIMI( 0x81c, 0, "\x0e" "wb_tickerAlarm", _wb_tickerAlarm, _wb_tickerAlarm );
#define LAST WORD( _wb_tickerAlarm ) 
/////////////////////////////////////////////////////////////////////////////////////////////////////////
// W81d wb_tickerEnable ( -- )
const Word W_wb_tickerEnable = { LAST, 0x81d, 0, "\x0f" "wb_tickerEnable", wb_tickerEnable, (int)"wb_tickerEnable" };
#define LAST WORD( _wb_tickerEnable ) 
/////////////////////////////////////////////////////////////////////////////////////////////////////////
// W81e wb_tickerDisable ( -- )
const Word W_wb_tickerDisable = { LAST, 0x81e, 0, "\x10" "wb_tickerDisable", wb_tickerDisable, (int)"wb_tickerDisable" };
#define LAST WORD( _wb_tickerDisable ) 
/////////////////////////////////////////////////////////////////////////////////////////////////////////
// W81f wb_drawNString ( nStr x y size type -- ) at x,y draw string of given size type 
static void _wb_drawNString(){
  uint8_t type=(uint8_t)(F.dPop());
  uint8_t size=(uint8_t)(F.dPop());
  uint16_t y=(uint16_t)(F.dPop());
  uint16_t x=(uint16_t)(F.dPop());
  const char *nStr=(const char *)(F.dPop());
  F.dPush( wb_drawString(nStr+1, x, y, size, type) );
}
PRIMI( 0x81f, 0, "\x0e" "wb_drawNString", _wb_drawNString, _wb_drawNString );
#define LAST WORD( _wb_drawNString ) 
/////////////////////////////////////////////////////////////////////////////////////////////////////////
#define imgLIMIT 0x2800
/////////////////////////////////////////////////////////////////////////////////////////////////////////
// W820 img ( -- img ) 128x160 color image for testing
const uint32_t _img[imgLIMIT+1] = { 
  imgLIMIT,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe318e318,0xe318e318,0xe318e318, 
0xe318e318,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320, 
0xe320e320,0xe418e418,0xe420e418,0xe418e418,0xe418e418,0xe418e418,0xe318e418,0xe420e418, 
0xe420e420,0xe420e420,0xe320e418,0xc320e320,0xe428e428,0xe428e428,0x03290429,0xa6412431, 
0x4d7b8a62,0x93ac73a4,0xf5bcf5bc,0x97cd16c5,0x36bd57c5,0x35b556bd,0x77c536bd,0x52ac36c5, 
0x11ac32ac,0x6e9bafa3,0x0c930c93,0x2c932d9b,0x4c932c93,0xeb8a4d9b,0x0c8beb8a,0x6972eb82, 
0x6972286a,0x0b83ca7a,0x4d834d8b,0xf1936e83,0x907b1194,0xac62cd62,0xe749084a,0xa541885a, 
0x8539a539,0x85396439,0x64398539,0x64396439,0x64396439,0xc649c549,0x0752e649,0x69524852, 
0xaa5a8a5a,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe318e318,0xe318e318,0xe318e318, 
0xe318e318,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320, 
0xe320e320,0xe418e318,0xe318e418,0xe418e318,0xe420e420,0xe418e318,0xe318e418,0xe418e318, 
0xe318e418,0x0421e420,0xe420e420,0x24290429,0x04210421,0xe3202421,0x0431e320,0xcc7a8649, 
0x52acf1a3,0x36c5d4b4,0x57c556c5,0x77c5b8cd,0x77c536bd,0x77c577c5,0x36c515bd,0xd4c456cd, 
0x11ac93bc,0x8ea3f0ab,0x4d9b4d9b,0x8ea36ea3,0x0b934d9b,0xaa7aeb82,0x69726972,0x897a897a, 
0xaa7a897a,0x486a486a,0x496a486a,0xec728a6a,0x93a4d08b,0x118c949c,0x084aaf83,0x074a074a, 
0x8439a541,0x85396439,0x64398439,0x64396439,0x85416439,0xc6498541,0x2752064a,0x895a4852, 
0xaa5a8a5a,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe318e318,0xe318e318,0xe318e318, 
0xe318e318,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320, 
0xe320e320,0xe420e418,0xe318e420,0xe418e318,0xe318e418,0xe418e318,0xe420e420,0xe420e420, 
0xe420e420,0xe428e428,0x04290429,0xe320e420,0xe318e318,0xe320c318,0xcb72a641,0x53b4d09b, 
0x53b494bc,0x36c5f5bc,0x36c5f5bc,0x16b577c5,0xf9cd36b5,0x19d61ade,0x16bd36bd,0x52b4f5c4, 
0x11b452b4,0xd0ab31b4,0x6ea3afab,0x0c932d9b,0xcb8acb8a,0xaa8aaa8a,0xaa82aa8a,0x6872697a, 
0x486a486a,0x076a0762,0x07620762,0xc751e759,0xcb6a295a,0x949cd18b,0x2d73b083,0x0752aa62, 
0xa4416439,0x85398539,0x64396439,0x64396439,0x85416439,0xc649a541,0x2752074a,0x895a4852, 
0xaa5aaa5a,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe318e318,0xe318e318,0xe318e318, 
0xe318e318,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320, 
0xe320e320,0xe420e420,0xe418e418,0xe418e418,0xe418e418,0x04210421,0xe420e420,0xe420e420, 
0xe420e420,0xe420e428,0xe320e420,0xe420e320,0x0421e420,0xab728649,0xf1a38f93,0x53b432b4, 
0xd5bc74b4,0xb4b4d5bc,0x57c5d5b4,0xd9cdd8cd,0x97c5b8c5,0xfacdd9cd,0xfad5b9cd,0x77cd3ae6, 
0x93bcf5c4,0x10b4f0ab,0xcfab31b4,0x8ea36ea3,0x4d9b6d9b,0x2da30c9b,0xeb922c9b,0x697a8a82, 
0x28724872,0x286a286a,0x0762486a,0xa651c659,0xa649c651,0x6e7b2952,0x2e736f83,0x895a6e7b, 
0xc649c641,0x84396439,0x64396439,0x84396439,0x85418441,0xc649a541,0x2752074a,0x895a4852, 
0xaa5aaa5a,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe318e318,0xe318e318,0xe318e318, 
0xe318e318,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320, 
0xe320e320,0xe318e420,0xe418c318,0xe420e420,0x04210421,0xe420e420,0xe420e420,0xe420e420, 
0xe420e420,0xe320e428,0xe318e318,0xa3200321,0x2a6a0539,0x11accfa3,0xf1abd0ab,0xb5bc94c4, 
0xf5bc94b4,0x16c5f5bc,0x77c577cd,0xf9d577c5,0xf9d53ade,0x19de19d6,0xd4bcb8cd,0x31ac72b4, 
0x8a7a8f9b,0xe769697a,0x086ae769,0xc761076a,0xe769a661,0x276a0762,0xaa826972,0xaa82ca82, 
0x08726a82,0xe661076a,0xe661e661,0xe659e661,0x6441c651,0xe7496539,0x0d73ec72,0xcb622e73, 
0x074a8a62,0xa5418439,0xa541a541,0x84418441,0x64416441,0xc6498541,0x2752064a,0x895a4852, 
0xaa5aaa5a,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe318e318,0xe318e318,0xe318e318, 
0xe318e318,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320, 
0xe320e320,0xe318e418,0x0421e420,0xe4200421,0x0421e420,0xc318e318,0xe418e318,0xe420e420, 
0x0421e420,0xc3180421,0x0321e320,0xa7510431,0xd0abcb82,0xafa3f0ab,0x11b48fa3,0x12ac73bc, 
0x94b4f2a3,0x16c5f5bc,0x98cd98cd,0x77cd77c5,0x97d577cd,0x8e9b51b4,0xaa824d93,0x0872487a, 
0x487a287a,0x2872e769,0x076a2872,0x076ae761,0x6559c661,0x44496449,0x44494449,0xc6596551, 
0x496a2862,0xe7610762,0x85518551,0xe659e659,0xc651c651,0x24396441,0xcb628641,0xcc622d73, 
0x08520c73,0xc649c641,0xa541c649,0x64398541,0x64416439,0xc649a541,0x2752e649,0x695a4852, 
0xaa5a8a5a,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe318e318,0xe318e318,0xe318e318, 
0xe318e318,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320, 
0xe320e320,0xe420e420,0x04210421,0xe420e420,0xc318c320,0xe418e418,0xe420e418,0xe420e420, 
0xe420e420,0xe3200421,0x04310429,0x4d93e859,0x6ea3afab,0xafa38ea3,0x11acf0ab,0x52b432ac, 
0x36cdb4bc,0xf6bcf6bc,0x98cd56c5,0x73b456cd,0x0d8baf9b,0xeb922c93,0x2c9b0c9b,0x2c9b2c9b, 
0xaa8a0b9b,0x0b93cb92,0x897aca8a,0x28726872,0x076a4872,0xc661e761,0x8551a659,0x03392441, 
0x24390339,0xe7598651,0xa651e759,0x8549a551,0xc651a649,0x4439c651,0x65390331,0xeb6acb62, 
0x29520c73,0xc6490752,0xc649c641,0xc649e649,0xe649c649,0xe649c649,0x2752064a,0x69524852, 
0xca628a5a,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe318e318,0xe318e318,0xe318e318, 
0xe318e318,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320, 
0xe320e320,0x0421e420,0xe4200421,0xe420c318,0xe420e420,0xe318e418,0x0421e418,0xe4200421, 
0x0421e420,0xe4200419,0x496a2531,0xefabf0ab,0x2c9beb92,0xd0abf0b3,0x31acd0ab,0xf5c4b4bc, 
0x73b4b3bc,0x78cdf6bc,0x16c598cd,0x11ac32ac,0x93c4b3bc,0x6ea3f0b3,0xaeab6ea3,0x2c9b8eab, 
0xcc920c9b,0xaa8aeb9a,0x07720772,0xe7692872,0xc669e769,0x6559a661,0xa6598559,0x8651a659, 
0x24416549,0x24412441,0xa6516549,0x8549a651,0x86418549,0xa6498649,0x04292431,0x49528539, 
0xeb6aaa62,0xe749485a,0x2852c649,0x485a8962,0x485a2752,0xc649c649,0x4852064a,0x895a685a, 
0xca628a5a,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320, 
0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xc320e420,0xe420e420,0xe420e420, 
0x0421c320,0x04212429,0xe318e318,0xe318e318,0xe318e318,0x0421e418,0x0321e320,0xc420e418, 
0xe4180529,0x44390329,0xcea3686a,0x2c938da3,0x8ea36d9b,0x11b4f0ab,0x93bc11b4,0xd0a352b4, 
0xb4bc52b4,0x16c5d5bc,0xb4ac36c5,0xd8d577c5,0x37c5b8cd,0x11acf4c4,0x10b411b4,0xcb926da3, 
0x2c9bca92,0xca920c9b,0x2ca30b9b,0x487aca92,0xc661c669,0x8559a661,0x85598559,0x85516551, 
0x65498551,0x65414441,0x44394439,0x86414539,0x4539a649,0x85416539,0x2429a639,0x65392329, 
0x895a074a,0x495a485a,0x0652e649,0x6a5a485a,0x4752495a,0x8541c649,0x685a074a,0x695a4852, 
0xaa5aaa5a,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320, 
0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xc318e420,0xe420e420,0xe420c318, 
0x04210421,0xe3180421,0xe318c318,0xe318e318,0xe318e318,0xe318e420,0xc318e320,0x0521e420, 
0xe320c318,0xeb7a6541,0x2c9b0c93,0xaeab6da3,0x30b4efab,0x31b410b4,0x8fa3f0ab,0xb4bcf0ab, 
0x52b4d4c4,0xb4bcf1a3,0x36c577cd,0xb8d5b8cd,0x98d577cd,0xd5c456cd,0x11b493c4,0x0c9b4d9b, 
0x2ca34ca3,0xeb9a0b93,0x0b9b2ca3,0x8982aa92,0x4872487a,0xe769e769,0xc661e769,0xa659a659, 
0x65498551,0x24414441,0x24394439,0x24392431,0xa6496539,0x85394439,0x85398539,0x65316531, 
0xe7498539,0x08520752,0x475ae751,0xed720c73,0x6a62ac6a,0xaa62ca62,0xe649e749,0x48524852, 
0xeb628a5a,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320, 
0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xc318e420,0xe420e420,0xe420c318, 
0x04210429,0xc318e318,0xe318c318,0xe320e320,0xe318e318,0xe418e420,0xe420e320,0xe4182529, 
0xe751e320,0xaeab0c93,0x6da34da3,0x30b4cfab,0xcfabefab,0x8ea38ea3,0xcfa36e9b,0x11ac31b4, 
0xd0a3d0a3,0x52ac72b4,0x36c593b4,0x97cd77cd,0x16c598d5,0x74b437cd,0x93c412ac,0x11bc93cc, 
0xcfb310bc,0x6da38eab,0xca920b9b,0xaa8aaa8a,0x697a8982,0x0772287a,0xa661c769,0xa659a659, 
0xa659a659,0x65418649,0x44396541,0x03290431,0x65390331,0x65396539,0xc6414431,0xc641e749, 
0xc649a639,0xe751495a,0x485a0852,0x129ccb6a,0x6f83f293,0xaa62cb6a,0x2852695a,0x695a485a, 
0xca626952,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320, 
0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe420e420,0xe420e420,0x0421e420, 
0xe4200421,0xe318e318,0xe320e318,0xe320e320,0xe318e318,0xe4200419,0x0421c420,0x0319e318, 
0x0c930752,0x2ca38dab,0xaeab2ca3,0xaea3aeab,0x6d9b8ea3,0xcfab8ea3,0xf0abcfab,0xafa3afa3, 
0x72b472b4,0x52b410ac,0x15c5d4c4,0x15c5f5c4,0xb4bcb4b4,0x16c594b4,0x77dd77d5,0xcfb3b3c4, 
0x8eab8eab,0x0b9b2ca3,0xaa92aa92,0xaa8aca92,0x487a8982,0x28728982,0xe761e669,0xa651c761, 
0x65496549,0x65416549,0x65414541,0x44316539,0x03290429,0x65394539,0xe7492431,0x48522852, 
0x495a2852,0xaa6a6962,0x0752085a,0xb08b495a,0x74a4b5ac,0xab6a6e7b,0x495a8a62,0x8a622852, 
0xaa5aaa5a,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320, 
0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe420e420,0xe420e420,0x04210421, 
0xe420e420,0xe320e320,0xe320e420,0xe320e320,0xe320e320,0xe4200421,0xe318e420,0xc651e218, 
0x4dab2c93,0x2c9b4ca3,0x4da30c9b,0x6d9bceab,0x8ea3eb8a,0xaea3ceab,0x6e9bec8a,0xafa331b4, 
0xf0ab6d93,0x93bc72bc,0x36cd93bc,0xf0a3b3bc,0x57d552b4,0xb8ddb8dd,0xf0a3d4c4,0x51c4cfab, 
0x2ca30fbc,0xeb9aeb9a,0xcb92cb92,0x8982ca8a,0x487a487a,0xc661076a,0xa659a559,0x8551a659, 
0x65416549,0x65416549,0x45394439,0x65396541,0x24296539,0x45310429,0x284a6539,0x48522852, 
0x495a2852,0xab728a72,0x075a6a6a,0xd08b0c73,0x739cd5ac,0x4e83d093,0x6a62ab6a,0x695a495a, 
0xcb62aa62,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320, 
0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe420e420,0xe420c318,0x04210429, 
0xe420e420,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe420c320,0x0319e318,0x2c9b0752, 
0x4ca34dab,0x0b932b93,0x8da38da3,0x0b930b93,0x6d9b2c93,0x0c930b8b,0xafa3cfa3,0x6e9b0c93, 
0x92bc31b4,0x52bc31b4,0xf0a372b4,0xf5c4d0a3,0x57d577d5,0xb4bc56cd,0x31ac31ac,0x72c492c4, 
0x8eabefb3,0x0c9b2ca3,0x8a8aeb92,0x487a487a,0x2772287a,0xc661e669,0x44498559,0x65494449, 
0x44416541,0x65416541,0x65414539,0x24314539,0x44314531,0x24290429,0xc7412431,0x695a4852, 
0x8641e749,0x2d83eb7a,0x49624e83,0x1194cb6a,0xd4acb4a4,0x8f8bd093,0xcb6a2d83,0x695a8a62, 
0xcb62695a,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320, 
0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe420e420,0x0421c320,0xe4202529, 
0xe420e420,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0x2529e428,0xa6490421,0x2cab0b93, 
0x2c9bea9a,0x6ca32c93,0xca922ca3,0xca8aca8a,0xaa8aca8a,0xcfa34d9b,0xec8a8e9b,0x92c4afa3, 
0x30b451bc,0x8f9befab,0x31ac6f9b,0x56d515cd,0x94bcf5c4,0x56cd94b4,0xb3bc36cd,0x10b452b4, 
0xafabd0b3,0x2ca36dab,0xeb922c9b,0xeb92cb92,0x8882ca8a,0x076a2772,0xa559c661,0x65496549, 
0x44416541,0x03310331,0x86416541,0x24314539,0x24290429,0x24294431,0xc6412429,0xeb62aa62, 
0x2431e749,0xd5b4285a,0x6f83b5b4,0x4e7bcc72,0x329c4f83,0x8f8bf19b,0xec728e8b,0xaa628a62, 
0xaa628a5a,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320, 
0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe420e420,0x2529e420,0xe4202529, 
0xe420e420,0xe320e320,0xe320e320,0xe320e320,0xe320e420,0x04210421,0x69822539,0xa98aeb9a, 
0x4c9b2b93,0xca922c9b,0x0b9baa92,0x687ac98a,0xefab2c93,0xcb826d9b,0x10b4eb8a,0x72bcd3c4, 
0x2c93cfab,0x6e9b4d93,0x35cd93bc,0x93bcd4c4,0xd5bc73b4,0x57d598d5,0xd4c4b4bc,0x93c415cd, 
0x31bc52bc,0x2ca38eab,0xec922c9b,0xeb8aeb92,0x0672687a,0xc6692772,0xa659a561,0x65498551, 
0x44414549,0x24314439,0x8541a649,0x24312431,0x24290329,0xa6396539,0x4852c641,0x4c736d73, 
0x85392852,0x73a44539,0xb5ac17bd,0x329c52a4,0x8f8b4f83,0x8f8b2e83,0x2d7b8f8b,0xaa6acb6a, 
0xaa62aa62,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320, 
0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe420e420,0x4529e420,0xe420e420, 
0xe420c320,0xc4200321,0xe318e420,0x0219e218,0xe420e318,0x0331e318,0x6ca32772,0x898a888a, 
0x2c9b8dab,0xa992a992,0x89820b9b,0x2c93487a,0x0b8baea3,0x2c93897a,0x10b410b4,0xafa331b4, 
0x2c932c93,0xd3c411b4,0x31ac52b4,0xd4c452b4,0x36c536cd,0xd5b415bd,0x98d536c5,0x73bcb8dd, 
0x4ea34ea3,0xec924d9b,0xea92aa82,0xa98aea92,0x27728882,0xa559e669,0x84498551,0x64496449, 
0x44396441,0x65412439,0x6539a649,0x24310331,0x65312429,0xe741e749,0xca5a8952,0x8e7bef83, 
0xc7494952,0xec722439,0x95ac57c5,0xd5ac17b5,0x2e8353a4,0xd0934d83,0x4e836e8b,0x8a620c7b, 
0xcb6aaa62,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320, 
0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e318,0x2529e420,0xe320e420, 
0xe320e320,0xe420e318,0xe420e420,0xe318e320,0x04210321,0x496a0431,0x27828dab,0x2b9b6882, 
0xaa8aaa8a,0xa98aa992,0x277a477a,0x2c93a982,0x897a8982,0xefab8ea3,0xafabf0ab,0x8fa38fa3, 
0x72bc31b4,0x11b411b4,0x52b4f0ab,0x36cdf4cc,0x36c515c5,0xd8d556c5,0x53ac77cd,0x94bcf1a3, 
0x11ac32b4,0x52c472c4,0x4da3afb3,0x0b9b2ca3,0x6982ca8a,0xc661076a,0xe659c659,0x8651c759, 
0xa6496549,0xc6494539,0x2439e751,0x44312431,0x65316539,0xaa5ae741,0xca62cb62,0x4d73ae83, 
0x0852aa62,0x4962e749,0x54a452a4,0x16b5b5ac,0xb093b4ac,0x6e8b6e83,0x4d83af93,0xeb72ec7a, 
0xaa628a62,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320, 
0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e318,0x24290421,0xe320e420, 
0xe320e320,0x0421e418,0xc4200421,0x2529e420,0x03212429,0xceabe761,0xe679688a,0xca8aea92, 
0xa98aa98a,0x277a6882,0x8882477a,0x697aea8a,0xcea3ca8a,0xefabcfab,0x8fa3afab,0x51bccfab, 
0xf0b351bc,0xf0abafab,0x52b493bc,0x93bc11ac,0x77d535cd,0x15c555cd,0x73acd4bc,0xd5c453ac, 
0x36cdd5c4,0xd4cc15d5,0x2d9b10b4,0x28728a82,0x6551c661,0x65496549,0x44398541,0x04310331, 
0x04290431,0x285a2431,0x0331e749,0x6539a641,0xe7498639,0x0c6be741,0xeb62eb6a,0xeb728d83, 
0xe751aa6a,0xab728a6a,0x12a40d83,0x94ac73ac,0x12a453a4,0xec7a6e83,0x4d83af93,0xeb72ab72, 
0x495a8a62,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320, 
0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e318,0x04292529,0xe320e420, 
0xe320e320,0xe320e318,0x04212429,0xe5200521,0xa549c328,0xea92ceab,0xa992e679,0x6882ca92, 
0x277a477a,0x4882277a,0xa982a98a,0x0b93277a,0x8da3ceab,0xaea36da3,0xcfab2d9b,0xf0b311bc, 
0x10b4d0ab,0x52bc31bc,0x8f9b31b4,0x93bc32b4,0xd4bc93bc,0xb4bcb4c4,0xf5b4d5b4,0x77cd77c5, 
0x93c415cd,0x2d9351bc,0x48728a7a,0x8551c661,0x24414449,0x24394441,0x03312331,0x24310431, 
0x03210329,0x695a2439,0x2439a549,0x8541e751,0x8a62c749,0x0b6b485a,0x89628962,0x8a6a0c7b, 
0x696aaa72,0x6e8b6a6a,0x6e8bec7a,0x119cf09b,0xd19bf19b,0xab72af93,0x8e8b0d83,0xcb72ec72, 
0x69620b73,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320, 
0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e318,0x24294529,0xe320e320, 
0xe420e320,0xe4200421,0x0421e320,0xc320e418,0x8da3a651,0xc5710a93,0xa98aa88a,0x487a6882, 
0xe671e671,0xa98a477a,0xe6716882,0x8da3a98a,0x6da34c9b,0xec926ea3,0xcfb38ea3,0x11bc6ea3, 
0xf0ab31b4,0xec928fa3,0x93bcafa3,0xf0a393bc,0x52ac11ac,0xf6c494bc,0x77c556c5,0x77d5d8d5, 
0xf0b3f4cc,0x69826da3,0xaa826982,0x286a697a,0xe7590762,0x8549c759,0x44414441,0x04396549, 
0xc749e330,0x285ac649,0xa6496541,0xc649e651,0xaa6a485a,0xaa628962,0x69626962,0x696acb72, 
0xeb7a6972,0xb093ac7a,0xcc7a2d83,0xd09b8f93,0xb093b093,0x0d8352a4,0x4d838b6a,0x8a6a0c7b, 
0x485aaa6a,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320, 
0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e318,0x45296531,0xe420e320, 
0xe420e320,0xe320e420,0xe320e320,0x8541c318,0x0b9bea82,0xa98ae671,0x8882a882,0x07726882, 
0x6782277a,0x077a6882,0xa98ae671,0xca8a4c9b,0xaeab6da3,0x8eab4da3,0xefb3cfab,0x6ea3afab, 
0x0c932c93,0xf0abafab,0x31b431b4,0xafa3d0ab,0x73b432ac,0xf9ddf5bc,0x36c5d9dd,0xcfa352b4, 
0xca8a4d9b,0x487a6982,0x076a4872,0x8551c659,0xa5518549,0x44416549,0x44394439,0x24392439, 
0xc6498541,0x075ac649,0x075a8549,0x4862075a,0x6962896a,0x896a896a,0x8a728a72,0xaa7acb7a, 
0x8e9bab7a,0x72acf1a3,0xab724e83,0x8f93d09b,0x90934e8b,0x6f8b52ac,0xcc7a8b6a,0x696a0c7b, 
0xaa6a6962,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320, 
0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0x86318631,0x0421c320, 
0xe420e320,0xe420e320,0xe3200419,0xa97a2439,0x477a6ba3,0xa98a4882,0x67826782,0x277a0672, 
0xa88a477a,0xc671277a,0x2b9b6882,0x4ca30b9b,0x2c9b0c9b,0x10bc8ea3,0x2c9b10bc,0x0c930b93, 
0xafa32d9b,0x8ea34d9b,0xafa36e9b,0xd0abd0ab,0x35cd52b4,0xf5bc36c5,0xf1a332ac,0xafa3d0a3, 
0x487acb8a,0x6872687a,0xc659276a,0xa549a551,0x43398541,0x23312331,0x44312331,0xa6414439, 
0x0329e741,0x075a6549,0x4862e759,0x896a696a,0x4962896a,0x8972486a,0x0c83aa7a,0x8e9bcfa3, 
0xd0a32d8b,0xb4bcf1a3,0xac72b093,0x8f938f93,0x4e834f8b,0x8f93b093,0x6a6acc7a,0x696aab72, 
0xaa722862,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320, 
0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xa6398631,0x0421c320, 
0xe318e320,0x0419e320,0x24292419,0xea9a286a,0x67724782,0x48828a92,0x467a477a,0x277a277a, 
0x477a8982,0x277ae671,0x6ca3c992,0x898a2ca3,0x2da3eb9a,0x6da30c9b,0xca92eb92,0x6da36da3, 
0x0c934d9b,0x4d9b4e9b,0xf0ab6e9b,0xf1abf0ab,0xaf9bb0a3,0xd0a331ac,0xaf9bd0a3,0xafa311ac, 
0xeb920b93,0x07726982,0x8659c661,0xa6516551,0x6549c651,0x65414541,0x44390431,0x25396641, 
0xe3280431,0x2862c651,0x696a896a,0x28622862,0x896aaa72,0xaa7a8972,0x0c8b6a72,0xf1ab52b4, 
0x8f9b4e93,0xb0932e8b,0x2e83119c,0x909b2e8b,0x2e834f8b,0x8f934e8b,0x6a620d7b,0xcb728a6a, 
0x896aaa6a,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320, 
0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe3200421,0x66392531,0xe320e320, 
0x2429e320,0x04190529,0xe6610329,0x477aea92,0x8992687a,0x88826882,0x477a6882,0x68824782, 
0x077a477a,0x898ae671,0x0a9b8dab,0x898aa569,0x0b9b2ca3,0xeb9a4ca3,0x8dab2c9b,0xaa8a0c9b, 
0x8eab0c93,0xd0a351b4,0x32b4f0ab,0x8f9bb0a3,0x4e9b2d93,0x32b411ac,0x31b452b4,0xeb8aaea3, 
0x076a4872,0xc659e661,0xa5518559,0x85498551,0x8549a551,0x2439a649,0x24392439,0x44394439, 
0x85410331,0x696aca72,0xa972eb82,0x27622762,0xcb820c83,0xcfa3ea7a,0xab7a4e93,0xcfa3af9b, 
0x2d8b8f9b,0x6e936e93,0x0e838f93,0x8f93ed82,0x2d838f93,0x0d7bb093,0xec72ec7a,0x6a6a6962, 
0x696a8a6a,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320, 
0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e318,0x45312531,0x0421c318, 
0x45314529,0xe320e420,0xa982a541,0x8882c992,0x2782477a,0x6882277a,0x277a277a,0x277a477a, 
0x277a277a,0x2b9ba992,0xc671a98a,0x8dabca92,0xca924ca3,0x6dabaa8a,0xca926da3,0x4da3ca92, 
0x4c9baeab,0x51b4aea3,0xab824d93,0x11ac2d8b,0x15c593bc,0x8f9b11ac,0x4d9bd0a3,0x0772697a, 
0xa561e661,0xc661c661,0xc659c659,0x8549a659,0x85498549,0x24396541,0x44394439,0x44392439, 
0x28528541,0xab720b7b,0xca7a0c83,0x48624762,0x0c8b0c83,0xf0a3486a,0xd09b72b4,0x10acf09b, 
0x2e8b8f9b,0x31acec82,0xcc7a11a4,0xd09b2e83,0x8f93b093,0x8f8b6f8b,0x6a62cc72,0x29624962, 
0x2862085a,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320, 
0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe420e420,0x45310429,0x2421e420, 
0xe4204529,0x2431e318,0xea8a6972,0x67826782,0x077a477a,0x277a4882,0x4782e671,0x077a888a, 
0x6882277a,0x4782ea92,0xea9aa571,0x4ca3eeb3,0x48826882,0x2c9b4c9b,0xaa92287a,0x4ca3aeb3, 
0x2c9b0b93,0xaa82ca82,0x4e93cb82,0x94b4f1a3,0x53acb4b4,0x8e9baf9b,0x2d934d93,0x28728a82, 
0x27724872,0x276a276a,0x276a276a,0xa5510762,0x44416449,0x24392439,0x64394439,0x85416541, 
0xaa6ae751,0x2d838d8b,0x89726e93,0xca72886a,0x2d8b496a,0x2d8baa72,0xd4bc32ac,0x11ac93b4, 
0xb09b6f93,0x11acec82,0xec7aaf9b,0xb0932e83,0x4e8b6f8b,0x8f8b4e8b,0x8a6aec7a,0xe8592962, 
0xe7592862,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320, 
0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe420e420,0x4531c420,0x04214529, 
0xe320e318,0xa6516431,0x88828982,0x2672467a,0x47824782,0xe679067a,0x4782267a,0xe671277a, 
0xea9a2782,0x067aea92,0xadabca92,0x2782ca92,0x8dab277a,0xe771ca8a,0xaeb3eb92,0x4ca36dab, 
0x497aaa8a,0xaa82897a,0xd0a34d93,0x73b411ac,0x32a494b4,0x51b472bc,0x4d938e9b,0x697aeb8a, 
0xa982ca82,0x276a687a,0xa559c661,0x64498549,0x85498449,0x64418541,0x65416541,0x0752c649, 
0x2b7b485a,0xaf93ce93,0x896a31a4,0x2c838972,0x6e936a72,0xf0a3af93,0xf5bcf1a3,0x32acb4b4, 
0x11a453b4,0x4e8bec82,0x2d834e8b,0x6e8b0d83,0x4e8b2d83,0x2e834e83,0x0c7b0d7b,0xc7514962, 
0x496a4962,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320, 
0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe420e420,0x4531e420,0xe3184529, 
0x4531e320,0x0762c541,0x68824882,0xe571677a,0x277a277a,0x277aa571,0xe671277a,0x4782e571, 
0x0b9bea92,0xa98aa992,0xa98a2ba3,0x6882c671,0xca926ca3,0x2b9b277a,0x2ca38dab,0x8a8aaa8a, 
0x697a8982,0x4d932c93,0x31b40d93,0x52b4d4c4,0x52b493bc,0xafa3f0a3,0x2c938e9b,0x697aaa82, 
0x4772697a,0xe661076a,0x07620762,0xe659e659,0x275a275a,0xe651c651,0x075ae651,0xaa6a6862, 
0x2c83eb72,0xf09b8e93,0x0c7b93b4,0x8f93eb7a,0x6e8bd09b,0xaf9bd09b,0x93ac2e8b,0xd1a3b4b4, 
0x11a494bc,0x8f936f93,0x2e8b8f93,0x6f8b0d7b,0x2e83ed7a,0x2e836f8b,0x0c7b0d7b,0xc7518a6a, 
0x496ae759,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320, 
0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe4200421,0x2429e428,0xe3200421, 
0x65390429,0x4872c551,0x8882277a,0x267a4772,0xe671067a,0x4782067a,0x267ae571,0xc992888a, 
0x4782ea9a,0xea9a2782,0xe679898a,0x2b9b688a,0x688ac992,0x2c9b6ca3,0xca922c9b,0x487a287a, 
0xeb8aaa82,0xf0ab0c8b,0xb3c431b4,0xf0ab72bc,0x4e9bf0ab,0x4d930c8b,0x4c936d93,0x0b8b0c8b, 
0x0b8b0b8b,0xa97aea82,0x8972897a,0x896a686a,0x6862896a,0x686a075a,0xea72896a,0x2c83eb7a, 
0xeb7a8d93,0x31a46e8b,0xec7ab4b4,0xaf9bab72,0xf09b73b4,0x6f93d093,0xb0938f93,0xd1a332a4, 
0x6e93f1a3,0xaf9b11ac,0xcc7a6e93,0xaf93cb72,0x2d7b2d83,0x4e838f8b,0xcb720d7b,0x085aaa6a, 
0xc7598649,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320, 
0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e420,0x0429e320,0x24294429, 
0x86414431,0x687ae661,0x4772477a,0x477a0672,0x0672e679,0x47824782,0x888a267a,0x688ac992, 
0xe671277a,0x898ac992,0x888ac571,0xea9aea92,0x4ca30a9b,0xca92ea9a,0x0772277a,0x8982897a, 
0x2c9bca8a,0x31b4cfab,0x8e9bf0ab,0x4d932d93,0x6e9b2d93,0x30acefa3,0xefab10ac,0xcea30fac, 
0x8d9b8d9b,0xca822b8b,0x8972a972,0xea7aa97a,0xa972ca7a,0x0b7bca7a,0x6d8b2c83,0x8d936d8b, 
0x2c8bae9b,0x73ac0c83,0x8f8bf5bc,0x8f9bec82,0xf09bf19b,0x6e93f09b,0x4e8bf0a3,0xd1a332a4, 
0x6e938f9b,0x4e8bf1a3,0xab726e8b,0x2d836a6a,0xec7a0d83,0x4e832e83,0x8a6a0d7b,0x2962aa6a, 
0x8651a651,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320, 
0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0x65316531, 
0xa6492439,0x477a6882,0xe5692672,0x4782477a,0x487aa571,0x277a4782,0x6882888a,0x6882888a, 
0x6882c671,0xc5716882,0xca926882,0xc992c992,0xea9aea9a,0xc671698a,0xea8a487a,0x6d9b2c93, 
0x8dab6da3,0x0c93aea3,0x4d93ab8a,0x51b48e9b,0x96d5d3bc,0xb2bc76d5,0x51b4d3bc,0x30ac10ac, 
0x4c938d9b,0x4b8b4c8b,0xea7a0b83,0x8c932b8b,0x8d8b6c8b,0x8d938d93,0xef9bee9b,0xefa310a4, 
0xae9b4d93,0xd4bc6e8b,0x52a4d4b4,0xd09b8e93,0xaf8bd19b,0x0d83af93,0x4e8b2d8b,0xb09bf5bc, 
0x4d8b8f9b,0x4e8b4e8b,0xcb7a6e8b,0x0c7b8a72,0x8b6acc72,0x8f8b0d83,0x4a622d7b,0x085a8a6a, 
0x86518649,0xe318e318,0xe318e318,0xe318e318,0xe318e318,0xe418e418,0xe418e418,0xe418e418, 
0xe418e418,0xe318e318,0xe318e318,0xe318e318,0x0421e320,0xe3180421,0xe3202429,0x86414529, 
0x47722341,0x47722772,0x2772066a,0x84612772,0x6882277a,0x067a4782,0x888a277a,0xe679688a, 
0x4782277a,0x8992e779,0xa992ea9a,0x2ba3c992,0x688a0a9b,0x277ae669,0x0b9baa8a,0xa98a0b9b, 
0xca8a8882,0x0c8bea8a,0x36c510a4,0xbbee19de,0xb6cd7ae6,0x55c576cd,0xb2bc14c5,0x30ac51b4, 
0xae9b0fa4,0xaea3aea3,0xae9bcfa3,0x51ac0fa4,0x71b451ac,0x71ac71ac,0x71ac92b4,0x50ac92b4, 
0x8e9bae9b,0x72b4f09b,0xb09bb09b,0x93ac32a4,0x2e8bf19b,0xab7a4e8b,0xf09b2d8b,0x4e8bb3bc, 
0x4e93f0a3,0x2d8b4a72,0xab72f0a3,0xab720962,0x6a6aec7a,0x2d7bcb72,0x6a624e83,0x8a6a8a6a, 
0x85496549,0xe318e318,0xe318e318,0xe318e318,0xe318e318,0xe418e418,0xe418e418,0xe418e418, 
0xe418e418,0xe318e318,0xe318e318,0xe318c318,0x25290421,0x24290421,0xc320e320,0x075a6539, 
0x487a076a,0x2772066a,0x88820672,0xe671a561,0x2782277a,0x47824782,0x888a6882,0x4782e671, 
0x4782688a,0xea9a688a,0x2ba3ea92,0xa98a4ba3,0x067a277a,0xc98a8882,0x277aa98a,0x8a8a4882, 
0xefb30c93,0xf7d534c5,0xfce6bbe6,0x38d6dbde,0x54c596c5,0xd3bcf3c4,0x71b4b2bc,0x30ac10ac, 
0x30ac50b4,0xb2bc51b4,0x14c5f3c4,0x14c514c5,0x55cd34c5,0x13c555c5,0x14c5f3c4,0xcf9b71b4, 
0xefa330ac,0x31ac10a4,0x0d83d0a3,0xb4b4d09b,0xcc82f19b,0x0d8b6e93,0x6e8b2d83,0x2d8b11a4, 
0x0d8b4e93,0xcb82086a,0xab72af9b,0x2962a751,0x8a6a0c7b,0xab6a8a6a,0x8b6a0d7b,0x696a4962, 
0x8549c751,0xe318e318,0xe318e318,0xe318e318,0xe318e318,0xe418e418,0xe418e418,0xe418e418, 
0xe418e418,0xe318e318,0xe318e318,0x0421e320,0x04210421,0x0421e420,0x4531e420,0x486ac751, 
0x07724872,0x066a066a,0x2772677a,0x477a8461,0x077a067a,0x4782277a,0x0672a98a,0x888a0672, 
0x47822782,0xc992a992,0x0a932b9b,0xc569477a,0xc992267a,0x4782a88a,0x8982277a,0xb3c48da3, 
0xd7dd76d5,0xbbee59de,0x39debbee,0x55c5d7d5,0xf3c4f2bc,0x71bcb2c4,0xefab30b4,0x10accfa3, 
0xf3c4b2b4,0x75cd75cd,0xf7d596cd,0xf7d518de,0xb6d5f7dd,0x54cd75cd,0x13c555cd,0xefa330ac, 
0xefa351b4,0x72b472ac,0xab7acfa3,0x52acd09b,0xcc826e93,0x4e8b0d8b,0x4e8b8f93,0xec82d09b, 
0x6e938f93,0x296a086a,0xcb7a0c83,0xc759a751,0x696aec7a,0x8a6a6962,0xcc722d7b,0x085a285a, 
0x6549e759,0xe318e318,0xe318e318,0xe318e318,0xe318e318,0xe418e418,0xe418e418,0xe418e418, 
0xe418e418,0xe318e320,0xe318e318,0x0421e420,0xe3200421,0xe418c320,0x24310521,0x4772a651, 
0xe669c669,0x066a066a,0x84612772,0x477ae671,0x477a277a,0x888a2782,0xe671277a,0x277a6882, 
0x688a2782,0x0a9bc992,0xc569c98a,0x477aa461,0xa88a888a,0x688a2782,0xd2c46ca3,0x17ded6dd, 
0x17d6d7d5,0xb7d518de,0xf4cc55cd,0xf3ccf3cc,0x71b4b2c4,0x91bc92bc,0x92b471b4,0x76cdf3bc, 
0x59e618de,0x39de9ae6,0x79e638d6,0x59e699e6,0x96cd18de,0x75cd75cd,0xb2bc34c5,0x10ac10ac, 
0xae9bb2bc,0x30ac31ac,0xcb7a2c8b,0xd09baf93,0x2d8b6e93,0xcf9b2d8b,0x0d834d8b,0xcb7a11a4, 
0x8f9b4e93,0x086aab7a,0x0c83ab7a,0xc651085a,0x4862aa72,0x6a6ae751,0xcc72ec7a,0xe7594962, 
0xa649e751,0xe318e318,0xe318e318,0xe318e318,0xe318e318,0xe418e418,0xe418e418,0xe418e418, 
0xe418e418,0xe318c318,0xe318e320,0xe320e318,0x0421e420,0x04210321,0x24312529,0x887ae659, 
0x076ae669,0x4772276a,0xe671c569,0x277a277a,0x277a277a,0x077a2782,0x6882e671,0x477a477a, 
0xea9a888a,0xa98a2b9b,0xc569c571,0x6882277a,0x067a6882,0x50bc0b93,0x37eed6e5,0xd6d5d6d5, 
0x17d617d6,0x34cd55d5,0x13c534c5,0xf3c4f2c4,0xb2c4d3c4,0x14c5d3bc,0xf8d575cd,0xdcee7ae6, 
0xfbe61cef,0x79de9ae6,0x9ae6bae6,0x38de59de,0xb6d5d7d5,0x34c5b6d5,0xd2bc14c5,0x51b430ac, 
0x8e9b92bc,0xcfa310ac,0x2c83eb82,0x8f9b6e93,0x2d8bd09b,0xcf9b6e8b,0x0d83ec7a,0xec82af9b, 
0x6e932d8b,0x086a0c8b,0xcb7a696a,0xa651075a,0x49624962,0x8a6ae759,0xab72ab72,0xc6512962, 
0x8549a649,0xe318e318,0xe318e318,0xe318e318,0xe318e318,0xe418e418,0xe418e418,0xe418e418, 
0xe418e418,0xe318e318,0xe318e318,0xe318e318,0xe320e320,0x04210421,0x6541e328,0x8872476a, 
0xe661c561,0xa5596872,0x88820672,0x067a067a,0x277a0672,0xa569277a,0x6882477a,0x688a277a, 
0x0a9ba98a,0xc669a98a,0x4782c569,0x0672277a,0x0fbcea92,0x38ee95d5,0x74cd17e6,0xb5dd95d5, 
0x13c534cd,0x34d514d5,0xf3c434d5,0x14c5d3c4,0x96d555cd,0x9ae638d6,0x1defdbe6,0x3def3def, 
0xdbde3de7,0x9ae69ae6,0x9ae6dbe6,0x38de59de,0xf7ddf7d5,0x14c596d5,0xf3c455cd,0xb2bcb2bc, 
0xefa351b4,0x6d93d0ab,0x0b83aa7a,0x2d8b0c8b,0xcb7a2d8b,0xec82ec7a,0xec82ec82,0xcb7aec82, 
0x2d8b2d8b,0x086aec82,0x496ae761,0xc651075a,0x48622862,0x2962075a,0x8a6a6a62,0xe751085a, 
0xa649c651,0xe318e318,0xe318e318,0xe318e318,0xe318e318,0xe418e418,0xe418e418,0xe418e418, 
0xe418e418,0xe318e320,0xe318e318,0xe320e320,0xe320e320,0x04292421,0xe6612439,0x076a4872, 
0x066ac561,0x2349e661,0x6882687a,0x067a277a,0x277a267a,0xe671c569,0x067a067a,0x898a4882, 
0x88820a9b,0xc669a561,0x06722772,0x4b9b6782,0xf6ed90c4,0x95d517de,0x54d554cd,0xf3cc34d5, 
0x75d5f3cc,0x95d575cd,0xb7ddb6dd,0x19e6d7dd,0xbbee5ae6,0x5df71cef,0x5def3def,0x3def5def, 
0xfbe63cef,0xbbe6dbee,0x79de9ae6,0x38de79e6,0xf7ddf7d5,0xb6d596d5,0x13c554cd,0xb2bc13cd, 
0x30ac71b4,0x2c936e9b,0x0b83ca7a,0xcc822c8b,0xec7aab7a,0x0c838a72,0x8b7aec82,0xec824d93, 
0xec82ec82,0x6a720d8b,0x2862a659,0xc6514862,0x2862075a,0xe8592862,0x6a6a4962,0xc651e751, 
0xc651c651,0xe318e318,0xe318e318,0xe320e318,0xe318e318,0xe418e418,0xe418e418,0xe418e418, 
0xe418e418,0xe318e318,0xe318e318,0xe318c318,0x24290421,0x0431e420,0x4772c551,0xc661076a, 
0x477ae669,0x84596451,0x0772687a,0xe671067a,0x0672477a,0x477ac569,0x688a2782,0x0a9b888a, 
0x4359c98a,0x06628551,0x477a266a,0xb0c42a93,0x33cd74dd,0xb2c4f2c4,0x14d5f3cc,0x35d514d5, 
0xb6d595d5,0x38d6f7d5,0x3ce7dbe6,0x5def3de7,0x3cef3def,0x3def3def,0x3def1ce7,0x1cef3def, 
0xbae6fbee,0xbbee9ae6,0x79e659de,0x18de9ae6,0x17def7d5,0x95d5f7dd,0x54cd75d5,0xb2bc13cd, 
0x10ac51b4,0x4d932d93,0x2c830b83,0x4a720c8b,0xcb7aab7a,0x2d8b496a,0xcb7aab7a,0x2d8b4d93, 
0xec82ec82,0x8a7a4e93,0x48628651,0x8549696a,0x4962e759,0xc751e759,0x6a622962,0xa649a651, 
0xa6498549,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe318e318,0xe318e318,0xe318e318, 
0xe318e318,0xe3200421,0x0421e320,0xc420e418,0x25210421,0xa549e220,0xe6690762,0xc661e669, 
0xc5614772,0x27724349,0xe679067a,0x06720672,0x85612772,0x2772066a,0xa99a2782,0xc98ae99a, 
0x24416451,0x0762c659,0x0a8b6872,0xb1cc0eb4,0x0ebc4fc4,0xb1d44fc4,0x55d533d5,0x39deb7d5, 
0xbae69ae6,0x3def1ce7,0x5def3def,0x7def5def,0x5def7def,0x3def3def,0x3cef3def,0xfcee1cef, 
0x9ae6dbee,0x79e6bae6,0x79e679e6,0x38de38de,0x17de79e6,0x95d5f7dd,0x95d575cd,0xb2bc34cd, 
0x6d9351b4,0x6e9b4d93,0xcb822d93,0xaa7a0c83,0x8a726972,0xcb7a496a,0xec82496a,0x6a72af9b, 
0x0c838a72,0x8a7a2d8b,0x08628651,0x86512862,0x2862c659,0x8649c751,0xcb724962,0x8649e751, 
0x65418549,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe318e318,0xe318e318,0xe318e318, 
0xe318e318,0xe320e418,0xe3180321,0x0529e418,0xe3182529,0xe7592339,0x8559e761,0xe661e661, 
0x23490762,0x687a8459,0x277ae671,0x066a0672,0xc661a561,0x277a4772,0x0a9ba992,0xa559c98a, 
0x45410339,0x276ac661,0x4c93aa7a,0x0fb4ada3,0x70c42fb4,0xb6dd53cd,0x99e638e6,0x3ceffbee, 
0x9ef77def,0x7ef77eef,0x7eef7ef7,0x7ef77def,0x7df77df7,0x5def5df7,0x1cef3def,0xdbe61cef, 
0x9ae6bae6,0x79e69ae6,0x79e679e6,0x58de38de,0x38de79e6,0x95d5d6d5,0x96d595d5,0xf3c434cd, 
0xae9b71b4,0xcfa36d93,0x8a7a4d93,0x0c8bec82,0x8a72aa7a,0x696ae761,0xec826a72,0xab7a4e93, 
0xec82496a,0x8a720c8b,0x075aa659,0xc651486a,0x08628651,0xa751e759,0x8a6a8a6a,0x8549c751, 
0x4441a649,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe318e318,0xe318e318,0xe318e318, 
0xe318e318,0xe318e420,0xe3180319,0x2521e420,0xe3200421,0x276aa551,0xa559a559,0x0662e661, 
0x44498451,0x06720772,0xe6690672,0xe561066a,0x27726459,0xea9a477a,0x88824bab,0x2539a651, 
0x45414539,0x896aa651,0xb2b4ce93,0x13c5f3bc,0x58ee95d5,0xdaee99e6,0x7df73cef,0x9eef9ef7, 
0x9eef7eef,0x9ef79ef7,0x7def7ef7,0x7df77df7,0x5def5df7,0x3cef3def,0x1cef3cef,0xdbeefbee, 
0xbae6bae6,0x79e69ae6,0x59de99e6,0x79e658de,0x17de59e6,0xd6d5d6dd,0xb6d5b6d5,0xf3c434cd, 
0x8d9b71b4,0x6d938e9b,0xcb820c8b,0x0c8bcb82,0x8a72aa7a,0x696ac759,0xab7a8a72,0x2d8bcc82, 
0x69726a72,0x8a726d93,0xc651a651,0x28622862,0xa651a651,0xc651c751,0x49626a6a,0x4441a751, 
0x4441a649,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe318e318,0xe318e318,0xe318e318, 
0xe318e318,0x0319e418,0xe320e318,0x04192521,0x4441c218,0xc661e761,0xe6618559,0xa551e659, 
0xe6612349,0x06722772,0xe669c569,0x8459e669,0x477ae669,0x0a9b888a,0xc5618882,0x04310339, 
0xe7516541,0xad8bca6a,0xb6c5b2ac,0xdae679e6,0xdae6bae6,0x1cef1bef,0x7ef73def,0x7ef79ef7, 
0x7ef77eef,0x7eef9ef7,0x7df77def,0x7df77df7,0x3def5def,0x3cef3cef,0x1bef1cef,0xbae6fbe6, 
0x9ae6bae6,0x79e69ae6,0x59de99e6,0x79e658de,0x17de38de,0xf7ddf7d5,0x95d5d6d5,0x14cd34cd, 
0x4d9b51b4,0x6d936d9b,0xeb82eb8a,0xcb820c8b,0xab7a286a,0xcb7ac759,0xab7aec82,0xec828b7a, 
0x496aec82,0xaa728e93,0xa651a651,0x696aa651,0x6549e759,0xa651c651,0x8a6a4962,0x2439c751, 
0x8549a649,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe318e318,0xe318e318,0xe318e318, 
0xe318e318,0xe418e418,0xe428e420,0xe3182421,0xe7610329,0x85510662,0xe659c659,0x2349e659, 
0x28728559,0xe669e671,0x066ac561,0xc561a459,0x677a2772,0x89820a9b,0xc6598559,0x06622762, 
0xca72065a,0x6d83eb72,0xb2ac0f94,0x79de96c5,0xfbe6fbe6,0x1cef1cef,0x3def1cef,0x5df75df7, 
0x7df77df7,0x5def7def,0x7df75def,0x5df77df7,0x3def5def,0x3cef5cef,0xfbe61cef,0xbae6bae6, 
0xbae6bae6,0x79e69ae6,0x59de79e6,0x59e658de,0x17de18de,0x17def7dd,0x75cdd6dd,0x14cd34cd, 
0x6d9b71bc,0x4c934c93,0xcb82cb82,0xcb820c8b,0xaa7a296a,0xcb7a0762,0xcb820c83,0xab7a0c8b, 
0xaa7acb7a,0xcb7a4d8b,0x075ae759,0x075a6549,0x2441c651,0xa651a651,0xaa720862,0x2439e751, 
0x85496541,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe318e318,0xe318e318,0xe318e318, 
0xe318e318,0xc3180419,0x0429e428,0x0319e318,0x076a8541,0x0662e659,0xa5590662,0x44516451, 
0xe6712772,0xe669e669,0x8459276a,0x06726459,0xe98a477a,0xc661a98a,0x286ac659,0x0a8bc97a, 
0xad8bcd9b,0x8a72eb7a,0xef9b0b7b,0x75c5b2b4,0xfbf659de,0x1beffbe6,0x1cef1cef,0x3cef3cef, 
0x5df75cf7,0x5def5def,0x5def5def,0x5df77df7,0x5def5def,0x3cef5cef,0xfbee1cef,0xbae6dbe6, 
0xdae6dbee,0x99e6baee,0x79e679e6,0x58de79e6,0xf7d518de,0x17def7d5,0x55cdf7dd,0x13cd34cd, 
0x8e9bb2c4,0x0b8b6d9b,0xcb82aa7a,0xeb820c8b,0x296a4972,0xaa7a286a,0xcb7aeb82,0xcb826e93, 
0xcb7a8a72,0xeb7acb7a,0x075ac659,0xc651a551,0x4549a651,0xc659c659,0x4862c759,0x2439a649, 
0x44412439,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe318e318,0xe318e318,0xe318e318, 
0xe318e318,0xe420e420,0x04210421,0x2439c318,0x0662075a,0x276ae661,0x8559c661,0xe6614349, 
0xc569066a,0x066ae569,0x6451c559,0x477ae669,0xc98ac98a,0x6451a561,0x8972276a,0x0facca82, 
0xd5cdd6d5,0x8d8bf2bc,0x2c83ca7a,0xf3bcefa3,0x79e6b6d5,0x1befdbee,0x1cef1cef,0x1cef1cef, 
0x3cef1cef,0x5df73df7,0x5df77df7,0x7ef77ef7,0x7eef7ef7,0x3cef5def,0xfcee1cef,0xdbeedbee, 
0xbae6dbee,0x9ae6dbee,0x79e679e6,0x58de59e6,0xf7d538de,0xf7ddf7dd,0x54cdd6d5,0x33cd75d5, 
0xefa313cd,0xca822b93,0xaa7a697a,0xeb822c8b,0x086a6972,0xaa720862,0xec82ec82,0xec824d93, 
0xaa7a8a72,0xcb7a4972,0xa651c759,0x8549e759,0x8551c651,0xc659e759,0xc751c651,0x24418649, 
0x44414441,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe318e318,0xe318e318,0xe318e318, 
0xe318e318,0x0421e428,0x04190319,0x86510429,0x065a4872,0xc661076a,0x4451a659,0x06626449, 
0xe569c559,0xe561266a,0xa5614349,0x0b9b8982,0xe569c98a,0x07628651,0xa97a6872,0x55cd8d93, 
0xb9e699e6,0xd5cd57de,0x2b8370a4,0x91ac6c8b,0x37d674c5,0xbaee9ae6,0xdbeedbee,0xfceefcee, 
0x1ceffcee,0x3def1cef,0x5def5df7,0x7eef5def,0x7def7eef,0x1cef5def,0xfceefcee,0xdbeedbee, 
0xdbeedbee,0x9ae6baee,0x79e679e6,0x58de58de,0xf7d558de,0xf7dd18de,0x54cdd6d5,0x13cd95d5, 
0xcea333cd,0x897aeb8a,0xaa82697a,0xcb82eb82,0xa759ab7a,0x696a2862,0x0c8baa7a,0x0c8b2d8b, 
0x496aeb82,0xeb82496a,0x8549486a,0x2441e759,0x6549a651,0x8551a651,0x8649a651,0x2441a651, 
0x65414541,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe420e320,0xc320e420, 
0x2529e420,0x04210319,0xe320e420,0x276a6439,0x076a076a,0xc659c669,0x4341a551,0xc661a559, 
0x066ae669,0xa5590662,0x477aa561,0xca92c992,0xa5512772,0x2762a641,0x8c93477a,0x59de74c5, 
0x7ade7ade,0x38d679de,0x92b438de,0x10ac4d93,0xf5cdf3bc,0x9ae659de,0xbae6bae6,0xfbeedbee, 
0xfbeefbee,0xfbeefbee,0x1cef1cef,0x1cef1cef,0x3df71cef,0x3cef5def,0x1be71cef,0xfbe6fbee, 
0xdbeedbee,0xbae69ae6,0x79e69ae6,0x58de59e6,0x17d658de,0xf7d518de,0x75d5d6d5,0x13c554cd, 
0xae9b34cd,0xa982eb8a,0x697a4872,0xcb820c8b,0xa651496a,0x69726972,0x8a72286a,0x2c8beb82, 
0x8a72cb7a,0x8972496a,0xa651486a,0xa651a651,0x65416541,0x6549a651,0xc7598651,0x24398549, 
0x45416541,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe420e320,0xe420e420, 
0xe420e420,0x0419e318,0xe328c318,0x276ae759,0xe761276a,0xc6598559,0x64496449,0xe669e661, 
0x066a066a,0x4349a559,0xc98ae669,0x2772ea92,0x2339e659,0x24392331,0xca6a8549,0x99ee94cd, 
0x9ade79e6,0x17d679de,0x17de17d6,0x51acd3bc,0xb5cd13bd,0x9ae679e6,0xbae6bae6,0xfbeedbee, 
0xfbeefbee,0xfbeefbee,0xdbeefbee,0xdbe6dbe6,0xfceefcee,0x1ceffcee,0x1cef1cef,0xfbeefbee, 
0xbae6dbee,0xbae6bae6,0x79e67ae6,0x58e659e6,0xf7d538de,0x17de18de,0x75cdd6d5,0x13cd54cd, 
0xae9b13cd,0xaa82ca8a,0x49726972,0xeb82eb8a,0xa6518a7a,0x496a286a,0x6972e761,0xab7aaa7a, 
0x8a7acb7a,0x286a4972,0xa6590762,0x85518551,0x24398549,0xa6518549,0x86518551,0x6541a651, 
0x24394441,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe420e320,0x0421e420, 
0xc320e420,0x0419e420,0x8549e318,0x066a286a,0xc659486a,0xc659c659,0xa5514341,0xc6610762, 
0xa559c561,0xe6612349,0x0a930a8b,0x07624772,0x03216439,0x45316531,0x0429e428,0xce938541, 
0xfbf679ee,0x79e638de,0xf6d5d6cd,0x75cdb6d5,0x37d675c5,0x79e679e6,0xbae69ae6,0xdbeedbe6, 
0xdbeefbee,0xdbeefbee,0xdbe6dae6,0xdbe6dbe6,0xdbeedbee,0xfceedbe6,0xfbeefcee,0xdbeedbe6, 
0xbae6dbee,0x9ae6baee,0x59e679e6,0x59e679e6,0x17de38e6,0x18de18de,0x75cdd6d5,0x13cd34cd, 
0x8d9bb2c4,0x8982ca8a,0x49726972,0xaa7a8a7a,0xc7598a7a,0x6972e759,0x69720762,0x49726972, 
0x4972aa7a,0x0762286a,0xc659276a,0x65498551,0x44418549,0xa6514441,0x65498651,0x4441a651, 
0x44412439,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe420e320,0xe420e420, 
0xe420e420,0xc3180421,0x27624431,0xe669e669,0xc6510762,0x6449e659,0xc6612349,0xc661e661, 
0x6451a559,0xa982c661,0x26722b93,0xc651c561,0x04192429,0x45310419,0xec5a084a,0xa7392d63, 
0x95cd285a,0x17d6baee,0xd6d558e6,0xf7d5f7d5,0x17d6f6d5,0x59de58de,0xbae69ae6,0xdbe6dbe6, 
0xdaeedbee,0xdbeedbee,0xdbeebae6,0xdbeedbee,0xdbeedbee,0xfbeedbee,0x3cef1cef,0xfbe61cef, 
0xdbe6dbe6,0xbae6bae6,0x9ae679de,0x79e69ae6,0x38de59de,0x18def7d5,0x75d5d6dd,0x13cd33cd, 
0x8d9b71bc,0xa97a0b93,0x6972697a,0x6a7a697a,0x28628972,0x69720862,0x286ac759,0x286a286a, 
0x69728a7a,0x276a086a,0xc661276a,0x65498551,0x65418549,0xa6518549,0xa659a659,0x2439a651, 
0x24412439,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0x0421e320,0xe320e420, 
0xe420e320,0xe3280419,0x076ac659,0x276ac561,0xe659a559,0x2341c551,0x066a8551,0xc561c561, 
0xa5596451,0x897a697a,0x066a2772,0x44390662,0xe3180321,0xa739e320,0x5ac6d083,0x2a429bce, 
0xa741c420,0x38de34bd,0xf6d516d6,0xd6cd17d6,0x37de17d6,0x58de58de,0xbae679e6,0xdae6bae6, 
0xdaeedbee,0xdbeebae6,0xbaeedbee,0xbaeebaee,0xbaeebaee,0xdbeebae6,0x1ceffbee,0x1bef1bef, 
0xfbe6fcee,0xdbe6fbee,0xdae6dae6,0x79debae6,0x58de79de,0xf7d517de,0x75d5b6d5,0xf3c413c5, 
0x8d9b70b4,0x897a2c93,0x6972897a,0x697a697a,0x286a286a,0x496a496a,0x086ac659,0x076a286a, 
0x6972286a,0x286a286a,0xa659e761,0xa551a559,0x2441a651,0x85518551,0xc759a659,0x6541c751, 
0x24412439,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe420e420,0xe320e320,0xe320e320, 
0xc318e320,0xc651e318,0xe6614872,0xc6590662,0x0662a559,0x44496441,0xe661c661,0xc559a559, 
0x28728459,0x2872aa82,0x276ac661,0x4339a551,0x24310331,0xab620331,0x5fdf1ac6,0xe4206e63, 
0xa729ec62,0x75bd6539,0xd6d517de,0x17d638de,0x17d6d7d5,0x59de58de,0xbae699e6,0xbae6bae6, 
0xdaeedaee,0xdbeedbee,0x9ae6baee,0x79e679e6,0x59e679e6,0xdaeebae6,0xfbeefbee,0xfbe6fbe6, 
0xfbe61bef,0x1bef1bef,0xfbe61be7,0x9adedae6,0x59de79de,0xd6d538de,0x54cd95cd,0xd2c4f3c4, 
0xad9b50b4,0x897a2c93,0x48726872,0x697a697a,0xe759076a,0x486a2862,0x0762e761,0x086a286a, 
0x286ae761,0x076a4872,0xc661c661,0xa551a559,0x2441c651,0x85514441,0x86518651,0x6541c651, 
0x85492439,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xe420e420,0xe320e320,0xe320e320, 
0xe320e320,0x686a6541,0x06624772,0x85510662,0xa559e659,0x85512341,0xc561c661,0xe661e561, 
0x8982076a,0x076a4872,0xe6612872,0xa549e659,0x2762a551,0x4d7bc972,0xddd6fac5,0xc3206a4a, 
0x25192521,0x695ae320,0xd6d5d6d5,0x17d6d6d5,0x17de17d6,0x79e658de,0x9ae69ae6,0xbae6bae6, 
0xbae6bae6,0xbae6bae6,0x59de79e6,0x58e658de,0xd6d517de,0xb6d5b6d5,0x79de17de,0xbae69ae6, 
0xfbeedbe6,0x1beffbe6,0x1be71be7,0xbae6fbe6,0x79de9ae6,0xd6d538de,0x34cd75cd,0x91bc13c5, 
0xad9b0fac,0xaa7a2c93,0x48726872,0x48724872,0xc6590762,0x486ae759,0xc661e761,0x076a0762, 
0x286ae761,0xe6616972,0x076ae661,0x6449a559,0x6549c659,0x85512441,0x8551a651,0x2441a651, 
0x85490339,0xe320e320,0xe320e320,0xe320e320,0xe320e320,0xc3200421,0xe420e320,0xc318e320, 
0x4529e320,0x2762286a,0x276a055a,0xc651a559,0x2349e659,0xa5594449,0xe661c661,0x276a266a, 
0x487aa982,0x2872e669,0xe661e769,0x27622762,0x91bca97a,0xf4bcd6d5,0x56ad73a4,0x2429494a, 
0x484a284a,0xe3204529,0x58e6ef93,0x17def7dd,0x17de18de,0x79e638de,0xbae69ae6,0xbae6bae6, 
0xbae6bae6,0x79de9ae6,0x18d638de,0x17de38de,0x34c5b6cd,0x71b4f3bc,0x14bd91ac,0x96c575c5, 
0xbae618d6,0xdbe6dbe6,0xfbe6fbe6,0xbae6fbe6,0x59de9ae6,0xf7dd18de,0x54cd96d5,0x50b413cd, 
0x8d9bcea3,0xaa822b93,0x4872486a,0xe7692772,0xa559e761,0x286ae759,0xe761a659,0xe761286a, 
0x286aa659,0xc6614872,0x076ac661,0x4449a559,0x8549a651,0x64494441,0xc6598651,0x4441c659, 
0x85492439,0xe420e418,0xe420e420,0xe420e420,0xe420e420,0xe318e420,0xe320e318,0x0421e420, 
0xe759e320,0xc6594762,0xc661076a,0xc6518551,0x24418549,0xe6598551,0xc561e561,0xa982066a, 
0x076a897a,0xa561277a,0x265ae661,0x487a476a,0x75d50c93,0xdbee79de,0xf4ac39de,0x87390d6b, 
0x8a62e849,0x24292942,0xd6d56962,0xf6ddf6dd,0x58d637de,0x79e659e6,0xbae699de,0xbae6dae6, 
0x99e6bae6,0x38de79de,0x38de38de,0xd6d517de,0x92ac55c5,0x50a471a4,0x50ac50a4,0xd2b491ac, 
0x76c534bd,0x79d638ce,0x7ade9ade,0x9ade9ade,0xbae679de,0xf7d559de,0x74cdb6d5,0x50b433cd, 
0x8ea3ada3,0xa97a2c8b,0x28724872,0xe661076a,0xa559a661,0x0762c661,0xa551c659,0xe769276a, 
0x076a076a,0xe769276a,0xe669a661,0x8551c661,0x8551a551,0x65494441,0xa6516549,0x4441c759, 
0x65396541,0xe420e418,0xe420e420,0xe420e420,0xe420e420,0xe420e318,0xc318e318,0xc3180421, 
0x27622431,0x27624762,0x8559c661,0xa651e659,0x24410339,0xc559c559,0x066ac559,0x897a887a, 
0xe669c661,0xe661c561,0x6872486a,0x0b8baa82,0xb2bcae9b,0x58de17d6,0x1cf71bef,0x72a419d6, 
0x66316a5a,0xeb6a8639,0x92ac8e83,0x17def7dd,0x38de38de,0x9ae679e6,0xdbeebae6,0xbae6dbe6, 
0x79de9ae6,0x38d679de,0x17de17d6,0x96cdf7d5,0x72ac34c5,0xad930f9c,0x4c8b6c8b,0xef9b6c8b, 
0xb2b491ac,0x96c514b5,0x38d6f7cd,0x38d659de,0x59d658d6,0xf7d539de,0x95d5b6d5,0x50b413cd, 
0x8d9baea3,0xa97a2c8b,0x076a6872,0xe669e669,0x8559c661,0xc661e661,0xa551c659,0xc661c661, 
0xe669076a,0x076ae669,0xa561a661,0x8559e661,0x65498551,0x65494441,0xa6518551,0x4541e759, 
0x65414441,0xe420e420,0xe420e420,0xe420e420,0xe420e420,0xe320e418,0xe418e320,0xe328e418, 
0x4762285a,0x07622762,0xa659c659,0x6441c659,0x85510339,0xe661c661,0xa982c661,0xe6616872, 
0xe6612772,0x4872c559,0xaa8a697a,0xd2b48ea3,0x54c575c5,0xb6d5d3c4,0x99e6f7d5,0xfbeefbf6, 
0x96b5fbe6,0x519c8e83,0xb2ac72a4,0xd7d517de,0x59de59de,0xdbee79de,0xfbeefbee,0xbae6dbe6, 
0x58de79e6,0x38de38de,0x17de17d6,0x96d5d6d5,0xf4c455cd,0xce9bb1b4,0x6c8b8d8b,0xa972ca7a, 
0xee9b2c8b,0xd3bc92b4,0x75c5f3bc,0xf7d5d6cd,0x58d658de,0x17d618d6,0x75cdf7d5,0x30b4f2c4, 
0x6d9baea3,0x897a2b8b,0xe7694872,0xc661c661,0x6551c661,0xa559c661,0xa551a551,0xa659a559, 
0xe661e661,0x076aa661,0xa561e669,0xa659e769,0x2441a559,0x65492441,0x85518551,0x8549e761, 
0x65410339,0xe320e320,0xe318e320,0xe320e320,0xe320e320,0xc3200419,0xe418e420,0xa649e320, 
0x2662aa7a,0xe659c659,0xa551a559,0x0339a549,0x07622341,0xe661c661,0x897a4872,0xc561e669, 
0xa559e661,0x897a276a,0x10b40b93,0x79e675d5,0x79e6dbee,0xf3ccb6dd,0x34d5f4d4,0x58e6b6d5, 
0xdbee79e6,0xb7cdfcf6,0x54bdb2ac,0x59de58de,0x59de7ae6,0x1cefdbe6,0xfbee1cef,0x9ae6dbe6, 
0x38de79e6,0x38de17de,0xb6cdf7d5,0xb6d5b6d5,0x96d5b6d5,0x75cd95cd,0x54c554cd,0x0fa4b2b4, 
0x0b836d93,0x51b44d93,0x13bdf3c4,0x54c5f2bc,0x39de17d6,0x18de18d6,0x34c5d6d5,0x0facb1b4, 
0x2c936d9b,0x897a2b8b,0x076a697a,0xa661c661,0x8559c661,0xa5598559,0x85518551,0xa659a659, 
0xe6618559,0xe669c661,0xc661076a,0xa559e769,0x4449c659,0x44492441,0x65518551,0xc651e759, 
0x44390339,0xe320e320,0xe318e318,0xe320e320,0xe320e320,0xe3200321,0xe318e420,0x48626531, 
0x06620762,0xa551e659,0xa651a551,0x03394441,0xe6598549,0x4872c661,0xe6616872,0x066a066a, 
0x066a6459,0x2b9ba882,0xf7e571bc,0x1ceffbee,0xfceefcee,0x79e61ce7,0x14cd96d5,0x34cdf3cc, 
0xd6dd96d5,0xfbf638de,0x79debaee,0xdae6b9e6,0xbae679de,0x7df73def,0x1cef5def,0x9ae6dbe6, 
0x17de58e6,0x96d5b6dd,0xb6cd75cd,0xf7d5d7d5,0x17d617d6,0x18ded7d5,0x18de18de,0x38e638de, 
0x14bdd6d5,0xef9b0fa4,0x70ac0fa4,0x91ac91b4,0x75cdd2b4,0xd7d5d7d5,0xf3bc55c5,0xeea391b4, 
0x4c934c93,0xa97a4b8b,0x4872897a,0xa561e769,0xe661c661,0xc6618559,0x65518551,0xa659c659, 
0xe6614451,0xc661e661,0xe769076a,0x6559076a,0x8551c659,0x24414441,0x85518551,0x075ae659, 
0x04392439,0xe320e320,0xe318e318,0xe320e320,0xe320e320,0x0421e318,0x4431c318,0x2762e651, 
0xe661a559,0x64490662,0xc651a659,0x2441e338,0xa661e661,0x887a4872,0xe661e661,0xa561076a, 
0x687ae669,0x91c40a93,0xfbee17ee,0x1cef3cef,0x3de71def,0x1ce71cef,0x99defbe6,0xb6d518de, 
0xb6d595d5,0x38de17d6,0xb9de58de,0xdae61bef,0x3cef99de,0x9ef77ef7,0x3cef7df7,0x9ae6fbee, 
0xd6d538de,0x54cd55d5,0x38deb6d5,0x38d638de,0x17d638de,0x38de18de,0x59de38de,0x59de59de, 
0x79e658de,0xb6d558e6,0x50a4d2bc,0x50ac50ac,0x10ac10ac,0x34c5b2b4,0xd2bc34c5,0xeea391b4, 
0x2c934c93,0xa97a2b8b,0x687a897a,0xa661076a,0xe669a661,0xa6598561,0x64496449,0xa659e661, 
0xa5596451,0xc661c661,0x076ae769,0x85592872,0xa6598551,0x44416449,0xa6596549,0x0762c659, 
0x03316541,0xe320e320,0xe318e318,0xe320e320,0xe320e320,0x0421c318,0xa5410321,0xe659e659, 
0xc7590762,0xa551a551,0x4441a551,0x85512441,0x0772e761,0xc661887a,0x076ac559,0xa561c661, 
0xca8a4872,0x17e650b4,0x1cef1bf7,0x3def1cef,0x3cef3df7,0x1ceffcf6,0x3ce75de7,0xfbe61ce7, 
0xdbeedbe6,0x9adebae6,0xfbe6dbe6,0xfbe6dae6,0xbef77def,0xbef7bef7,0x5cef9ef7,0x79e6fbe6, 
0x75d517de,0x95cd33c5,0x58e617de,0x38de58de,0x17de38de,0x58de37de,0x59de58de,0x79de79de, 
0x38de59de,0x58de17d6,0xd6d558e6,0x50ac13c5,0xad9bee9b,0x30a4ae93,0xb1b491b4,0xeea371b4, 
0x2b8b6c93,0xca822b8b,0x697a897a,0xe661076a,0xc661a559,0xa559a661,0x24492449,0xa659e761, 
0x84516551,0xa5618559,0x2772c669,0xa6614872,0x85596551,0x44498551,0xc6594449,0xe759c659, 
0x24398549,0xe318e320,0xe318e318,0xe320e320,0xe320e320,0xe318e320,0x6441a639,0x0662a459, 
0xc7590762,0xc5518551,0x03396549,0xe7614449,0x48822872,0xa559e661,0xc661e661,0xc6618559, 
0x0eb4687a,0xfbee18e6,0x1cef1bef,0x1cef3df7,0x5cf75cef,0x5cef7cef,0x1df71def,0x3def1def, 
0x3def7ef7,0x5df73df7,0x3def1cef,0x9ef73def,0xbef7dfff,0xbef7def7,0x5cef9df7,0x58dedae6, 
0x33cdd6d5,0x58e695cd,0x17d678e6,0x58de38de,0x17de38de,0x17de17de,0x58de38de,0x99e679de, 
0x58de79e6,0x17d617d6,0x18def7d5,0x95d518de,0xad93d2bc,0x2c8b6c93,0x91b48d93,0xce9b91b4, 
0x2b934c93,0xea822b8b,0x897a897a,0x076a076a,0xa561a561,0xc661c669,0x23412349,0xa661276a, 
0x44516451,0xa559a559,0x2772c661,0xc661076a,0x6551a559,0x6549a651,0xa6592449,0xa6518551, 
0x65418549,0xe3200421,0xe320e318,0xe320e420,0xe320c318,0x4431c320,0x44416541,0x0762e659, 
0xa551c659,0xc659c659,0x44492341,0x48720662,0xc6614872,0xc661a559,0x0762e769,0x066a6449, 
0xd7dd6d9b,0xfbeefbee,0x1ceffbee,0x3cf71cef,0x5df73df7,0x7df75def,0x5ef77ef7,0x5eef5eef, 
0x9eef7eef,0x9ef79ef7,0xbef79ef7,0xbef7bef7,0xdef7def7,0xbef7dff7,0x3cf79df7,0x17debae6, 
0xb6d5d6d5,0x58d617de,0x39de59d6,0x54cd39ee,0xae9370a4,0x0c7b4c83,0x109c6d8b,0x34bdd3ac, 
0x17e695cd,0xb6d558e6,0xd7ddb6dd,0xd6d5b6d5,0xb2bc75cd,0x2b8bad9b,0x6c8bca7a,0x0fa470ac, 
0x4c930b8b,0xea820b8b,0x4872a97a,0x076a476a,0xa559066a,0x0662e669,0x44496449,0x076aa659, 
0x64498559,0xc661a559,0xe6696459,0xc661697a,0x8551c661,0x64498449,0x85514449,0xc6598551, 
0x44398549,0xe420e320,0xe318e420,0xe320e318,0xe320e320,0x45394531,0xa5512339,0x2762276a, 
0x85518551,0x6551e659,0xc6598551,0x276a286a,0x8559c661,0x076ae661,0x64490762,0x0b8b6451, 
0xbaf675d5,0xfbeedbee,0x1cef1cef,0x3cef1cef,0x5df73cef,0x7df77df7,0x7ef77df7,0x7ef77ef7, 
0x9df79ef7,0xbef79ef7,0xbef7bef7,0xbef7bef7,0xdef7bef7,0xbef7dff7,0x1cef9df7,0x38de99e6, 
0x17de17de,0x99e658de,0x38e6bae6,0x896a2fa4,0x85318541,0x4a52c739,0x66312952,0xec62094a, 
0x319c8e83,0xd7d5d2ac,0x75cdf7dd,0x95cd75cd,0x55cd75cd,0x8d9bb1bc,0xa972ca7a,0x2fa48d93, 
0x0b8b6c93,0xea822c8b,0x8972a97a,0x076a6872,0xc561e661,0xe661c561,0x65518551,0xa6618551, 
0x4451c661,0xa5598551,0xa561a561,0x07724872,0x6451c661,0x44498551,0x85512441,0xc6518551, 
0x03318549,0xe320e320,0xe318e318,0x0321e320,0xe320e320,0x24392429,0xe6598549,0xa5598872, 
0xc6598551,0xa551c659,0x276ae659,0xc661276a,0xa5518551,0xc659c659,0x2441a651,0xb2c4287a, 
0xbaeedaf6,0xfbf6dbee,0x1cef1cf7,0x3cef1cef,0x7df75def,0x7df77df7,0x9ef79ef7,0xbef79ef7, 
0xbeffbeff,0xbef7bef7,0xbef7dfff,0xbef7bef7,0xbef7bef7,0xbef7bff7,0x1bef7df7,0x79de9ae6, 
0x58de58de,0xbaee79e6,0xad93b9ee,0xc6594349,0xf59c4d73,0x9bce19b6,0x0d5bb06b,0xc7394a42, 
0x8b62ac62,0x6d83cb6a,0x75d5d3bc,0x55cd34cd,0x14c555cd,0x30acf3c4,0xa9728d93,0x6c93a972, 
0x4c938d93,0x0b832c8b,0xa97aca82,0x076a6872,0xc661e661,0xc661a561,0xa6518559,0x64494449, 
0x6559076a,0xa5596451,0x6559a559,0x48722772,0x6451c661,0x6549a551,0xa5512441,0xa5518551, 
0x03316541,0xe3200421,0xe420e318,0xe320e420,0x2429e320,0x86492431,0x486a075a,0x85510762, 
0xe761a551,0xc659c651,0x076ac659,0x8551e761,0xe659a551,0x6549c759,0xa6594441,0x38e6afa3, 
0xbaeefbee,0xfbeedbee,0x1ceffbee,0x5cef1cef,0x7def5def,0x9ef79ef7,0xbef7bef7,0xbef7bef7, 
0xbeffbeff,0xdff7dff7,0xbef7dff7,0xbef7bef7,0xbef7bef7,0x9ef7beff,0xfbee5cf7,0xbae6dae6, 
0x79de79de,0xfbeebae6,0xea7258de,0xb3c4486a,0xfdde3ae6,0x159dbfef,0x6a4a8729,0xe318c631, 
0x09522529,0xcb6aec6a,0x91bc2c83,0xf3c454cd,0x14c514c5,0x91bcd2bc,0x8d930fa4,0x0b83ea7a, 
0x4c938d93,0x2b8b2b8b,0x897a0b83,0x276a6872,0xe661076a,0xa661a561,0xa559c669,0x23394441, 
0xc669e761,0xa5596449,0x85598559,0x0772076a,0xa561e669,0x65498551,0x65492441,0x6449a551, 
0x44392439,0xe320e320,0xe320e318,0xe320e320,0x86390429,0xc6518539,0xe761e761,0xa551a551, 
0xc659e659,0xa5518449,0x276ae661,0x6449a659,0xe651c651,0x44416549,0x8a824449,0xdbee75cd, 
0xdbee9ae6,0xdbeebbee,0x1befdbee,0x5cf73cef,0x5def5def,0x9ef79ef7,0xbef79ef7,0xdef7def7, 
0xbef7bef7,0xdef7bef7,0xdef7dff7,0xdfffbef7,0xbef7bef7,0x5def7ef7,0xfbee1cef,0xfbe61bef, 
0x9ade9ade,0xbae6bade,0xfbee9ae6,0x56c559de,0x5bde36bd,0x328c7fef,0xe318e418,0x24212321, 
0x2529e320,0xab6a6639,0x2c8b0c7b,0xf3c451b4,0xd3bcd3c4,0x91b4b2bc,0x0fa430ac,0x2b8b8d93, 
0x4c8b6c93,0x4c934c8b,0xa97a2b8b,0x276a6872,0xe761076a,0xa561e661,0x8559e771,0x23394441, 
0xe7696551,0x85596449,0x85598559,0xe769e669,0xe669c669,0x6549a551,0x44492441,0x8549c651, 
0x44390331,0xe320e320,0xe318e320,0x0429e420,0x45312429,0x65416539,0xc659e761,0x8549a551, 
0xa551e659,0xa5518449,0x0762486a,0xa5516449,0x6549c651,0x85490439,0xaea3c661,0xbae679e6, 
0x9aee9ae6,0xdbeedaee,0x1ceffbee,0x3cef1cef,0x3df75cf7,0x7df75def,0x9ef77ef7,0x9ef79ef7, 
0xbff79ef7,0xbef7bef7,0xbef7def7,0xdfffbef7,0x9ef7bef7,0x1cef5df7,0x1cef1cef,0xfbee1bef, 
0xdbe6bae6,0x9ae61be7,0xfcee19de,0x7defbef7,0xf9cddbde,0xd49c5bce,0x8a52c839,0xa631cb5a, 
0xe4200421,0xa741c849,0x6d8b2c7b,0x92bcefa3,0xb2bc71b4,0x50b471b4,0x30ac71b4,0x6c93ce9b, 
0x6c934c93,0x6c938d93,0xea7a4b8b,0x486aa97a,0x076a0762,0xa661076a,0xa5590772,0x44396441, 
0xc7590339,0x8551a659,0x8551a559,0x2772e661,0xc661c661,0x6549e661,0x44412441,0xa551c651, 
0x24310331,0x04210421,0xe3200421,0x04290421,0xe320e320,0x85494439,0xe661e761,0xa5498449, 
0x8551a551,0xc659c559,0x85510762,0xe6598551,0x24418549,0xe6618551,0xb2bc6872,0x79e699ee, 
0x99e6baee,0xdbeedaee,0xfbeefbee,0xfbeefbee,0x1cef1cef,0x3cf71bef,0x1bf73cf7,0x3ceffbee, 
0xbef77def,0xdef7bef7,0xbef7def7,0xbef7bef7,0x7df79ef7,0x1cef5def,0x3cef3cef,0x1cef1cef, 
0xdbe6fbe6,0xdbe61be7,0xf7d57ae6,0xfbde58d6,0x3df77df7,0x97bd9bd6,0x29524e73,0x65316631, 
0xe8490529,0x45318a62,0xcb72c741,0x10acae93,0x70b471bc,0x71b471ac,0x30ac91b4,0xae9beea3, 
0x8d9b8c93,0x6c93cd9b,0xea7a4b8b,0x276aa97a,0x076ae761,0xc661276a,0xa559c669,0x44416449, 
0x65490339,0x8559e761,0x64518559,0x276ac559,0xa559c661,0x8551c659,0x23412441,0xa551a551, 
0xe3280331,0xe318e320,0xe320e320,0xe320e320,0x2531e328,0x86498541,0x8551e761,0xa5498449, 
0x8551a549,0xe6598551,0x85498551,0x6441e651,0xa6510339,0xe7690862,0xb5cd0a83,0x59ee58e6, 
0x99e699e6,0xbae6bae6,0xdbeedbee,0xdbeedbee,0xbbe6dbee,0xbaeedaee,0x79e699ee,0x3cf7baee, 
0xbef7beff,0xdff7def7,0xdef7dff7,0xbef7bef7,0x5def9ef7,0x1ce73cef,0x3cef3cef,0x5df73cef, 
0xfcee1cef,0x3cef1cef,0x18e6bae6,0xb6d575d5,0xdbee59de,0xfcee1cef,0x35bd9ae6,0x6d7b1094, 
0xaf8b4d7b,0x8639ab62,0xa6490429,0x2d93cb7a,0x50b4efa3,0xb2bc71b4,0x71b4b2bc,0xcea30fac, 
0xcea3cea3,0x8c93cd9b,0xca7a2b8b,0x286aa972,0xe769e761,0xe661276a,0xa559a559,0x64416449, 
0x23312439,0xc661e761,0x65516551,0xc6618559,0xc5610662,0xe7598551,0x03396549,0xa549a551, 
0x03310331,0xe320e320,0xe318e320,0xe428e320,0xa6410429,0xc6516541,0x4441c651,0x85516449, 
0x6551a551,0xa551c659,0xe659a551,0x44414441,0xa6518651,0xea82486a,0xd6d52c8b,0x79e638de, 
0x79de79de,0x9aee9aee,0xbae6baee,0xbaee9ae6,0x58e699ee,0xf7e558e6,0x99e6f7e5,0xbfff9df7, 
0xbef79ef7,0xdff7def7,0xdfffbff7,0x9ef7bef7,0x5cef9ef7,0x3cf73def,0x1cef1cf7,0x5cef3cef, 
0x1cef5cef,0x3def1cef,0xbbe63cef,0xb6cd38d6,0x55d575d5,0x79def7d5,0xbbeebae6,0xb7dd59e6, 
0x93c456d5,0x4c832fac,0x85398541,0xeb7a8a62,0x8e9b2c8b,0xb2bc30ac,0x70b491b4,0x2fa470b4, 
0xeea3eea3,0x6c93ce9b,0xc97a2b83,0x686a8972,0xe661e661,0xe769076a,0x8559c661,0x65416549, 
0x04390331,0x07626549,0x64518559,0x85598559,0xe769c659,0xa559a659,0x03398551,0x8551c651, 
0x4439e338,0xe320e320,0xe318e318,0xe3200421,0x44310429,0xc6514441,0x44416549,0x8551a651, 
0xa5516449,0x8551a551,0xa551e659,0x075a2341,0x8551e759,0x2c8ba97a,0xd6d56d8b,0x38de18de, 
0x59de59de,0x79e69ae6,0x79e679e6,0x58e699e6,0x17de17de,0xd7e5f7d5,0x7cf7f7dd,0x9eefdfff, 
0xdfffbef7,0xbef7bef7,0xbff7dfff,0x7df79ef7,0x5cf75def,0x3cef5cef,0xfbeefbee,0x3cef1bef, 
0x5df75cef,0x5df75df7,0x1cef5def,0x18debae6,0x55cd96d5,0x14cd13cd,0xb6d554cd,0xd6ddf6dd, 
0x54cdb6dd,0x50b4d2cc,0x896a6c8b,0xae9beb7a,0x8d9bad9b,0xf3c430ac,0xb1bc13c5,0x2fac50ac, 
0x0fa42fa4,0x4c93ce9b,0xaa7a0b83,0x686a8972,0xc659e661,0xe761e761,0x8559a661,0x65498549, 
0x04394439,0xe7610441,0x6451a559,0x85596551,0xc661c659,0xa559c659,0x23398551,0x8651a551, 
0x64390339,0xe420e320,0xe320e318,0xe3200421,0x03294531,0xc6514441,0x85494441,0x8549c651, 
0xa6512341,0xa5516449,0x2341a551,0x07620762,0xa651c651,0x2c8bca82,0xd7ddce9b,0xf7ddf7dd, 
0x38de38de,0x79e658de,0x38de79e6,0xf7dd17de,0xd7ddd6dd,0xd7dd17de,0xdff71cf7,0xbef7bef7, 
0xbff7bef7,0xbef7bef7,0xbef7dfff,0x7ef79ef7,0x3cf71cef,0x1be73cef,0xfae6dae6,0x1cef1bef, 
0x5df71cef,0x7df75def,0x7ef79ef7,0xbbe63def,0xf8d559de,0x34cd96d5,0xb2c4d2c4,0xb1bcb1bc, 
0xb1bcb2c4,0x50b471c4,0x91b4d2bc,0x13c550ac,0xf2bc33c5,0x34cdd2bc,0xf2c434cd,0x2fac70b4, 
0x0fa40fac,0x4c8bad9b,0xca7a0b83,0x4862896a,0xa551e659,0x076aa659,0x8559a659,0x85498551, 
0x24394439,0xc651e330,0x6559c661,0x86596451,0xa559a659,0xa559c659,0x44418551,0xa6598549, 
0x44390341,0xe420e320,0xe320e420,0xe328e320,0xe3286539,0x85496549,0xa6496549,0x64418549, 
0xc6518549,0x85492439,0xe659a551,0xa551686a,0xa651e759,0x0c8b0c8b,0xf7dd50ac,0xf7ddd7d5, 
0x38e617de,0x38e638de,0xd6d517de,0xd7ddd6d5,0x59e618e6,0xbbee58e6,0xbfefdfff,0x9df7bef7, 
0x9ef7bef7,0xbef7bef7,0x9ef7bff7,0x7df77ef7,0x3cef3cef,0x99e6fbee,0xbae679de,0x1beffbee, 
0x3df71cef,0x9ef77df7,0x7eef9ef7,0x7df79ef7,0x7adefcee,0x18de5ade,0x55cdd7dd,0xb3c4d3c4, 
0x93c492c4,0x13c5d2c4,0xb6d554cd,0x54cd95d5,0xb5d574cd,0x33cd54cd,0x13c513c5,0x0fac91bc, 
0xeea3eea3,0x4c8b8d9b,0xca72ea82,0x075a686a,0x6549c651,0x27626449,0x8551c661,0x8549a551, 
0x24392439,0x85490331,0xa559c659,0x85516551,0x85598551,0x8551a659,0x44416551,0x07626441, 
0x44396549,0xe320e420,0xc3180421,0x2429c320,0x03316539,0x65498549,0xa6498649,0x24396441, 
0x6441a549,0xa651e330,0x686a2762,0xa651a551,0x8549c651,0x0c8b6d93,0xf7ddd2bc,0xf7ddd6d5, 
0xf7ddf7dd,0xb6ddf7dd,0xd7ddb6d5,0x38de17de,0x9ae679e6,0xdbee99e6,0xbff77eef,0x7cef9df7, 
0x7ef7bef7,0xbef7bef7,0x9ef7bef7,0x3cef5def,0xfbee5cf7,0x17de79ee,0x38e6f7d5,0xbae679e6, 
0x3ceffbee,0x9ef77df7,0x9ef79ef7,0xbff79ef7,0x3cef7df7,0x9be6bce6,0x59e69ae6,0x39e639e6, 
0x18de18de,0x58de17d6,0x59e638de,0xf7d579e6,0x95cdd6d5,0x33cd54cd,0xd2bc13c5,0x0fac70b4, 
0xce9beea3,0x2b836c93,0xa972ca7a,0xe7594862,0x4441a649,0xe6592441,0xa559e761,0x85498549, 
0x04312439,0x44410331,0xa559a659,0x65516551,0x85516551,0x8559a551,0x24418551,0x286a2441, 
0x2331c651,0xe320e420,0xe3200421,0x6539e320,0x44396541,0x44418549,0x85498549,0x03394441, 
0x03394441,0x28626549,0xa551696a,0x075a6549,0xa6490339,0x2c8b8d9b,0xf7dd34c5,0xf7ddf7d5, 
0xb6d5d6d5,0xb6d596d5,0x17e6f7e5,0x58de17de,0xbade99de,0xfbe6bae6,0x1cf7bbe6,0x7df73cf7, 
0x7df77df7,0x9df79df7,0x7df75def,0x3cef3cef,0x79de1bef,0x55cd75d5,0x96d555cd,0x59e6d7d5, 
0x1be7dbee,0x7ef75cef,0xbff7bff7,0x9ef79ef7,0xdfffbef7,0x1cef7df7,0xfbee1bef,0xfbe6fbee, 
0xfbe6dbe6,0xbae63cef,0x9ae6bae6,0x58de58de,0xb6d538de,0x53cd54cd,0xb1bc13c5,0x0fac4fac, 
0x8d93cea3,0xea824b8b,0x686aa972,0xe7514862,0x4439a541,0x85492439,0xc659e661,0x85494449, 
0xe3306541,0x2439e328,0xa559c659,0x65516551,0xa5518551,0xc659a659,0x2441a551,0x07620339, 
0x0331c659,0xe320e420,0xe3200421,0x8641e320,0x65418541,0x64418549,0x44416549,0x64492441, 
0xc651a551,0x286a4872,0x4441075a,0xc651a651,0x085ae330,0x6c932c93,0xf7dd95d5,0x17de17de, 
0xb6d5d6d5,0x17deb6d5,0xd6dd17e6,0x38ded7d5,0xdbe69ae6,0xfffffce6,0x14cd58de,0x5cf7fbf6, 
0x5cf73cf7,0x1cef5cf7,0x1bef1bef,0xdbeefbee,0x96cd59e6,0x75cd14c5,0x75cd96cd,0x17de75cd, 
0x1befbaee,0x7df77def,0xbef79ef7,0xbef7bef7,0xbef7bef7,0x9df7def7,0x7df79df7,0x3cef5df7, 
0x1cef1cef,0xdbeefbe6,0x9ae6dbee,0x78de99e6,0xf7ddf7d5,0x53cd95d5,0x91bcf2c4,0xcea32fac, 
0x2c938d9b,0xc97a2b83,0x486a8972,0xe7512862,0x44316541,0x85494439,0xe661c659,0x64416449, 
0x04316541,0x24310329,0xa659a651,0x65518551,0xa5518551,0xa6598551,0x4441a551,0xc6590339, 
0x2331e759,0x0421e420,0xe320e320,0x6539c320,0x65414439,0x85496541,0x8549a549,0x075a4449, 
0x486a2762,0x076a286a,0x84492341,0x4441e651,0x4962c330,0xcea32b8b,0xf7ddd6dd,0xf7d517de, 
0xf7ddf7dd,0x38de38de,0xb6d5b6d5,0x99e638e6,0xbbe69ae6,0xbef77ef7,0x8ea358ee,0xfbeed6d5, 
0xfbeefcf6,0xdaeefbee,0x9aeedbee,0x38e679e6,0x54cdb6d5,0x9ae6f8d5,0xb6d579e6,0xd6d575cd, 
0x1bef79e6,0x9df75cef,0x9ef79ef7,0xbef79ef7,0xbef7bff7,0xbef7bef7,0x9ef7bff7,0x5ef77ef7, 
0x1cef3df7,0xdbf6fcee,0x99eebaee,0x58de78e6,0xb6ddf7dd,0x33cd54cd,0x70b4f2c4,0xad9beea3, 
0x0b8b4c93,0xa972ea7a,0x48628972,0xe651075a,0x44314439,0xa6494439,0xe661a551,0x23418451, 
0x24394541,0x03310429,0xa6598549,0x6551a659,0x85516551,0xa5596551,0x8549c659,0x85512341, 
0x4439e759,0xe320e320,0xe3200421,0x24312429,0xc6516441,0xa649a651,0x84498549,0x0762a551, 
0x286a486a,0x4439075a,0x075a6441,0x24398649,0x285a0329,0x0fa40b83,0x18ded6d5,0x38de18de, 
0xf7ddf7d5,0xf7dd37de,0xf7ddd6d5,0x9ade9ae6,0x9ef7dbde,0x9ef7beef,0xb3bcbbf6,0x18e692bc, 
0x9ae679e6,0x79e69ae6,0x38e679ee,0x96d5f7e5,0x18de75c5,0xfce6fce6,0x38d6fce6,0xb6dd54c5, 
0xdbe638de,0x5df73cef,0x9ef77ef7,0x9ef79ef7,0x9df79df7,0x9ef79ef7,0x7ef79ef7,0x5def7df7, 
0x1cef3cef,0xdaeefbee,0x99e699e6,0x37de78e6,0x95d5f6dd,0x13cd33cd,0x50b4b1bc,0x6c93cea3, 
0xea822b83,0x8972a972,0x2862686a,0xa649e759,0x24314439,0xa6494539,0xc651a551,0x4541a649, 
0x44392439,0x04310331,0x86492439,0x8551a559,0x65494449,0x65518551,0x8551c659,0x85490341, 
0x44398549,0xc318e320,0xe4200421,0x0331e328,0xc6516541,0x65494441,0x64496449,0x69720762, 
0xe759286a,0x85490339,0x8651e651,0x44394441,0xe751c328,0x91b44c8b,0x38def7dd,0x58de58de, 
0x38de38de,0xb6d517de,0xf7dd55cd,0x9ae639e6,0x9ef77eff,0x9ef79eef,0xf7d51bef,0x34d514cd, 
0xd7dd96dd,0xd7ddd7dd,0x55d596dd,0x55cd54cd,0x9ae6d7d5,0x1cefdbe6,0x18defbee,0x95dd34cd, 
0xbae618de,0x3df71cef,0x7df77df7,0x9df79df7,0x9ef79df7,0x9df79df7,0x5def7df7,0x3cef5def, 
0x1bef1cef,0xbaeedaee,0x78e699e6,0x17de38de,0x74cdd6d5,0xd2c413cd,0xeea370b4,0x2b8b8d93, 
0xca7a0a83,0x8872a972,0x0762686a,0xa641c651,0x45396539,0xc6498641,0xc6518549,0x04398549, 
0x44392439,0x04312431,0x65410331,0xa551a551,0x65496549,0x85516449,0x8551a551,0x65412341, 
0x03318549,0xc3180421,0xe420e320,0x24310429,0x85498549,0x85492341,0x0762e659,0x28622762, 
0x4441c659,0x07522441,0x4541a649,0x24394541,0xa649e328,0x13c56c93,0x38def7dd,0x38de59de, 
0x38de38de,0x92bcd6dd,0xd7e592c4,0x1be759de,0x9ef7dfff,0x9ef77eef,0x79de3ce7,0x34cdb6d5, 
0x13d534d5,0x34d514cd,0xd3c4d3cc,0xb6d554d5,0x99e638de,0x99e6baee,0x95d559e6,0x34d592bc, 
0x9ae617de,0x3ceffbee,0x5def3df7,0x7df77df7,0x7df77df7,0x7df77df7,0x5def7df7,0x1cef3cef, 
0xdbeefbee,0x9aeebaee,0x58e679e6,0xf6dd37de,0x54cdb5d5,0x91bcd2c4,0xad9b2fac,0x0b834c93, 
0xa972ca7a,0x686a8972,0x075a686a,0x8541c651,0x45314539,0xe651c749,0xc6518549,0xe3308549, 
0x24392439,0x03292431,0x4441e328,0xa5518549,0x44418549,0x85516449,0x85518551,0x44412441, 
0xe3308541,0x2429e320,0x04210421,0x44390429,0x64498549,0xc659c651,0x07620762,0x8551c659, 
0x03394441,0xe651075a,0x65494439,0x24316541,0x8541e328,0x54cd8d93,0x38de17de,0x58de79e6, 
0xf7dd38de,0xefb395d5,0xd3c42da3,0x7defbae6,0xbeef7cdf,0x9ef79eef,0x79de3cef,0x75cd17d6, 
0xf2ccd2c4,0xceabb2c4,0x4c9b6d9b,0xd2bc6c9b,0x58e638ee,0xd6d5f7dd,0xb1c475d5,0x34cd10b4, 
0x79de18e6,0xfbeedbe6,0x3cef3cef,0x5df73cef,0x5df75df7,0x5df77df7,0x3df75df7,0x1cef3cef, 
0xbae6dbee,0x79ee99ee,0x17e658e6,0xd6ddf6dd,0x33cd95d5,0x70b491bc,0x8d9b0fac,0xea7a2b8b, 
0x8972a972,0x686a8972,0x075a486a,0x6539a649,0x45312431,0xc649e749,0xc6516549,0xe3308549, 
0x44392431,0xe3282431,0x2439e328,0x85496441,0x65418551,0x65496549,0xa5518551,0x44412441, 
0x03318541,0x25290429,0xe3200421,0x85410429,0xe659e759,0x2762c651,0xa659e759,0x4441a651, 
0xc6494441,0x4439075a,0x65496541,0x44394541,0x8541e320,0x75cdce9b,0x58de37de,0x79e679e6, 
0xf7d558e6,0x0fac33d5,0x2972c761,0x1cffd3c4,0xbde7beff,0x5defbeef,0xbae63cef,0xb5cd79de, 
0x90c491b4,0x4c9b71bc,0x6c9b4c9b,0x697a697a,0xb2c48e9b,0x74d554d5,0xeeabd2c4,0x55d50fb4, 
0x38de18e6,0xdbeebae6,0x1cef1cef,0x3cef3cef,0x3cf73cef,0x3cf73cf7,0x1cef3cef,0xfbee1cf7, 
0xbaeedbee,0x38e658e6,0xd6ddf7dd,0x74d595dd,0xd2c433cd,0x2fb470bc,0x4c93cea3,0xa972ea82, 
0x89728972,0x486a6972,0xc6512862,0x44398541,0x85394431,0x8541084a,0xa6516549,0x04318549, 
0x65390431,0x03292431,0x24310429,0x64492439,0x6541a549,0x64496549,0x85518549,0x24414441, 
0x24396541,0x04290429,0x24290421,0xa6492431,0x4449c651,0xe6598549,0x6549c651,0x44414441, 
0x075a8549,0x24396549,0x86498541,0x24314541,0x6539c220,0x95d50fa4,0x58de37de,0x99e679e6, 
0xf7dd38de,0x51b434dd,0xc340086a,0xafa3c769,0x9bfe55d5,0xbeff9dff,0xdbe67df7,0xb6dd39de, 
0xefabf3cc,0x2fb4ceab,0x0fb450bc,0xceab0fb4,0x4c9b0b93,0x50b450b4,0x8d9bcea3,0xd7ddb2bc, 
0x38def7dd,0xbaee79e6,0xfbeefbee,0x1cf71cef,0x1cf71cf7,0x1cf71cf7,0xfbee1bef,0xdbeefbee, 
0x99eebaee,0x38e658e6,0x95ddd6dd,0x13cd54d5,0xb1bcf2c4,0xefab50b4,0x2b8b8d9b,0x8972ca7a, 
0x686a686a,0x4862486a,0xa649075a,0x24316541,0x86392431,0x4439c749,0xa6516549,0x24318549, 
0x4539e330,0x04312439,0x04310429,0x44412439,0x65498549,0x44494449,0x85518549,0x24394541, 
0x44394441,0xe320e420,0xe320e420,0x6541e328,0xa551a651,0x075a286a,0x6541c651,0x65412439, 
0x44498549,0x85412441,0x86498541,0x03316541,0x2431e328,0x75cdce9b,0x38def7dd,0x79de79e6, 
0x17de38de,0x34d575dd,0xe76151b4,0x08626549,0xb0bbcb92,0x7af655dd,0x1cef3dff,0x39e67ade, 
0xefa396dd,0xaeab4c9b,0xefab0fb4,0x0fb40fac,0x6da3aea3,0x0b930c93,0x0fac4c9b,0x18de75cd, 
0x38de18de,0x79e618de,0xdbeebaee,0xfbeefbee,0xfbeefbee,0xfbee1bf7,0xdbeedbee,0x9aeebaee, 
0x58e679e6,0xf7dd38e6,0x75d5b6d5,0xf2c434cd,0x70b4b1bc,0xaea30fac,0x0a834c93,0x896ac97a, 
0x4862686a,0x2862286a,0x8541e751,0x24316539,0xa6412429,0x44398641,0xa549a549,0x24318541, 
0x2431e328,0x04314439,0x0429e428,0x44412439,0x65498549,0x65494441,0x85496549,0x24396549, 
0x44396541,0xe320e420,0xe320c320,0xc6494431,0x0762c659,0x86518551,0x44396549,0x85494541, 
0x24496549,0x85414441,0x6549a649,0x44314541,0xe3280329,0x75cdad93,0x38ded6d5,0x58de79e6, 
0x17de38de,0xb6ddb6d5,0xae9b18ee,0x89728551,0x71b4b2b4,0x90bb6ba2,0x7ae635d5,0xdadefbe6, 
0x34cd38de,0x6da3aeab,0x30b4aea3,0x0fac50b4,0x6c9bcea3,0x8ea34ea3,0xf2c450b4,0xf7d555c5, 
0x17d638de,0x58def7d5,0xbae699e6,0xdbeebaee,0xdbeebbee,0xdbeedbee,0xbaeedbee,0x79e69ae6, 
0x38e659e6,0xd6d518de,0x54d575d5,0xb2c4f3cc,0x50b491bc,0x8d9baea3,0xea7a2b8b,0x686a8972, 
0x4862486a,0x28622862,0x4439a649,0x04314439,0xc7412431,0x65418639,0x8549a651,0x04316541, 
0x2431e328,0x04314439,0xe428e428,0x44412439,0x65498549,0xa6514441,0x65496549,0x03398549, 
0x44398541,0x0421e320,0xe328c320,0xa5496439,0xa549075a,0x65412439,0x44412439,0x65414441, 
0x44418549,0xa6514441,0x65418549,0x24316541,0x03210429,0x74cd0b7b,0x17de95d5,0x59e658de, 
0x58de38de,0x37d618de,0xd4cc59de,0xcb6a8869,0xd8cddbd6,0xd1b310ac,0x12c410bb,0xbae676d5, 
0x9be61ce7,0x76cdd7d5,0x54cd55cd,0x54cd54cd,0x51b414cd,0xefabaea3,0xf3c492bc,0xf8dd75cd, 
0x18d618de,0xf7ddd7d5,0x79e659e6,0xbaee79e6,0xbaee9ae6,0x9aee9aee,0x99ee9aee,0x58e659e6, 
0x17de38de,0x76d5b7dd,0x13cd55d5,0x91bcb1c4,0xeea350b4,0x4c938ea3,0xa9720b83,0x4862686a, 
0x48624862,0xe7512862,0x64398541,0x03294431,0xe7494431,0x44396541,0x8549a649,0x24316541, 
0x2539e330,0x24312531,0x0329e328,0x44392431,0x65498549,0x85494441,0x85498549,0x24396541, 
0x44396541,0xe420e320,0xe320e320,0xe6514439,0xe330a549,0x44414441,0x65414441,0x65414441, 
0x24418549,0xa6518549,0x65418549,0x44314439,0xe3204431,0x34cd896a,0xf6d595d5,0x38de38d6, 
0x37de58e6,0x99d638de,0x37ed18ee,0x494ae969,0x5adebef7,0x18de7ade,0xadb290bb,0x94d470c3, 
0x7ae619e6,0xdbeedbee,0x79de99de,0x38de59de,0x96cdf8dd,0xd3c414cd,0x14c5f3c4,0xd7dd96d5, 
0xf8ddd7d5,0xd6d5d7d5,0x38e618de,0x79e659e6,0x79e67ae6,0x79e67ae6,0x58e659e6,0x38e638e6, 
0xd7ddf7dd,0x55cd96d5,0xd2c414cd,0x30b471bc,0x8d9befab,0x2c8b6d9b,0x8972ea82,0x4862686a, 
0x27624862,0x8549075a,0x44316541,0x24312329,0xc6498541,0x44396539,0x65418549,0x04316539, 
0x4539e328,0x24312431,0x0329e328,0x44392431,0x44416541,0x85496541,0x65414441,0x04394441, 
0x24396541,0xe320e320,0x0329e420,0xc6514439,0x44414441,0x44418549,0x65414441,0x44414441, 
0x44418549,0xa651a649,0x65418549,0x24396541,0xe3206539,0xf3bce751,0xf6d595d5,0x18de38de, 
0x58de59e6,0xbade59de,0x37f5f8dd,0x495aeeaa,0x5ade9ace,0xdade1de7,0x54cd95cd,0x2fbb52c4, 
0x72bc6fbb,0x59e676d5,0x79d6bae6,0x39de39d6,0xd7d539de,0xd7ddd7dd,0x96d5b6d5,0xb6d5b6d5, 
0xb7d596d5,0x96d5d6d5,0x18ded6d5,0x39e638e6,0x38de39e6,0x38de39e6,0x38e638e6,0xf7ddf7dd, 
0x96d5b6dd,0x14cd75d5,0xb2bcd2c4,0x0fac50b4,0x8d93aea3,0x0b832c8b,0x686aaa7a,0x4862486a, 
0x07622862,0x6541c651,0x24314439,0x65392331,0xc649c749,0x44398541,0x65418649,0x03314439, 
0x2431e330,0x24312431,0xe328e328,0x44392431,0x65494441,0x85496549,0x44414441,0x04394441, 
0x44394541,0x0421e320,0xe328e420,0x85416539,0x285a4439,0x44418549,0x65414441,0x65414441, 
0x85498549,0xa6518649,0x65416549,0x04318549,0x65396539,0x71ac8541,0xf6d595d5,0x38de38de, 
0x99e659e6,0xdae69ae6,0xd5e418d6,0x70a334ec,0xd7bd929c,0xfbde7def,0x5bdfbade,0xd4d4bad6, 
0xeca28caa,0x11bc6fab,0x5ae676d5,0x39de7ade,0x39de18d6,0x59de17d6,0x18de58de,0x96d5d7d5, 
0x96d596d5,0x96d5b6d5,0xd7dd96d5,0x18def7dd,0x18de18e6,0x18de18de,0xd7dd18de,0x96d5b6dd, 
0x55d595d5,0xd2c413cd,0x50b491bc,0xcea30fac,0x4c938d9b,0xca7a2b83,0x486a8972,0x48622862, 
0xe6592762,0x8541a549,0x24314439,0x65396439,0xe749c641,0x24396541,0x85498649,0x24312439, 
0x04312431,0x24312431,0xe3280329,0x44392431,0x85494441,0x85494441,0x65414441,0x24396541, 
0x45414439,0x0421e320,0xc320e420,0x64416541,0xe7516541,0x24392439,0x44414441,0x85496541, 
0x65416549,0x86496541,0x65416549,0x03318549,0xc7498641,0x8e934439,0xb6d595d5,0x59de37de, 
0xb9e659de,0xbadebae6,0xb5d4f9dd,0x78f518f5,0xf7cdf5cc,0xbbe6b9d6,0x1de71ef7,0xd7d55de7, 
0xb3c4d0b3,0x8ea392bc,0x32bced9a,0x38de97dd,0x17d617d6,0x38d638d6,0x59de38d6,0xd6d538de, 
0xb6d5b6d5,0xb6d5b6d5,0x96d596d5,0xd7ddd7dd,0xf7ddf7dd,0xd7ddf7dd,0x96d5b6d5,0x55d575d5, 
0x13cd54d5,0x91bcb2bc,0xefab30b4,0x8d9bcea3,0x0c8b4d93,0xca7a0b83,0x486a896a,0x28624862, 
0xc651075a,0x65418541,0x44312439,0x85398541,0xe749a641,0x65418541,0x8549a649,0x44394439, 
0x24312431,0x24312439,0xe3280431,0x44392431,0x65494441,0xa6492441,0x44414441,0x24396541, 
0x45412439,0xe320e320,0xe328e420,0x24396541,0x44398549,0x44410339,0x44414441,0x85496541, 
0x44416541,0x65492441,0x65498549,0x24396541,0xc751a649,0xaa72e330,0xd6d595d5,0x58de17d6, 
0xbae679e6,0xbade9ae6,0x99edf8dd,0xbcfefafd,0xf6dc3aee,0xb7cd10ac,0x1ddfbfef,0x9ad61de7, 
0xbade59de,0xb7dd17c6,0x4b9a4eab,0x51bc0da3,0xd7dd75d5,0xd7cdd7cd,0xf7d5d6cd,0xd7d5f7d5, 
0xb6d5d7d5,0xb6d596d5,0x75cd96d5,0xb6dd96d5,0xb6ddb6dd,0x96d5b6dd,0x54d575d5,0x34cd54d5, 
0xb2c4f3cc,0x30b471bc,0xcea3efab,0x6d938d9b,0xeb824c8b,0xa972ea7a,0x486a686a,0x275a4862, 
0xa549e751,0x44396541,0x65412439,0xa649a649,0xe7510752,0xc6498541,0x6441a649,0x44394439, 
0x24390431,0x24394439,0xe3280431,0x65414431,0x44414439,0xc6516541,0x44414441,0x24396541, 
0x44392439,0x0421e320,0x0429e320,0x03316539,0x24396541,0x85492439,0x44416541,0x65496541, 
0x24396541,0x65490439,0x8549a649,0x44416541,0xe7518649,0xe7590431,0xf6dd54cd,0x38de17de, 
0xbae679e6,0xbae6bae6,0xfaf519de,0xfdee5cfe,0x3bfe5eff,0xb5cc12cc,0xbee73ce7,0xfbde3def, 
0x1cdf5de7,0xf8d5dbde,0xd0bbd0ab,0x6ea311c4,0xd0b32d9b,0x55cdf3c4,0x95d596d5,0x96d595d5, 
0xb6d5b6d5,0x96d5b6d5,0x75d5b6d5,0x75d555cd,0x75d575d5,0x34cd55d5,0x13cd34cd,0xd2c413cd, 
0x50b491bc,0xeeab30b4,0xada3aea3,0x4c936c9b,0xea822b8b,0x8972ca7a,0x486a486a,0xe7512862, 
0x8541c649,0x24396441,0xc6496541,0xe751c751,0xe751495a,0x85414439,0x44396541,0x24314439, 
0x2439e328,0x24392439,0xe3280431,0x65412431,0x24394439,0xa649a649,0x65412441,0x24394441, 
0x65414439,0x4531e320,0x0429e320,0x24396539,0x24394439,0x85494441,0x65416541,0x65416541, 
0x03396541,0x86492439,0x65418549,0x44414441,0x49626549,0x65496539,0xd6d591b4,0x58de38de, 
0x9ade9ae6,0x99dedade,0x1aeebbee,0x7cf63bee,0x9ef7fdf6,0x75ec7cfe,0x75cd93d4,0x1cdf97cd, 
0xfde69fef,0x39d63def,0x54c514b5,0x50ac74cd,0x4ea3ec8a,0x30b4aea3,0xb3c492bc,0xf3c4d3c4, 
0x96d514c5,0x95cdb6d5,0x95d5d6d5,0x75d554cd,0x34cd55cd,0x13cd34cd,0xd2c4f3cc,0x70b491bc, 
0x2fb450b4,0xaea30fac,0xada38da3,0x4c8b6c9b,0xea822b8b,0x8972ca7a,0x2862486a,0xc651075a, 
0x8539a541,0x65414439,0xe751a649,0x0752e751,0xa649285a,0x65396439,0x85416541,0x44314439, 
0x24310431,0x24390431,0xe3282431,0x45390431,0x24394439,0x8549a649,0x65412439,0xe3302439, 
0x65414439,0x4531e420,0xe3200429,0x24314431,0x45392439,0x65414441,0x65418549,0x65416541, 
0x23394439,0x86492439,0x4441a649,0x44416541,0xaa6ac751,0xe328c649,0xd7e5f093,0x58de17de, 
0xb9e69ae6,0xdbde9be6,0x7beefbde,0xbafdd9fd,0x5eef7cf6,0x5cfe3fff,0x90dbb5f4,0xf0abedb2, 
0x7de779de,0xd6bd1ae7,0x97c55ade,0x50ac34c5,0xf3cc30ac,0x2c8bb2bc,0x8ea3eb8a,0xcfab6ea3, 
0xd3cc71bc,0xb6d534c5,0x75cdb6d5,0x35cd75cd,0xf4cc34cd,0x92c4d2c4,0x71bc91bc,0x0fac50b4, 
0xeeabefab,0x8da3ada3,0x8d9b8da3,0x2b8b6c93,0xca7aea82,0x486a8972,0x075a486a,0xa549e651, 
0x65398541,0xc6518541,0x075ac659,0x2852085a,0x085a0852,0x4439a641,0xa6496541,0x24312439, 
0x24310431,0x24390331,0xc3284539,0x65412431,0x24394439,0x4441c649,0x45414441,0x24314439, 
0x65414439,0x2531e320,0xe320e428,0x24394431,0x45390431,0x6541c651,0x85496549,0x65418549, 
0x44392439,0x45416541,0xc651a651,0x2441a649,0xab72e751,0xe320a649,0xd7dd0c7b,0x59de17de, 
0xbae679e6,0xfbe6dbe6,0xdbee1be7,0x78ed1af6,0xfbf579f5,0xfdfebdf6,0x3af67bee,0x33d458f5, 
0x53c412c4,0x2e936eab,0x96c515bd,0x6d9351ac,0xd3c4b2bc,0x2d9371b4,0x8e9b8ea3,0x696a496a, 
0xcfa32c8b,0x96d534cd,0x75cd95d5,0x55cd95d5,0xf4cc34cd,0x71bcb2c4,0x30b450b4,0xefab0fac, 
0xcea3eeab,0x8da3ada3,0x8d9b8d9b,0x0b8b4c93,0xa97aea82,0x486a686a,0x075a4862,0xa541c649, 
0x44396441,0x48628549,0x28624862,0x495a4962,0xc7512852,0x65418541,0x65416541,0x24392439, 
0x24310431,0x24392439,0x04312431,0x24394539,0xa6492439,0x6541a549,0x44396541,0xe3302439, 
0x85494439,0x0429e320,0xe320e428,0x45394431,0x65390439,0xa649c651,0x44418549,0x65416541, 
0x65412439,0xc7518649,0xa649075a,0x8649a649,0x8a6a285a,0xc320a649,0xb7d50852,0x79de17de, 
0xfbe69ae6,0x1be7fbee,0x1be73be7,0xb9e59ae6,0x19fd38f5,0x5cf6baf5,0x7cee9df6,0xfafd3bf6, 
0x54e458fd,0x70bbb1cb,0x2eab2eab,0x8661ab8a,0x92b40c83,0x85498962,0xab724d83,0x23292431, 
0x0b7be330,0x96d555cd,0x95cd75cd,0x75d5b6d5,0xf4cc34cd,0x71bcb2c4,0x0fb430b4,0xeeabefab, 
0xaea3cea3,0xada3ada3,0x8d9b8d9b,0x0b834c93,0xa972ca7a,0x2762686a,0xe651075a,0x44398541, 
0x85414439,0x8a722862,0x8a728a72,0x6962cb6a,0xa7490852,0x6539a541,0x65414539,0x24390431, 
0x24312431,0x24390331,0x24394439,0x24392439,0xe751a649,0x65416541,0x45416541,0xe3304439, 
0xa6494439,0x0429e320,0xe3200429,0x86414531,0x65392439,0x8549c651,0x65418549,0x44414439, 
0xc6512439,0x2862285a,0xc6516962,0x8649c651,0x8a6a285a,0xe328a549,0x35c52531,0x59de38de, 
0x1befdae6,0x3cef1cef,0x3ce73cef,0x59defbe6,0xf6e477e5,0xf8f477f4,0x99ed79fd,0x99ed78e5, 
0x9afddafd,0xf7fc37fd,0xb2e314f4,0xeda2b1db,0x296a0a7a,0xc3284431,0xe4302439,0x0331e328, 
0x51a4a649,0x75d575d5,0xb6d575cd,0x95d5b6d5,0x14cd55d5,0x71bcb2c4,0x2fb450b4,0xeeab0fac, 
0xaea3cea3,0x8da3cda3,0x8d9b8d9b,0xea824c93,0x8972c97a,0x2762686a,0xa549e759,0x44396439, 
0xc6498541,0x6541a649,0xa7496541,0x495a285a,0xc749495a,0x24318541,0x86414439,0x24390431, 
0x03312439,0x24394439,0x04312439,0xa6492439,0x6541c651,0x65418541,0x45416541,0x03312439, 
0x85494439,0x2529e320,0x03214531,0x86414431,0x24390431,0x4441a651,0x65418549,0x44410331, 
0x075aa649,0x085a696a,0xe7594962,0xc751a651,0x6a6a8a6a,0xe3286541,0x71a4e420,0x59de58e6, 
0x3cef1ce7,0x7ef75df7,0xfbe63df7,0x59debade,0x76d5f7dd,0x13d494dc,0xd6f454e4,0x96e4b6ec, 
0xf7ecb6e4,0x54ec96f4,0xf3e354ec,0x55f4f3eb,0xb1bb13dc,0xcc8a2ea3,0x6a72096a,0x8f9bab7a, 
0x18e655cd,0x75cd96d5,0xd6d596d5,0x75d5b6d5,0xf3c455d5,0x30b491bc,0xefabefab,0xcea3efab, 
0xcea3cea3,0x8da3aea3,0x6c9b8d9b,0xea822b8b,0x896aa972,0x075a4862,0x6441c649,0x85394439, 
0x24316539,0xc2180321,0xc320e320,0x8a62c749,0x2531495a,0xe3280329,0xa6496539,0x24392439, 
0x24312439,0x24394439,0x24394439,0xc6494539,0x24398549,0x6541a649,0x44398549,0x03310331, 
0x65414439,0x45310421,0x03218639,0x65390329,0x24312439,0xc6516549,0x4439a549,0xa6492439, 
0x075ac651,0x2862e759,0xa6514862,0xaa72a651,0x28622c83,0x04314439,0x6d7be420,0x9ae679e6, 
0x7df77def,0x9ef79ef7,0xfcee5ef7,0x58e69aee,0x17de17de,0xf3d4b5d5,0x34dc73dc,0x35e4f4db, 
0xf3db55e4,0xf3d314dc,0xb2d3f2d3,0x72d392d3,0xf3db91d3,0xb4dc54dc,0xf4c4b4c4,0xf8e556d5, 
0x38d638e6,0xb6d5d7dd,0xf7ddf7dd,0x75d5b6d5,0xb2c434cd,0xefab50b4,0xefabcea3,0xefab0fac, 
0xceabeeab,0xada3cea3,0x4c938d9b,0xea7a0b8b,0x686aa972,0xa649075a,0x65398541,0x24314531, 
0xc320e320,0x0319e318,0xe3200421,0x0c734952,0xe3282952,0x2431c328,0x65416541,0x45392439, 
0x24392439,0x65392439,0x24396541,0x85414539,0xa6494441,0x6541a549,0x4439c651,0x2431e330, 
0x65416439,0x45310421,0xe3208639,0x8641e320,0x24316541,0x075ac651,0x64418541,0xa6498541, 
0x08628649,0x4962085a,0x4862896a,0x0c7b4862,0xc7510b7b,0x24312439,0x895ae420,0xfbee58e6, 
0x9df79ef7,0x7df77def,0x7ef79ef7,0xbae63cf7,0xf7dd58de,0x17deb5d5,0xd4ccb6d5,0x12d453d4, 
0x53d4f2d3,0x12cc33cc,0xb1cbd1cb,0x91c3b2cb,0xb0c3b1c3,0x93c4f1bb,0x18de76cd,0x79de59de, 
0x17ce58d6,0xf7d5f7d5,0xd6d5f7dd,0x54cd95d5,0x51bcd3c4,0xefab0fac,0x50b40fac,0x0fb450b4, 
0xceabefab,0xada3cea3,0x2b8b6d9b,0xaa7aea82,0x2762686a,0x8541e751,0x65396539,0xe3202429, 
0xe420c318,0x0419e318,0x0421e318,0xab626a5a,0xe3200852,0x65390429,0x45396539,0x65392439, 
0x44392439,0x85418541,0x24394439,0x85414439,0xa6496541,0x85498541,0x4439c651,0x24390331, 
0x65416541,0x2529c318,0xe3206531,0xa649e320,0xe3308641,0xe751e751,0x65418549,0xc6514439, 
0x0862085a,0x696a496a,0xaa72ca72,0xaa72e759,0xc751cb7a,0x45312439,0xc641e318,0x1cf717de, 
0x9df77def,0x9df79df7,0xbef79df7,0xbeefdef7,0x59e6fbee,0xf8dd39de,0xb6d5d6d5,0x35d595d5, 
0x74ccf4d4,0x32cc33dc,0xf1bb32c4,0xd1bbb1bb,0x30bc31c4,0x56cdd4c4,0x79def8dd,0x58de59de, 
0xf7d518de,0xf7d5d6d5,0x95cdd6d5,0x14cd75cd,0x10b491bc,0x0facefab,0x91bc50bc,0x30b471bc, 
0xeeabefab,0x8d9baea3,0xeb8a4c93,0x8972a97a,0xe6594862,0x65418649,0x03294539,0xe318c320, 
0xe418e418,0xe420e420,0x2429e318,0x695a4952,0xe3202952,0x45390431,0x65416541,0x44392439, 
0x65392439,0x4439a649,0x65412431,0x85414439,0xc651c651,0xc651a549,0x2439a649,0x2431e330, 
0x65416541,0xc320e318,0x24294531,0x86496639,0x2329a649,0x285ac651,0xe3306541,0x2862e751, 
0x075aa651,0x896a2862,0x696a2c83,0xca724862,0xe759496a,0x03212441,0xe328e318,0x3cff75c5, 
0x9ef75cef,0x9ef77ef7,0x9ef79ef7,0xdfff9ef7,0x3defbfff,0x59de9ae6,0x38de59de,0xd6d5d6d5, 
0x95cdd6d5,0x34cd55cd,0xd3c4f3c4,0xf3c4d3c4,0x34c514c5,0x38d6b6cd,0x58de58de,0x18de38de, 
0xd7d5f7dd,0x96d596d5,0x55d575d5,0xb2bc13cd,0x30b450b4,0x92bc30ac,0x92c4b2c4,0x30b451bc, 
0xaea30fac,0x4c938d9b,0xca7a0b8b,0x48626972,0xa649075a,0x4431a541,0xe3180329,0xe418e418, 
0xe318e318,0xe318e318,0x4531e318,0x6a5a495a,0x03292852,0x45394539,0x65418541,0x44390431, 
0x85412439,0x2439a649,0x85412439,0xa6496541,0xc751e759,0xc7518649,0x6539e751,0x2431e328, 
0x65416441,0xe420e318,0xe3202529,0x085ac741,0x4439e751,0x075a8549,0x075a6962,0xc6516541, 
0x28624862,0x0c838972,0xca722c83,0x696aca72,0xe7592862,0xe3282439,0xe3202421,0x1cff109c, 
0x7def5cf7,0x9ef77ef7,0x7ef77ef7,0x9ef77ef7,0xdfffbfff,0xfbe69ef7,0x59de79de,0x18de38de, 
0xb6d5f7dd,0x75d596d5,0x34cd55d5,0x34cd14cd,0x96d575cd,0x38def7d5,0x38de38de,0xf7d518de, 
0x95cdd6d5,0x55cd55cd,0x14cd34cd,0x71b4d2c4,0x50b450b4,0xd2c492bc,0x71bcb2c4,0x0fac30b4, 
0x8d9bcea3,0x0b8b2c93,0x8972ea82,0x075a486a,0x8541c651,0x23294439,0xe318e320,0xe318e418, 
0xe318e318,0xe418e318,0x2531e418,0x8a62495a,0xe320084a,0x86418539,0x24396539,0x65410431, 
0xa6496541,0x45416541,0x85414541,0xc6516541,0xa649c751,0xc7518651,0x2439e751,0x2431e328, 
0x85494439,0x0429c318,0xc3184529,0xaa6a2431,0xa549eb7a,0xeb726549,0x6541aa6a,0x48622439, 
0xaa72ca72,0x4c8bcb7a,0xcb7a2c8b,0x696a696a,0x2862cb7a,0xe3284439,0xe3202429,0xbbf66962, 
0x5df7fbee,0x9ef75def,0x9ef77df7,0x9ef79ef7,0x9ff77ef7,0x9ef7bef7,0xdbe65def,0x39de79e6, 
0xd7dd18de,0xb6d5b6d5,0x96d596d5,0x95cd76cd,0xf7d5d6d5,0x38de38de,0x17d618d6,0xb6d5f7d5, 
0x54cd95cd,0x14c534cd,0xd3c4f3c4,0x50b492bc,0x91bc70b4,0xd2bcd2c4,0x30ac91bc,0xaea3eea3, 
0x4c938d9b,0xea820b8b,0x486aa972,0xa6510762,0x64398541,0xe3200329,0xe318e318,0xe418e418, 
0xe318e318,0xe318e318,0x6639e420,0x8a628a62,0x0429a641,0x65398641,0x24314439,0x85410431, 
0x65416541,0x85416541,0x65414541,0xc7518649,0xa651a651,0x085a085a,0x0431c751,0x44390331, 
0x65414439,0xc3200429,0x24212429,0x696ae328,0xeb7aef9b,0x896a4862,0x8549e751,0x2862c651, 
0x6d8b896a,0xcb7a0c83,0x4d8b0c83,0xeb82eb82,0x2862cb7a,0xc3202431,0xe320e328,0x55c52431, 
0x1befdbf6,0x5df73cef,0x5def5def,0x9ef79ef7,0x7eef9ef7,0xbff79eef,0x3defbef7,0x9ae6dbee, 
0x19de5ae6,0xf7d518de,0xd7d5d7d5,0x17d6d7d5,0x38de37d6,0x18de38de,0xd7d5f7d5,0x75cdb6d5, 
0x33c554cd,0xf3c414c5,0xb2bcd3bc,0x50b471b4,0x91bc71bc,0x50b491bc,0xcea30fac,0x6c938d9b, 
0x0b8b2c8b,0xa972ea82,0x075a686a,0x8549a651,0x24316539,0xe318e320,0xe418e318,0xe318e418, 
0xe318e318,0xe318e318,0x8639e418,0x695acb6a,0x2429a641,0x86418641,0x65414539,0x85416541, 
0x65416541,0x8541a649,0x65412439,0xc651a649,0xc751a649,0x49622962,0x2431285a,0x0431e328, 
0xa6492439,0x66396531,0x8631e741,0x4d8bc649,0x0c83f3c4,0xa6492339,0x8549a649,0x696a2862, 
0xaf9b8a72,0x2d8bcf9b,0x8e9b2d8b,0xaf9baf9b,0x696a8a72,0x03296539,0xe3280431,0xeb720321, 
0xdaee9af6,0x1ceffbee,0x1cef1cef,0x5def3cef,0x7df77df7,0x7ef79ef7,0x7ef77ef7,0xfcee5df7, 
0x9ae69ae6,0x59de79e6,0x18d638de,0x58de38de,0x58de58de,0xf7d518d6,0x96d5b6d5,0x54cd75cd, 
0x13c513cd,0xb2bcd3c4,0x71b492bc,0x50b450b4,0x50b450b4,0xeeab2fb4,0x8d9baea3,0x0b8b4c93, 
0xca7aea82,0x4862a972,0xa649075a,0x45396541,0x03214431,0xe318e318,0xe318e318,0xe318e318, 
0xe318e318,0xe3180421,0x2531c318,0x295acb62,0x0329c749,0xc749a641,0x65418541,0x85416541, 
0xa6494439,0x6541c651,0xa6494439,0xe751e751,0x4862e759,0x6a6a696a,0x4539495a,0x0431e328, 
0xa6494439,0x04292429,0x6952a639,0x10a4495a,0x0c83f4c4,0x64412339,0xc651e651,0xeb822862, 
0x6d934d93,0x4d93efa3,0xaf9b8f9b,0xf0a3f0a3,0x896a8a72,0xe3204539,0xe3280431,0x0431e318, 
0xb9ee51ac,0xbaee9aee,0xdbeebaee,0xdbe6dbee,0x3ceffcee,0x5df73cef,0x7df77ef7,0xfbe63def, 
0xbae6bbe6,0x9ae69ae6,0x79de9ae6,0x79de79e6,0x38d658de,0x96cdf7d5,0x54cd75cd,0x34cd54cd, 
0xf3c413c5,0x92bcb2c4,0x30ac71b4,0x0fac0fac,0xcea30fac,0x6d9baea3,0x2c934c9b,0xca820b8b, 
0x8972aa7a,0xe7594862,0x6541a649,0x24312439,0xe3182429,0xe318e318,0xe318e318,0xe318e318, 
0xe318e318,0xe318e318,0x6631e418,0x0852ab62,0x0429e749,0xc749e751,0x6541a649,0x85412439, 
0x8541a641,0x6541c651,0xc6496541,0xe759a649,0x696a4962,0x8a6aab72,0x45390852,0x2431e328, 
0x65412439,0xe3200421,0xca62a641,0x10ac6962,0x8e9392bc,0xc651a549,0xa651a551,0x2c8beb7a, 
0x2c8b6d93,0xec82ae9b,0xb0a38e9b,0x4d8bf0a3,0x2862eb7a,0x0329e428,0x2429e328,0xe320e428, 
0x34cd0752,0x38e618e6,0x59e638e6,0x7ae679e6,0xdbeebae6,0x3ceffbee,0x3cef5df7,0xfcee1cef, 
0x79dedbe6,0xbae6bae6,0xbae6bae6,0x59de99de,0xf7d517d6,0x54cd95d5,0x34cd34cd,0x13c513cd, 
0xb2bcd2c4,0x30b471b4,0xcea30fac,0xada3ada3,0x4c938d9b,0x0b8b4c93,0xeb820b8b,0x8972aa7a, 
0x2862696a,0xa649e751,0x65396541,0x25314539,0xe3180421,0xe318e318,0xe318e318,0xe318e318, 
0xe418e318,0xe318c318,0xa741e420,0x495a8b62,0x24310852,0xc749e751,0x6541c749,0xc6490431, 
0x6541a649,0x6541a649,0xa6498549,0xc7516541,0x28622862,0xcb72ab72,0x4539e751,0x2431e328, 
0x65410431,0x25294529,0x485a0852,0x72bc2c83,0x4d8b51b4,0x8449e651,0x8972a551,0xcb82ae93, 
0x0c8b2c8b,0x4d8b6d93,0x8f9bd0a3,0x2d8b11ac,0x24398e8b,0x2539e328,0x2429e320,0x0421c428, 
0x4872e320,0xb6dd34cd,0xd7ddd7dd,0x18def8dd,0x59e638de,0xfbeefae6,0x1cef1cef,0xdbeefbee, 
0xbaeedbee,0x9adebae6,0x59d679de,0x17d638d6,0xd6d5f7d5,0x54cd75cd,0x14cd54cd,0xd2c4f3c4, 
0x50ac91b4,0xaea30fac,0x8d9b8d9b,0x4c9b6c93,0x2c934c93,0xeb820b8b,0xaa7aca82,0x28626972, 
0xe651075a,0x85418549,0x44394439,0x24296539,0xe418e318,0xe318e318,0xe318e318,0xe418e318, 
0xe418e418,0xe418e320,0x8739e420,0xec724a5a,0x2431695a,0x08528641,0x2439c749,0xa6494539, 
0x85414439,0x6541a649,0xc751a649,0x085aa649,0x2862696a,0xcb72ab72,0x2531a649,0x4539e328, 
0x65410431,0x85390321,0xec7a485a,0x51b492b4,0x4c93cea3,0x03390752,0x8d93c659,0xeb82eb82, 
0x4d938e9b,0x6e934d8b,0x8e93f0a3,0xd0a36e93,0xe320696a,0x04314439,0xc3282431,0x2431c328, 
0x0329e328,0xb2c4ca7a,0x54dd54dd,0xb6dd95dd,0xf8ddd7d5,0x9ae659de,0xdbeebbee,0xbbe6dbee, 
0x9beebbee,0x59de9ae6,0x17de38de,0xb6d5f7d5,0x75d595cd,0x13c533cd,0xd2c4f2c4,0x30b491bc, 
0x8d9beeab,0x4c9b6d9b,0x0b8b2c93,0x0b8b0b8b,0xaa82eb82,0x897aca82,0x486a6872,0xe6512762, 
0x8541c649,0x64418439,0x65394441,0xe3204531,0xe420e318,0xe318e318,0xe318e318,0xe318e318, 
0xe318e318,0xe418e418,0x6639e320,0x8a62495a,0x4531495a,0x28528641,0x2439a649,0xa6498541, 
0x85410439,0x6549c649,0xc649a651,0xaa726541,0x49622862,0x8a6aeb7a,0xe3286539,0x24390431, 
0x24312439,0x074ac641,0x10a4295a,0x8e9b51ac,0x0c8b4d93,0x2441275a,0xeb7a896a,0x2d8baa7a, 
0x0c8b2d8b,0x2d8bec82,0x4e934d93,0x0c834d93,0x44392439,0x24314539,0xe428e328,0x04312531, 
0x24312431,0xa97a2341,0xd2c4efab,0x34cd13cd,0x96d575d5,0xf8ddd7d5,0x59de18de,0x9ae679e6, 
0x9ae69ae6,0x18de59e6,0xd6d5d7d5,0x55cd96d5,0xf3c413c5,0xb1bcb1bc,0x50b491bc,0xad9befa3, 
0x2c936d9b,0x2c932c93,0xea820b8b,0xaa7aca82,0x8972897a,0x486a6872,0x065a276a,0x8549c651, 
0x85418549,0x64418541,0x65396541,0xe3182429,0xe418e318,0xe318e318,0xe318e318,0xe318e318, 
0xe318e318,0xe418e318,0x6639e320,0x6a62295a,0x4431695a,0x0852495a,0x6539a649,0xc6498541, 
0x65414439,0xc651c649,0x6541c651,0x696a0439,0x4962496a,0x6962eb7a,0xe3284431,0x45392431, 
0x24312431,0xe7510852,0xf4c4cf93,0x0c8bf0a3,0xae9b0c8b,0xc659696a,0xaa72aa72,0xaa7a8972, 
0x8a7a6d93,0xaf9bec82,0x8f9b10a4,0xe7518e9b,0xa6514439,0x04318541,0x6639e328,0xe3284531, 
0x64394431,0x8549a549,0x0b8be661,0x71bceea3,0x14cdd3c4,0x96d555d5,0xf7ddb6dd,0x18de18de, 
0xf7d518de,0x95d5d6dd,0x34cd54cd,0xd2bc13c5,0x71b491bc,0xefa30fac,0xae9beea3,0x2c8b6c93, 
0xeb822b8b,0xca82ca82,0xa97aa97a,0x6872897a,0x486a486a,0x07622762,0xc551e659,0x8549a551, 
0x85498549,0x85418541,0x44318541,0xe318e320,0xe318e318,0xe318e318,0xe318e318,0xe318e318, 
0xe318e318,0xe3180421,0x6639e420,0x49620852,0xc741aa62,0xe7510852,0x85410752,0x85414439, 
0xa6496541,0xc651c649,0x4439c651,0x49620331,0xec7acb7a,0x49620c83,0xe3280331,0x45392431, 
0x04312431,0x8e8bc749,0xb3bc96d5,0xab7a6e9b,0xf0a34d93,0xaa72cb7a,0x8a72696a,0x0c834862, 
0xeb824d93,0x31ac8f9b,0x8e9b11b4,0x6441696a,0xa6518541,0xe3284439,0x65390429,0xc3200429, 
0x85412331,0xc651e751,0x85598551,0xeb82076a,0x10b48d9b,0xd3c471bc,0x34cd14cd,0x34cd54cd, 
0x34cd54cd,0xb2c4f3cc,0x91bc91bc,0x30ac71b4,0xcea30fa4,0x4c936d9b,0x0b8b4c8b,0xea82ea82, 
0xa97aea82,0x68728972,0x486a486a,0x286a486a,0xe7610762,0xc651e659,0xa549a551,0xa651a551, 
0xa649a549,0x8541a549,0x04296539,0xe318c318,0xe318e318,0xe318e318,0xe318e318,0xe318e318, 
0xe318e318,0xe318e418,0x66392429,0x8b6a495a,0x0852ec72,0x2852a641,0x65410852,0x65414439, 
0xa6496541,0x075ac651,0x2439e751,0x8a6a0331,0x0c7b6e93,0x285aec7a,0x0329e328,0x65392431, 
0x03312439,0x56cd8f93,0x4d9372b4,0x2d932c8b,0x10a410ac,0xcb7a6d93,0xeb7a2c83,0x8a72aa72, 
0x6e93ab7a,0xafa3f0a3,0xab7a4e9b,0xa6496549,0x85498549,0x4531e328,0xe4284531,0xe328e320, 
0xa5412331,0x075ac651,0xe6610762,0xc559a559,0x897ae661,0xada32c93,0x50bc0fac,0x30bc50bc, 
0x30bc50bc,0x0fb40fb4,0xefabefab,0x8d9bcea3,0x2b8b4c93,0xeb820b8b,0xa97aca82,0xa972897a, 
0x486a8972,0x476a486a,0x07622762,0x07620762,0xc659e659,0xc651c651,0xc551c551,0xa651c651, 
0xa651a649,0x85418549,0xe3204431,0x0421e318,0xe318e318,0xe318e318,0xe318e318,0xe318e318, 
0xe318e318,0x0421e318,0x04292529,0xcc72495a,0xc7490d7b,0x695a8641,0x6541e751,0x65414439, 
0xa6498541,0xe759e751,0xe330a649,0x8a6ae330,0xab726e93,0xab6a2d8b,0xe328e328,0x65390429, 
0x04314539,0xf4bc14c5,0x2c8b6e93,0x8e9b2c8b,0xf0a331b4,0x4d8bcb82,0x896a4c83,0x8972696a, 
0xafa3ec82,0x2d93ae9b,0x86498a7a,0xa651a649,0x03318649,0x65392431,0xe3280429,0xe328e320, 
0xc6496439,0xe761c651,0x486a276a,0x27620762,0xc6590762,0x6972076a,0x2c93ca8a,0x6da36d9b, 
0x8da38dab,0x8da38da3,0x6c9b8d9b,0xea8a2b93,0xca82ca82,0x6972897a,0x486a6872,0x486a486a, 
0x276a476a,0x27622762,0x07622762,0xe661e661,0xc659e659,0xe659e659,0x065a065a,0xc651e659, 
0xa651c651,0x65418549,0xe3182429,0xe420e318,0xe318c318,0xe318e318,0xe318e318,0xe318e318, 
0xe318e318,0x0421e318,0xe4282429,0xab6a495a,0xe851ec72,0x6962a649,0xa649c749,0x65414439, 
0xa6498541,0xc7510752,0x03318649,0x6a6a0431,0xcb7a4d8b,0x2c7b4d8b,0xe3200431,0x4539e328, 
0x04314539,0xf09b14c5,0x4d8b6d93,0xae9b4c93,0x2d8b10ac,0x6d8b8e93,0x8549896a,0xeb7aaa6a, 
0x30b4af9b,0x4d936d9b,0x85492862,0x86498649,0xe3306541,0xe3284539,0x0429e320,0xc328c320, 
0xa5496441,0x0662075a,0x8972276a,0x065a2762,0x686a4762,0x276a0662,0x687a4872,0xca8a8982, 
0x0b930b8b,0xea8aea8a,0xa982ca82,0x6872897a,0x48724872,0x276a486a,0x276a276a,0x2762276a, 
0x476a276a,0x27622762,0x07620762,0xe7610762,0x07620762,0x06620762,0x065a0662,0xe659075a, 
0x8549c651,0x44318549,0xe3180321,0xe4180419,0xe318e320,0xe318e318,0xe318e318,0xe318e318, 
0xe318e318,0xe318e318,0x24292429,0x4a628a62,0x8b62cc72,0x695ae749,0xa6498541,0x85416541, 
0x45414439,0xe759c751,0x0329c749,0xcb722431,0xec7a4e93,0x0c7bab7a,0xe320e328,0x45390429, 
0xe3302439,0x2c8310a4,0x6d8bce9b,0xefa36d93,0x6e9b6d93,0x696acf9b,0xe7514541,0xcb7a075a, 
0xafa392bc,0xca7a2d9b,0xe759c649,0x86494541,0x24392431,0xe3280431,0xe3200429,0x4439e320, 
0xc6516441,0x2762e659,0xa972276a,0x2762686a,0x686a486a,0x686a2762,0x89726872,0xa97a897a, 
0xc97aca7a,0xa982a982,0xa982a982,0x897aa97a,0x8972897a,0x68728972,0x6872686a,0x486a6872, 
0x6872486a,0x2762486a,0x27620762,0x0762276a,0x276a0762,0x0762276a,0x07620762,0xe659075a, 
0xa649c651,0x23296541,0x0319e218,0xc3180419,0xe320e320,0xe318e318,0xe318e318,0xe318e318, 
0xe318e318,0xe3180421,0x04292421,0x4a626a62,0xec72ec72,0x495a8641,0xa6498541,0x86494439, 
0xa6492439,0xa649c649,0xe3286541,0xcb7a6539,0x0d832d8b,0x2d83cb7a,0xe320e328,0x45390429, 
0x03314439,0xcfa3cf9b,0x6d936e9b,0x2c836d93,0x11b46d93,0x0331aa6a,0x07522331,0xefa3075a, 
0x0d93cfab,0xe7592c8b,0xc651c659,0x65398541,0x24312431,0x0429e328,0xe3200429,0x4439e328, 
0xe6598549,0x0662e659,0x0b83686a,0x2762aa7a,0x6872476a,0x686a8972,0xa97a8972,0xca82a97a, 
0xca8aca8a,0xea8a0a8b,0xea82ea82,0xca82ca82,0xaa82aa82,0x897aa97a,0x8972897a,0x68726872, 
0x48726872,0x486a276a,0x476a486a,0x476a476a,0x276a476a,0x476a286a,0x075a2762,0xc659075a, 
0x8541a651,0x03214531,0xe318e318,0xe318e318,0xe420e420,0xe318e318,0xe318e318,0xe318e318, 
0x0421e318,0xe420e418,0x0431e320,0x6a622952,0xec72cc72,0xe7494539,0xa6490752,0x65416541, 
0xc6496541,0x85418541,0x04314439,0x8a6a8641,0x0d83ab72,0xaf932e93,0xe320e428,0x65392429, 
0x03314439,0x2d8b8e93,0x2c8b0c8b,0x2c8b8a7a,0x696acf9b,0x0331e330,0x075ac649,0x51b4ae9b, 
0xec8a6d9b,0xe7616972,0x6541c659,0x65416541,0x0431e328,0x0429e328,0xe3200329,0x64390429, 
0x065a8549,0x2762065a,0x2b83486a,0x486a2b83,0x6872476a,0x6872a972,0xa97a8972,0xca82a982, 
0xeb8aca82,0xea8aea8a,0xea8aea8a,0xea82ea8a,0xaa7aca82,0xa97aaa7a,0x897a897a,0x68726972, 
0x48726872,0x686a686a,0x486a686a,0x486a486a,0x276a476a,0x486a486a,0x07620762,0xc659075a, 
0x8541a651,0xe3202429,0xe318e318,0xe318e318,0xe318e418,0xe318e318,0xe318e318,0xe318e318, 
0xe318e318,0x0421c318,0x45390429,0x495a0852,0x0d7bec72,0xe751a649,0xa649285a,0x44394439, 
0x85416541,0xc6494541,0xe3302439,0x8a6aa649,0x4e8b0d83,0x8f8b4e93,0x04292431,0x24390329, 
0x24394539,0x0b838a7a,0xaa7aeb7a,0xafa36d9b,0xe330696a,0xe7510331,0xcfa3eb7a,0x10b430b4, 
0xaa724d93,0x28620762,0x65416549,0x04318541,0x0429e328,0x04290329,0xe328e328,0x85414431, 
0x2762a549,0x47622762,0x2b83276a,0x6872ae9b,0x6872276a,0x8972a97a,0xa97a8972,0xca82ca82, 
0x0b93ca82,0xea8aea8a,0xea8aea8a,0xea82ea8a,0xca82ca82,0xa97aca7a,0x897aa97a,0x68726972, 
0x68726872,0x88728872,0x686a6872,0x686a686a,0x486a486a,0x276a486a,0x07622762,0xc651e659, 
0x6541a649,0xe3200421,0xe318e318,0xe318e318,0xe318e418,0xe318e318,0xe318e318,0xe318e318, 
0xe318e318,0x0421e318,0x24316531,0x4962e749,0xcc72ab72,0xc749e749,0x8649285a,0x65414441, 
0x8541a649,0xc7496541,0x04312439,0x4962085a,0x4e8bcc7a,0x6e8bcc7a,0xe320a641,0x44310429, 
0x24394539,0xaa7acb82,0x4d936972,0xe861cf9b,0x8641c330,0x0c83896a,0xafa36d93,0x6ea330bc, 
0x69726a7a,0xe7592862,0x85414441,0xe3286539,0x04292431,0xe3280429,0x2429e328,0x85416539, 
0x4762c551,0x476a476a,0x0b83276a,0xca7a0fa4,0x88722762,0x897aa97a,0xa97a8972,0xea82ca82, 
0x0b8bea8a,0x0a8b0b8b,0xca82ea8a,0xea82ca82,0xca82ea82,0xa97aa97a,0x897a897a,0x89728972, 
0x69728972,0x89728972,0x68728972,0x68726872,0x686a6872,0x0762286a,0x065a2762,0xa651c659, 
0x44398541,0xe320e320,0xe318e318,0xe318e318,0xe318e318,0xe318e318,0xe318e318,0xe318e318, 
0xe320e318,0x2429e318,0x04296531,0x8a62c749,0x8b6aab6a,0xa6490852,0xa649495a,0x85416541, 
0x6541a649,0xa6498541,0x04314539,0xe851295a,0x4e8b4a6a,0x4d836a6a,0xc2202852,0x65394531, 
0x45392431,0x8a7a897a,0x8d93ae9b,0xe330a649,0xcb7a2862,0xcb820c8b,0xcfa3aa7a,0xab8210ac, 
0x496a4972,0x6541075a,0x44396541,0x04310431,0xe3280431,0xe328e328,0x44390431,0x85418541, 
0x4762c651,0x476a686a,0xeb82486a,0x2c8b2fac,0x8872276a,0xca7aca7a,0x897a897a,0xeb8aca82, 
0x0b8beb8a,0x0b8b0b8b,0xea8a0b8b,0xea82ea8a,0xa97aca82,0xa97aa97a,0x897a897a,0x897a897a, 
0x897a897a,0x89728972,0x89728972,0x89728972,0x68728872,0x0762286a,0xe6590762,0xa651c651, 
0x04296539,0xe318c318,0xe318e318,0xe318e318,0xe318e318,0xe318e318,0xe318e318,0xe318e318, 
0xe318e318,0x8531e318,0x24314531,0x49620852,0xcc7aec7a,0x6541285a,0xc651495a,0xa649a649, 
0x44398541,0xc6498541,0x04314539,0x8649285a,0x8f8b6a6a,0xcb720c7b,0xc3288a62,0x44314531, 
0x45392431,0x6d936972,0x86512c8b,0xaa6aa549,0x4d93eb7a,0x8a7aeb8a,0x50acce9b,0x4972aa7a, 
0x086aaa7a,0x2439a649,0x65394439,0x04292431,0xe328e328,0xe3280429,0x65412431,0xa5498541, 
0x4762c651,0x486a8972,0xea82686a,0xad9b0fa4,0x68728872,0xea82ea82,0x897aa97a,0xeb8aca82, 
0x0b8b0b8b,0x0b8b0b8b,0x0b8b0b8b,0xea82eb8a,0xca82ca82,0xa97aa97a,0x897a897a,0x897a897a, 
0x897a897a,0x897a897a,0x8972897a,0x89728972,0x686a6872,0x2762486a,0xe659065a,0xa649c651, 
0xe3204531,0xe318e318,0xe318e318,0xe318e318,0xe318e318,0xe318e318,0xe318e318,0xe318e420, 
0xe318c318,0x45292429,0x86394431,0x085a495a,0x4e8bcc7a,0x2539295a,0xc7514962,0xa649a649, 
0x44396541,0xc751c649,0x6539e330,0x66416a62,0x6e8b8a6a,0xec7a6e8b,0x0431ab6a,0x24290329, 
0x45392431,0x89726d93,0x85494441,0xeb7acb7a,0x0c8baa7a,0xcfa38a82,0xca7a30ac,0x6972c761, 
0xe7592c83,0x24394439,0x45392431,0xe3282431,0xe328e328,0x24310431,0x85414539,0xa651a549, 
0x4862e659,0x8872c97a,0xca7a6872,0x0fa4efa3,0x6872ea82,0x0b83ea82,0xaa82ea82,0xea82ca82, 
0x0b8b0b8b,0xeb8aeb8a,0x0b8b0b8b,0xea82eb8a,0xea82ea82,0xaa7aca7a,0x897aa97a,0xa97aa97a, 
0x897a897a,0x897a897a,0xa972a97a,0x89728972,0x686a886a,0x2762486a,0xe659075a,0x8541c651, 
0xe3180429,0xe318e318,0xe318e318,0xe318e318,0xe318e318,0xe318e318,0xe318c318,0xe318e320, 
0x0421e318,0xe3204529,0xc7416531,0x085a495a,0x6e938a72,0x25416a62,0xe7516962,0x86494441, 
0x24394439,0xa649e751,0xa649c328,0x8641ab6a,0x4e838a6a,0x0c7b2d83,0xc749ec7a,0x2431e328, 
0x45414439,0x4441e759,0xcb7a2862,0xaa826972,0xaa7acb82,0x10acaea3,0xe761eb82,0x4d8bc661, 
0x6541aa72,0x03312431,0x03294539,0x2431c320,0xe3280429,0x45392431,0x65416539,0xc651a549, 
0x686ae659,0xa97aea82,0xca7a686a,0x50acce9b,0x68726c8b,0x0b8bca82,0xeb820b8b,0xca82ca82, 
0xeb8aeb8a,0xeb8aeb8a,0x0b8b0b8b,0xea82eb8a,0xea82ca82,0xca82ca82,0xa97aa97a,0xa97aa97a, 
0xa97aa97a,0x897a897a,0xa972a97a,0x8972a972,0x686a886a,0x2762286a,0xe6592762,0x4431a549, 
0xe418e320,0xe318e318,0xe418e318,0xe318e318,0xe318e318,0xe318e318,0xe318e320,0xc318e318, 
0x6529e420,0xe3202429,0x28528539,0xc751495a,0x4e938a72,0x25418a6a,0xe7516962,0x85410339, 
0x44398541,0x8641a649,0xa649e330,0xa7498a62,0x2d838a6a,0x8a6acc72,0xec72ec7a,0x2329e328, 
0x65416541,0x89724549,0x696aaa72,0xaa7aca7a,0x4d9bec8a,0x0c8befa3,0xa559076a,0xca728972, 
0x0431a649,0x85390329,0xe3202431,0x04290429,0xe4200429,0x85392329,0x85416541,0xe651a549, 
0x486a075a,0xea820a83,0xea7a8972,0x10a4ef9b,0xa97ace9b,0x4b8bea82,0x0b8b0b8b,0xca820b8b, 
0xea82eb8a,0xea82ea82,0x0a8b0a8b,0xea82ea82,0xca82ca82,0xca7aca7a,0xa97aa97a,0xa97aa97a, 
0xa97aa97a,0xa972a972,0x8972a972,0x89728972,0x686a8972,0x2762476a,0xa549c659,0x03296539, 
0x0419e318,0xe318e318,0xe318e318,0xe318e318,0xe318e318,0xc318e318,0xe318e320,0xe320c318, 
0x24292429,0x24290429,0xe7498639,0xe8596a62,0x4d8b4a6a,0x4539cc7a,0x696a085a,0x85412439, 
0x4439a651,0x8641c749,0x0852e330,0x085a085a,0x4962ec7a,0x0c7baa6a,0xec728a6a,0xc3284962, 
0x85414539,0x6972aa7a,0x6972486a,0x0c8beb82,0xf0ab8e9b,0x286a0c8b,0x286ac659,0xa649486a, 
0x24310331,0x44312431,0xe328e328,0x04292431,0xe320e320,0x65392329,0x85496541,0xe651c651, 
0x8972075a,0x0b8b2b8b,0xca7a8972,0x30a4efa3,0x4b8b0fa4,0x4c8bca7a,0x2b8b4c93,0x0b8b0b8b, 
0x0b8b0b8b,0xea820a8b,0x0b8bea82,0xea82ea82,0xea82ea82,0xca82ea82,0xca7aca7a,0xca7aca7a, 
0xca7aca7a,0xa97aa972,0xa97aca7a,0x8972897a,0x486a6872,0xe6592762,0x8541c651,0xe3200429, 
0xe3180421,0xe318e318,0xe318e318,0xe318e318,0xe318e318,0xe318e318,0xc318e318,0x45290421, 
0x03214429,0x44314531,0xc7494531,0xe859aa6a,0x0d834962,0xa7492d83,0x48628649,0x44396541, 
0x6541a651,0x6541a649,0xab6a2539,0x295a4962,0xe859ab72,0xec72e751,0xcb72cb72,0x4541cb72, 
0x24316539,0x286a2862,0xeb8aaa7a,0x6d9b4c93,0x4d93ae9b,0xc659286a,0x2762e661,0x4439c651, 
0x04292431,0x24310431,0x04290329,0xe3202429,0xe320e320,0x44390329,0xa5496541,0x075ac651, 
0xaa72075a,0x4c8b2b8b,0xea7aa97a,0x30a410a4,0xad9b30ac,0x4c8bea82,0x2c936c93,0x2b932b93, 
0x0b8b0b8b,0x0a8b0b8b,0x0b8b0b8b,0xea820a83,0xea82ea82,0xea82ea82,0xca7aca82,0xca7aca7a, 
0xca82ca7a,0xca7aca7a,0xa97aca7a,0x68728972,0x4762686a,0xe651065a,0x4531a649,0xc318c320, 
0xe3180421,0xe318e318,0xe318e318,0xe318e318,0xe318e318,0xe320e320,0x0421e320,0x24292429, 
0x04212429,0x45314531,0xc7414431,0x295aeb72,0xec822962,0x4962af9b,0x49624541,0x04390752, 
0x4439a649,0x24398541,0xcb724539,0x6a62295a,0x6a6a0c7b,0x285a4539,0x0d834d83,0x29626d8b, 
0x65416541,0x89722862,0x0b8bca82,0x8e9b8da3,0x69722c8b,0xc659276a,0xe759e659,0x24316549, 
0xe3280431,0x24310431,0x04292429,0xe3180321,0xe318e318,0x2431e320,0xa6498541,0x075ac651, 
0x89720762,0x8d932b8b,0xea820a83,0x30a40fa4,0x2fac30ac,0x2b8b4c8b,0x6c9b4c93,0x4c934c93, 
0x2b8b2b93,0x0b8b2b8b,0x0b8b0b8b,0xea820b83,0xea82ea82,0xea82ea82,0xca82ea82,0xca7aca82, 
0xca7aca7a,0xca7aea82,0x8972a97a,0x686a8872,0x2762486a,0xc6490652,0xe3204431,0xe318e318, 
0xe318e318,0xe318e318,0xe318e318,0xe318e318,0xe318e318,0xe320e320,0x44290421,0x04290429, 
0x24290429,0x45312429,0x86416539,0x6a62cb6a,0xec7ae859,0xcb7a8f93,0x28624541,0x24394962, 
0x24398649,0x24398541,0xec728641,0xab6a085a,0xab720c7b,0x04316539,0x0c838a6a,0xec7aaf9b, 
0x8649a651,0x07622862,0xeb8aaa82,0x4c936d9b,0x07626872,0x8551c659,0xa549c651,0x24314439, 
0x04290429,0x45314539,0xe3200429,0xe318e318,0xc318e318,0xe328e320,0xc6496541,0x275ae651, 
0xaa7a286a,0x8d9b2c8b,0x0a836c93,0x50acefa3,0x50ac30a4,0x2b8bad9b,0x8d9b4c93,0x6c936d9b, 
0x2b8b4c93,0x2b8b2b8b,0x2b8b2b8b,0x0b832b8b,0xea82ea82,0xea820b83,0xea82ea82,0xea82ea82, 
0xca7aca82,0xaa7aca82,0x8972a97a,0x686a8972,0x065a4762,0x6439c649,0xe3180321,0xe418e418, 
0xe318e318,0xe318e318,0xe318e318,0xe318e318,0xe318e318,0x0421e320,0x04290429,0x2429e320, 
0xe3204531,0x45312429,0x24318639,0xec726a62,0x0c83085a,0x4e8b2d8b,0xa651c759,0x85416962, 
0x85418541,0x24396541,0xec720852,0xcb72e859,0x496aec7a,0xc3286531,0x6a6a4541,0x4d8b6e8b, 
0xa651496a,0xeb82686a,0xeb8aeb8a,0x076aa982,0xa5510762,0xa6518549,0x2439c651,0x2431e330, 
0x24292429,0x04292531,0xe318e320,0xe318e318,0xe318e318,0xc320e418,0xc6492431,0x27620752, 
0xeb82486a,0x6c932c8b,0x2b838c93,0x71b4efa3,0x50ac30a4,0x6c932fac,0x6c9b2c8b,0x4c936c9b, 
0x4c934c93,0x0b8b0b8b,0x2b8b2b8b,0x2b8b2b8b,0x0b830b8b,0x0b830b83,0xea82ea82,0xea82ea82, 
0xca7aca82,0xa97aca7a,0x89728972,0x4862686a,0xe651275a,0x03216531,0x0421c318,0xe318e418, 
0xe318e318,0xe318e318,0xe318e318,0xe318e318,0xe318e318,0xe320e320,0x24290421,0x2429e320, 
0x04294531,0x65314431,0x04298639,0x6e830852,0xcc7a6a6a,0xaf9bec82,0x66498a72,0xc7514962, 
0xa6494539,0x03318541,0xcb726962,0xec7ac751,0x6a6aec7a,0x04314531,0xa6490431,0x8e93aa72, 
0x08620b83,0xca82a97a,0x48720b8b,0x0762e661,0xa551c659,0x85498549,0x24316541,0x24310431, 
0x65394431,0xe420e428,0xe318e320,0xe318e318,0x0421e318,0xe4180419,0x8541e328,0x2862e751, 
0x0b83696a,0x6c934c93,0x2b8b8c93,0x51aceea3,0x30ac30ac,0xeea370b4,0x4c934c93,0x4c934c93, 
0x4c934c93,0x0b8b0b8b,0x0b8b0b8b,0x0b8b2b8b,0x0b830b8b,0xea82ea82,0xea82ea82,0xea82ea82, 
0xa97aca7a,0xa97aa97a,0x686a8972,0x285a4862,0x6541e649,0xe3180421,0xe420e318,0xe318e318, 
0xe3180421,0xe318e318,0xe318e318,0xe318e318,0xe320e318,0xe320e320,0x2429e320,0x0429e428, 
0x24290429,0x86394531,0x45316539,0x4d838641,0x4a6aab72,0x4e93ab7a,0xa6494d83,0x085ae759, 
0x86496541,0x2439c649,0x8a6acb72,0xec7a085a,0x8a6aab72,0x04316539,0x45392439,0x2c83e751, 
0x486a2c83,0xa97aa97a,0x076a276a,0xc559476a,0x8449a551,0x85416541,0x24312439,0x24314431, 
0xe3282429,0xe320c320,0xe318e320,0x0319e318,0xc318e318,0x04210419,0x2431c320,0x4862c649, 
0xea82896a,0x8d934c93,0x8c93ad9b,0x51ac2fa4,0x0fac50ac,0x30ac50ac,0x4c938d9b,0x4c934c93, 
0x2c934c93,0x0b8b2c8b,0x0b8b0b8b,0x0a830b83,0x0a83ea82,0xea82ea82,0xea82ea82,0xea82ea82, 
0xa97aca7a,0xa972a972,0x486a886a,0x07524862,0xe3288541,0x0421e318,0xe318e420,0xe320e320, 
0xe418e418,0xe318e318,0xe318e318,0xe318e318,0xe320e318,0x2429e320,0x04290421,0x44310429, 
0x03290329,0x86392431,0x86394531,0x0c7b4539,0x49620c7b,0xec82cc7a,0x285aaf93,0x2862a751, 
0x8649c749,0x4439c649,0x2962eb72,0xec7a6962,0xab72496a,0x24316639,0xa6498641,0xe7518541, 
0x89720c83,0xe769697a,0x27620762,0xa549c651,0x24398549,0x44398649,0x24312431,0xe3200429, 
0xe318e320,0xe318e318,0xe318e318,0xe318e318,0xe318e318,0xe3180419,0xe3200421,0x485a6531, 
0x0a83896a,0x6c934c8b,0xce9bad9b,0x71ac50ac,0x2fac50ac,0x91b430ac,0x4c93efa3,0x4c934c93, 
0x2c932c93,0x0b8b2b8b,0xeb8aeb82,0x0b8b0b8b,0x0b8beb82,0xeb82eb82,0xea82eb82,0xca7aca82, 
0xa97aca7a,0x6872a97a,0x485a4862,0x65410752,0xc3200329,0xe3180421,0xc318e320,0xe318e320, 
0xc318e320,0xe318e320,0xe318e320,0xe318e318,0x03210321,0x0429e320,0x0429e320,0x04290429, 
0x24314531,0x86394531,0xc7414531,0x495a6539,0x8b72af93,0x8b72ab72,0x2d8b6d93,0x0862096a, 
0xe7514962,0x86496649,0x085acb72,0x0d838b72,0xcb72496a,0x2431a641,0x0752c641,0x44418541, 
0xaa72075a,0x276aa661,0x85490762,0x65418449,0x45394439,0x24396541,0x04292431,0xe320e320, 
0xe318e318,0xe318e318,0xe318e318,0xe318e318,0xe318e318,0xe318e318,0xe320e420,0xc6492429, 
0x0a83886a,0x6c934c8b,0xeea3ad9b,0xb2b491b4,0x70ac50ac,0x30ac50ac,0xeea371b4,0x4c932c93, 
0x2c934c93,0x2b8b2b8b,0xeb8a0b8b,0x0b8b0b8b,0x0b8b0b8b,0xeb82ea82,0xeb820b8b,0xa97aca7a, 
0xa97aca7a,0x68726872,0x07526862,0x03318541,0x2429e328,0xe3202421,0xe320e420,0xe318e320, 
0xc318e420,0xe4200421,0xc318e318,0xe318e318,0x04210321,0xe4280421,0x45312429,0x24312431, 
0x65396539,0x86392431,0xe7418639,0xe751a641,0x8f930c7b,0x6a6a2962,0x8e93ab72,0x2962cc82, 
0x6962085a,0x085ae759,0xc759aa6a,0x2d8b8a72,0x6a628a72,0x2431e749,0xe749a641,0x65414439, 
0xe759c651,0xe661486a,0xa5498551,0x24398549,0x65410331,0x04312431,0x04210429,0xc318e320, 
0xe318e418,0xe318e318,0xe318e318,0xe318e318,0xe318e318,0xe318e318,0xe418e318,0x4431e318, 
0xea826862,0x8c934c8b,0xcea38d9b,0x92b4b1b4,0x70ac50ac,0x2fa470ac,0x50ac91b4,0x4c938d93, 
0x2c934c93,0x2b8b2b8b,0x0b8b0b8b,0x0b8b0b8b,0x0b8b0b8b,0xea820b8b,0xea82ea82,0xca7aca7a, 
0x8972c97a,0x6862686a,0x85410752,0x04312439,0x24310429,0xc3180421,0xe320e318,0xe318e318, 
0xe3180421,0xe4200421,0xe318e320,0x0321e320,0x04290421,0xe328e428,0x45310429,0x45314531, 
0x86416539,0xe7498641,0xc741c741,0xc7490852,0xaf93085a,0xe859ec7a,0xec826a72,0xab72f0a3, 
0x085a6649,0x8a6a4962,0xa651085a,0x0c830c83,0x6a6a496a,0x4539285a,0x0852a649,0x85498541, 
0xa649a649,0x6551e659,0xc651a551,0x03314439,0x44312439,0xe3280329,0xe320e320,0xe318c318, 
0xe418e418,0xe318e318,0xe318e318,0xe318e318,0xe318e318,0xe318e318,0xe418c418,0x0429e318, 
0xca720752,0x8d9b2c8b,0xad9b8d9b,0xd2b492b4,0x50ac71ac,0x50ac91ac,0x71b450ac,0x6d930fac, 
0x2c932c93,0x2b8b2b8b,0x0b8b2b8b,0x2b8b0b8b,0x0b8b0b8b,0xea820b83,0xea82ea82,0xca7aca7a, 
0x486aa972,0x075a486a,0x2439a649,0x24310431,0x24312431,0xe318e318,0xe320e318,0xe318e320, 
0x0421e320,0x04212429,0xe320e320,0x0429e320,0x24290429,0x24310429,0x45390431,0x4539a641, 
0xa6414539,0xe749e751,0xe749e749,0xc7510852,0xcb7ae851,0x29626e8b,0x6a72e859,0x8f938f93, 
0xa651085a,0xcb72c651,0xc7594962,0xcb7acb7a,0x8a6a8a6a,0xa6494962,0x285ae751,0xc649c649, 
0x64414439,0x85514449,0x6541c651,0x04310331,0x24314431,0xe320e320,0xe318e318,0xe418e318, 
0xe4180421,0xe318e318,0xe318e318,0xe318e318,0xe318e318,0xe318e318,0xe418e418,0x0321e418, 
0x896a8541,0x6c8bea7a,0xae9b8d93,0xf3bc92b4,0x30a4b2b4,0x91ac71ac,0x71b450ac,0xae9b71b4, 
0x4c934c93,0x2c8b2c93,0x2b8b2b8b,0x2b8b2b8b,0x0b830b8b,0xea820b8b,0xca7aea82,0x8972a972, 
0x486a896a,0xc649285a,0x03316439,0x65390431,0x04294539,0x0421e318,0x04210421,0xe3180421, 
0x2421e318,0x24296531,0xe320e320,0x0429e320,0x45310429,0x45394539,0x65392431,0x6539c749, 
0x86414539,0x0852285a,0x285a0852,0xe851e851,0x4a6a6a62,0x4d838f8b,0x09628649,0xaf938b72, 
0x65498e93,0x8a6a8549,0xe859085a,0xec82eb7a,0x6a6aaa72,0xe7514962,0x085a285a,0x2852c651, 
0x23316539,0xa651a651,0x24318541,0x2431e328,0x24294531,0xe320e320,0xe318e318,0xe418e318, 
0xe418e418,0xe318e318,0xe318e318,0xe318e318,0xe318e318,0xc318e318,0xe418e420,0xe318e318, 
0x28522429,0x2c83aa72,0xad9b4c8b,0xf3bcb2b4,0x70acb2b4,0x50ac50ac,0x71ac71ac,0x30ac71b4, 
0x2c8b8d9b,0x2c934c93,0x4c934c93,0x2b8b4c8b,0x0b832b8b,0x0b832b8b,0xca7aea7a,0x896a8972, 
0x2862486a,0x6541c651,0x24394439,0x86414439,0xc3204531,0x0421e318,0x04210421,0xe4200421, 
0x2521e318,0x45316639,0x0429e428,0x24310329,0x65392431,0x24396541,0x65412431,0x45396641, 
0x86416541,0x495a0852,0x0852285a,0x085a285a,0x8a6a8a6a,0x2d834a62,0x2862cb72,0x6a6a4962, 
0x0c838e93,0x8a6a4549,0x085a085a,0x2d8bec82,0xab72ec7a,0xe7518962,0x285a6a6a,0xe751c751, 
0x03314439,0x65418549,0x04316539,0x65390429,0xe3206531,0xe318e320,0xe318e318,0xe318e318, 
0xe420e318,0xe318e318,0xe318e318,0xe318e318,0xe318e318,0xe318e418,0xe318e420,0xe318e318, 
0x6631e320,0x2b7b8962,0x8d934c83,0xd2b492b4,0x91b4b2b4,0x50a471ac,0x51ac50ac,0x71b450ac, 
0x4d93efa3,0x4c934c93,0x4c934c93,0x4c8b4c8b,0x0a832b8b,0xea7aea82,0xa972ca7a,0x696aa972, 
0xa651075a,0x85498549,0x6541a649,0x65416541,0xe3202429,0xe420e420,0x0421e420,0x04210421, 
0x2421e420,0x24316539,0x24310429,0x45312431,0x65412539,0x24398641,0x65414539,0x45392539, 
0xc7496641,0xe851a649,0xe8510852,0x4962295a,0x8b6a6a6a,0x285aa749,0x696a0c7b,0x496a496a, 
0x8d93696a,0x8a72eb7a,0x8a72c751,0x0c8b0c83,0xaa720c83,0xc751495a,0x285a8a6a,0xc749e751, 
0x24312431,0x4439a549,0xe328e330,0x65312431,0xe3202431,0xe318e318,0xe318e318,0xe318e318, 
0x0421e320,0xe318e318,0xe318e318,0xe318e318,0xe318e318,0xe3180419,0xe320e320,0x0319e318, 
0xe418e318,0x0b732752,0x6d8b2b83,0xb2b471ac,0x91b491ac,0x71b491b4,0x71ac50ac,0x50ac51ac, 
0xef9b50ac,0x4c932c8b,0x4c934c93,0x4c8b4c8b,0xea822b8b,0xea7aca7a,0x896aaa7a,0x075a686a, 
0xa649c651,0xc651e759,0x4541a649,0xa6418541,0xe3202429,0x04212521,0x2421e420,0x04210421, 
0x04210421,0x45318639,0x45310429,0x25312431,0x45392431,0x44398541,0x6541a649,0x45412539, 
0xc7492539,0x4541a649,0x4962495a,0x6a62085a,0x4962ab6a,0x6541a751,0xca724862,0xaa72496a, 
0x8972496a,0x0c7b6d8b,0x6a72c759,0x0c8bec82,0x0c836e93,0x285a6962,0x085aab72,0x08524962, 
0x03310431,0x24314539,0x04290429,0x45392539,0xe318e320,0xe318e318,0xe318e318,0xe418e318, 
0xe418e420,0xe318e318,0xe318e318,0xe418e318,0xe418e418,0xe318e318,0xe318e318,0x0421e420, 
0xe418e420,0xeb6a2429,0x6d8b0b7b,0x91a490a4,0x51a471a4,0x92b491ac,0x51ac71ac,0x50ac50ac, 
0x50ac71ac,0x6c93ee9b,0x4c934c8b,0x2b8b4c8b,0x0b830a83,0xea7ac97a,0x4862a96a,0xe659075a, 
0x285aa651,0xa6490762,0x0429a641,0xa741c741,0x2321e320,0x24292429,0x04212421,0x04210421, 
0x04212529,0x86394531,0x24390431,0x24392439,0x44394439,0x24394541,0x65416541,0x65412439, 
0x65494441,0x8649a751,0x4962085a,0xab72095a,0x085aab6a,0xa649e751,0x6962c751,0x8a6a8a6a, 
0x496a496a,0x2c83cb7a,0x496a8a72,0x0c8baa7a,0x8f9baf9b,0x29624962,0x6962cb72,0xa649075a, 
0x24312431,0x04312431,0x24310329,0x24314539,0xe318e320,0xe318e318,0xe318e318,0xe418e318, 
0xe318e420,0xe318e318,0xe318e318,0xe418e318,0xe418e418,0xe418e418,0xe418e318,0x0421e418, 
0xe418e420,0xa639e318,0x8d8b2c7b,0x50a450a4,0x309c30a4,0x91ac70a4,0x71ac91ac,0x51ac91ac, 
0x50ac50a4,0x0fa470ac,0x4c8bad93,0x4b8b2b8b,0x0b832b8b,0x686a2b83,0x075a686a,0x0762075a, 
0x48624862,0x8549e759,0x24290329,0x6539a741,0x44298639,0x24214529,0x24212421,0x04210421, 
0x04212421,0x65394531,0x45390429,0x45390431,0x24394439,0x45414541,0x65416541,0x86498549, 
0x45414441,0xa751c751,0x285aa649,0xeb72ab72,0x085a4962,0x085a085a,0x085aa651,0x8a6a496a, 
0x2862696a,0x0c836972,0x8a72aa72,0x2d8bab7a,0xb0a3d0a3,0x2962696a,0x696aeb7a,0xc751285a, 
0x04314439,0x04312431,0x44310329,0xe3284531,0xe318e320,0xe318e318,0xe318e318,0x0421e318, 
0xe318e420,0xe318e318,0xe318e318,0xe318e318,0xe418e418,0xe418e418,0xe418e418,0xe420e418, 
0xe418e420,0x04214521,0xef93084a,0x71ac91b4,0x2f9c2fa4,0x50a4509c,0x71ac50a4,0x71ac91ac, 
0x30a450a4,0x70ac50a4,0xce9b50ac,0x2b8b6c93,0x2b8b2b8b,0xa972a972,0x48622862,0x686a6972, 
0xe7594862,0x4431e751,0x6531e320,0xa741a741,0x4529c739,0x24214529,0x24210421,0x04212421, 
0x04210421,0x86394531,0x65412431,0x45390431,0x44396539,0x65412439,0x45416541,0x85496541, 
0x65414541,0x085aa649,0x085ae859,0xcb72ab72,0x085a2962,0x49624962,0xe8598649,0x4962696a, 
0x28624962,0xcb7acb7a,0x696a0862,0x2d8b8a72,0xd0a3cf9b,0x4962ab72,0xaa720c83,0xa649896a, 
0x45392431,0x04312431,0x44310431,0xe3202431,0xe318e320,0xe318e318,0xe318e318,0x0421e320, 
0xe4180421,0xe318e318,0xe318e318,0xe318e318,0xe418e418,0xe4180421,0xe418e418,0xe420e418, 
0x0421e420,0x04210521,0xeb620421,0x91b413bd,0x2fa40fa4,0x0f9c0fa4,0x30a40f9c,0x50ac30a4, 
0x91ac91ac,0x70a450a4,0x4fa470ac,0xad930ea4,0xca822b8b,0x896ac97a,0xca7a8972,0xaa7aaa7a, 
0xc751e759,0xe320a641,0x65310321,0xc7414531,0x25298639,0x04212521,0x25210421,0x04212521, 
0xe4180421,0xa6414431,0x86414531,0x44390431,0x44394439,0x65414441,0x44416541,0x65414441, 
0x85496541,0xe759a651,0xe8592962,0xcb724962,0x29626a6a,0x295a6a6a,0x285a8649,0x085a6a6a, 
0xe859085a,0xab72ec7a,0x2962e859,0x296a0862,0xf0a3ec82,0xeb7aae93,0x896aeb7a,0xc751aa72, 
0x65392431,0x04290431,0x24314431,0xe3200329,0xe320e320,0xe320e320,0xe4200421,0x0421e420, 
0xe418e418,0xe318e318,0xe318e318,0xe318e318,0xe318e318,0x04210421,0xe418e418,0xe418e418, 
0x0421e420,0x46290529,0x04210419,0xb2ac0b6b,0x30a4d3bc,0x10a410a4,0xefa3efa3,0x50a430a4, 
0x91ac91ac,0x91ac91ac,0x70ac70ac,0x2fa470ac,0x0c8b8d93,0xaa722b83,0xeb7aca7a,0x68722b8b, 
0xe751e759,0xe3202429,0x45290321,0xa7390421,0x2529a739,0x24212521,0x24210421,0x04212421, 
0xe3180421,0xa6412429,0x45392431,0x44392439,0x24392439,0x65414441,0x44414441,0x65414441, 
0xa6496541,0x8649a651,0x49624962,0x8a6a2962,0x6a6a2962,0x295aab6a,0x4962e859,0x29626a6a, 
0xc751085a,0x0c83cc7a,0x8a6a2862,0x496a8a72,0xab7ae861,0x6d8b6e93,0xaa72cb7a,0x485aeb72, 
0x65396541,0x0431e328,0x24314539,0x0321e320,0xc320e320,0x0421e320,0x04210421,0xe418e420, 
0xe418e418,0xe318e318,0xe318e318,0xe318e318,0xe318e318,0xe418e418,0x04210421,0xe418e418, 
0x0421e420,0x04210529,0x04192521,0x49520321,0x51a48d83,0xb2b471ac,0x30a451ac,0x50a451ac, 
0x91a450a4,0xd2b491ac,0xd1b4f2b4,0x91b491ac,0x0fa470ac,0xeb7a4c83,0x4c8bcb7a,0x0762aa72, 
0x24314962,0x0421e320,0x24290421,0xc7394529,0x0521c739,0x25214529,0x04210421,0x04210421, 
0xe4180421,0xc7412431,0x45394531,0x24392439,0x44392439,0x44416541,0x44414441,0x85494441, 
0xe759a649,0x45416549,0x6a6a4962,0x8a6aab72,0x6a6ae859,0x085aab72,0x6a6a4962,0x295a6a62, 
0x085a085a,0xcc7a6e8b,0x4962c859,0xcb7aaa72,0x496a8a72,0xaa7a086a,0xca7aaa72,0xe751aa72, 
0x65392431,0x24310429,0x24314539,0x03210321,0xe4200321,0x24290429,0xe4200421,0xe418e320, 
0xe418e318,0xe318e318,0xe318e318,0xe318e318,0xe318e318,0xe418e418,0x04210421,0xe418e420, 
0x0421e420,0x04212521,0xe4180421,0xc3182521,0xc7412429,0xae83aa62,0xd3b471a4,0xd2b4f3b4, 
0x71ac91ac,0xd2b491ac,0xd2b4f2b4,0xf2b4d1b4,0x0fa4d2b4,0x2c832c83,0xcb7a0c7b,0x4862486a, 
0xe4206539,0xe3180421,0x2429e420,0xc7398631,0xe4208731,0x25214529,0x04210421,0x04212421, 
0xe4180421,0xc7412431,0x65398639,0x04314539,0x44392439,0x65418549,0x44416541,0xa6494441, 
0xe7598649,0x65494441,0x2962e759,0xcc7a0c83,0x496ae859,0xe859cb72,0x8a6a0962,0xe7516962, 
0x4962c751,0xab72af93,0x696a085a,0x8a72496a,0xeb820c83,0x496a6972,0x8a72496a,0xc6498a6a, 
0x85390431,0x45392431,0x24312439,0x03190321,0x04292429,0x25292529,0xe3200421,0xe418e320, 
0xe418e318,0xe318e318,0xe318e318,0xe318e318,0xe318e318,0xe418e318,0x04210421,0xe418e420, 
0x0421e420,0x24214419,0xe4280429,0x04190421,0xe3180419,0x45290319,0x695ac741,0x2f9c2c7b, 
0x13bd13bd,0xb2b4b2b4,0xd1b4d2b4,0xb1acb1ac,0x6c8b50a4,0x2c830c7b,0x896a2c83,0x075aaa72, 
0xe418c320,0xe320e418,0x4531e320,0x8631a639,0x05218731,0x25212521,0x25210421,0x04212521, 
0xe4180419,0x86392429,0x45396539,0x04314439,0x24394439,0x44414441,0x24394441,0xc6518549, 
0x24412441,0xc7598549,0x0862e759,0x8a720c7b,0x8a72e859,0xe859ec7a,0x6a6ae859,0x085a8a6a, 
0x2962e859,0x8b72d09b,0x4962c751,0x696a8a72,0x6d93eb7a,0x486a0c8b,0x2862496a,0xe751896a, 
0x45392431,0x44392431,0x03294431,0x65390429,0x24316539,0x04212529,0xe420e420,0xe318e418, 
0xe318e318,0xe318e318,0xe318e318,0xe318e318,0xe318e318,0xe418e318,0x04210421,0x04210421, 
0x24210421,0x05212521,0x04210421,0x04210421,0xe4200421,0x0421e418,0xe318e418,0x45290419, 
0xae7b6952,0x74c5f2ac,0x33c574cd,0x33bd74c5,0x2c83ae93,0xaa724c7b,0x0c83eb7a,0x24296a62, 
0x0421e318,0xe318e318,0x66292521,0x87398631,0x04216631,0x04212421,0x24210421,0x45214521, 
0x45294521,0xc7494531,0x24394539,0x24314439,0x24392431,0x24394441,0x65414441,0x44416549, 
0x03392439,0x0862c759,0x0862a651,0x2d83cb7a,0x6a6a2962,0xc859ec7a,0xcb72085a,0x295acb72, 
0x4962e851,0xab72b093,0x4962e859,0x8a722962,0x4d8b8a72,0xab828e9b,0x08624972,0x285ae759, 
0x85494441,0x45314539,0x24310431,0xc6418639,0x45318639,0xe4200421,0xe420e420,0xe318e418, 
0xe318e318,0xe318e318,0xe318e318,0xe318e318,0xe318e318,0xe418e418,0xe418e418,0x0421e418, 
0x25212421,0x25212521,0x25212521,0x05212521,0x25212521,0x04212529,0x04210421,0xe3180421, 
0x0429e320,0x0c73c741,0x309c309c,0x2c7b0f9c,0xcf932c7b,0xaa72ca72,0x49624d83,0x04214539, 
0xe318c318,0xe420e318,0x66314529,0x86316631,0x04296631,0x04210421,0x24210421,0x24212421, 
0x24212421,0xc7492531,0x24396541,0x24394439,0x24392439,0x44412439,0x85496541,0x24416541, 
0x24412439,0x8651e759,0x08628551,0x4d8bcb7a,0xaa724a6a,0xe8592d83,0xcb7a4962,0x095acb72, 
0xab6ac851,0xac72d19b,0x2962c759,0x6a6a4962,0xcb7a2962,0x6e93ae9b,0x696a6972,0xe6512862, 
0x8549c651,0x44312431,0x86394539,0x6639c741,0xe3200421,0xe420e420,0xe420e420,0xe318e418, 
0xe318e318,0xe318e318,0xe318e318,0xe318e318,0xe318e318,0xe418e418,0xe418e418,0x0421e418, 
0x45292421,0x25210421,0x25212521,0x25212521,0x25212521,0x25212521,0x45294529,0x04212421, 
0xe420e420,0x2521e420,0xc3202429,0x285ae328,0x0c7b0c7b,0xeb72285a,0x8641aa6a,0xe318e320, 
0xe4200421,0x2421e318,0x86316631,0x66316629,0x25296631,0x04210421,0x24210421,0x04210421, 
0x04210421,0xa6410429,0x24398641,0x24392439,0x04392439,0x44412439,0x44416541,0x24412439, 
0xa6496541,0x6549c759,0x28624449,0xec7a4d8b,0x0c7b0962,0xc759ec7a,0xec7a8a6a,0xe851cb7a, 
0xec7aa751,0xcc72b093,0x4962085a,0x6a6a085a,0x696a4962,0x6e93eb82,0x8a72ec82,0xc6514862, 
0xc651c651,0x45312431,0x65396539,0x04214531,0xe318e318,0xe420e420,0x04210421,0xe318e418, 
0xe318e318,0xe318e318,0xe318e318,0xe318e318,0xe318e318,0x04210421,0xe4180421,0x04210421, 
0x24210421,0x05210421,0x25210521,0x25212521,0x25212521,0x25212521,0x25212521,0x25212521, 
0x04212521,0xe4182529,0x03210419,0x0c7b8641,0x0852cb72,0xca6a6962,0x2429a641,0xe318e320, 
0xe3200421,0x45290421,0x86318731,0x46294629,0x25296529,0x04210421,0x24210421,0x24210421, 
0x24212521,0xa6410429,0x24398641,0x44392439,0x24394439,0x44412439,0x44414441,0x65414441, 
0x85498549,0xa6514549,0x28628551,0xab724d8b,0xcb722962,0x2962cb7a,0x0c83cb72,0xe8592d83, 
0x2d7bc851,0xcc72f19b,0x6962295a,0x4a62e859,0x28626a6a,0x8a72496a,0xaa72eb82,0xa6492862, 
0x2862c651,0x04294531,0x04292429,0xe318c320,0x04210421,0xe4200421,0x04210421,0xe318e318, 
0xe318e318,0xe318e318,0xe318e318,0xe318e318,0xe418e418,0x04210421,0x04210421,0x04210421, 
0x24210421,0x25212521,0x25212521,0x25212521,0x25212521,0x25214529,0x25212521,0x45294529, 
0x25212521,0xe4182521,0x44292419,0xaa72695a,0xe751085a,0xe749aa6a,0xe3204431,0x2421e318, 
0xe318e320,0x66292421,0x8631a731,0x45294529,0x24294529,0x04210421,0x25212421,0x25212421, 
0x45294529,0x86392429,0x24316539,0x24312331,0x24392439,0x44394439,0x24392439,0x44412439, 
0x44416541,0x85492441,0x2862a651,0xab720c83,0x8a6a496a,0x8a72cc7a,0xec7aab72,0x29624d83, 
0xec7a085a,0xcc72d193,0x8a6a4962,0x095ae851,0x8a6a8a6a,0x28622962,0xca7a4972,0x8549696a, 
0x085ae751,0xe3282429,0xe420e428,0x0421c318,0xe4182521,0xe4180421,0xe418e418,0xe318e318, 
0xe318e318,0xe318e318,0xe318e318,0xe318e318,0xe418e418,0xe4180421,0xe418e418,0x04210421, 
0x25212421,0x25212521,0x25212521,0x25212521,0x25212521,0x45292521,0x25294529,0x05212521, 
0x45292521,0x04212421,0xa5410321,0x285a4862,0xe651c651,0x4531c749,0xe3184429,0x2429e320, 
0x2421e318,0x66292529,0x66318731,0x45294529,0x24214529,0x04210421,0x25212421,0x24212421, 
0x45294529,0x65312529,0x04316539,0x03310331,0x24392431,0x65414439,0x24394439,0x44412439, 
0x65416541,0x44494541,0xe7598549,0xec7a2d83,0x8a722962,0xcc7aab72,0x0c7b8a72,0x49624d83, 
0xcb72295a,0x2d836f8b,0x49628a6a,0x295ae851,0x8a728a72,0xaa722862,0x89726972,0xc651ca7a, 
0x075a8549,0xe3200429,0x04210421,0x2421e420,0x24214529,0xe418e418,0xe418e418,0xe318e318, 
0xe318e318,0xe318e318,0xe318e318,0xe318e318,0xe418e418,0xe4180421,0xe418e418,0x24210421, 
0x25212521,0x05210421,0x25212521,0x05212521,0x25212521,0x25212521,0x45294529,0x25212529, 
0x25212521,0x03212421,0x275a4439,0x6441a549,0xc649a649,0x65310431,0xe3182429,0xe3202429, 
0x2421e420,0x66314629,0x66298631,0x25292529,0x24212429,0x04210421,0x25210421,0x04212421, 
0x45292421,0x65312429,0x24318641,0x04310331,0x24392431,0x44392439,0x44394439,0x44412439, 
0x44416541,0xa6514441,0x8551a551,0x6e8b2d83,0x8a6a2962,0xcb7a8a72,0x2d838a72,0x29622d83, 
0xab6a095a,0x6e8b4e8b,0x4962ab72,0x6a6a085a,0x4962ab72,0xeb7a285a,0x4972eb82,0x28628972, 
0x28626549,0xe3200421,0x0421e320,0x04210421,0xe4180421,0xe418e418,0x04210421,0xe318e418, 
0xe318e318,0xe318e318,0xe318e318,0xe418e318,0xe418e418,0x04210421,0x04210421,0x24210421, 
0x24212421,0x04210421,0x25210421,0x25212521,0x04212521,0x45214521,0x45296529,0x25212421, 
0x45214529,0x24294419,0xa649a649,0x64394441,0x2431a641,0x44292431,0xe3202421,0xc3202429, 
0x45212529,0x66316629,0x66298631,0x25212521,0x24212421,0x04210421,0x25210421,0x04212521, 
0x25290421,0x45310421,0x24318641,0x04310331,0x24392431,0x24392439,0x03310439,0x44412439, 
0x44416541,0xa6516549,0xc6598551,0x4d8b0c83,0x696a6a6a,0xcc7acb7a,0x6e8bab72,0x6a622d83, 
0xcc724962,0x2d83ed7a,0xcb72cb72,0x29624962,0xab72ab72,0x696a4862,0xeb820c8b,0x4862696a, 
0x075ac751};
const Word W_img = { LAST, 0x820, 0, "\x03" "img", _doCon, (int)_img };
#define LAST WORD( _img ) 
/////////////////////////////////////////////////////////////////////////////////////////////////////////
// wordset 09 ( extention words )

uint8_t  buzzerChannel=0; // ESP32 : 0-15
uint8_t  buzzerPin=25;
uint8_t  buzzerSwitchPin=17; // set pin level HIGH to turn buzzer on ( wifiboy green )
uint8_t  buzzerResolutionBits=8; 
uint8_t  buzzerDuty=128; // (0-255) default value 128 as 50% dutycycle
double   buzzerFreq=0.00; // 0~12000 Hz, initially set to 0 to mute
/////////////////////////////////////////////////////////////////////////////////////////////////////////
// W903 buzzerSetup ( pin switch -- ) // setup given pin and switch to the buzzer
void _buzzerSetup() {
  buzzerSwitchPin = F.dPop(), buzzerPin = F.dPop();
  pinMode( buzzerPin, OUTPUT );
  pinMode( buzzerSwitchPin, OUTPUT );
  ledcSetup( buzzerChannel, buzzerFreq, buzzerResolutionBits );
  ledcWrite( buzzerChannel, buzzerDuty );
  ledcAttachPin( buzzerPin, buzzerChannel );
} 
PRIMI( 0x903, 0, "\x0b" "buzzerSetup", _buzzerSetup, _buzzerSetup );
#define LAST WORD( _buzzerSetup ) 
//////////////////////////////////////////////////////////////////////////
// W904 HZ ( freq -- ) // set freq ( 0~12000 Hz ) to the buzzer.
void _HZ() {
  X x; x.i = F.dPop(), buzzerFreq = x.f;
  if( buzzerFreq > 12000.00 ) buzzerFreq = 12000.00;
  F.showTime(),F.flush(),Serial.printf(" buzzer freq %0.2f\n", buzzerFreq );
  ledcWriteTone( buzzerChannel, buzzerFreq ); } 
PRIMI( 0x904, 0, "\x02" "HZ", _HZ, _HZ );
#define LAST WORD( _HZ ) 
//////////////////////////////////////////////////////////////////////////
// W905 buzzerOn ( -- ) // turn on the buzzer
void _buzzerOn() {
  F.showTime(),F.print( "buzzer on\n" );
  digitalWrite( buzzerSwitchPin, HIGH ); }  
PRIMI( 0x905, 0, "\x08" "buzzerOn", _buzzerOn, _buzzerOn );
#define LAST WORD( _buzzerOn ) 
//////////////////////////////////////////////////////////////////////////
// W906 buzzerOff( -- ) // turn on the buzzer
void _buzzerOff() {
  F.showTime(),F.print( "buzzer off\n" );
  digitalWrite( buzzerSwitchPin, LOW ); }  
PRIMI( 0x906, 0, "\x09" "buzzerOff", _buzzerOff, _buzzerOff );
#define LAST WORD( _buzzerOff ) 
/////////////////////////////////////////////////////////////////////////////////////////////////////////
// WA00 predefined ( -- w ) The last predefined word.
const Word W_predefined = { LAST, 0xA00, 0, "\x0a" "predefined", _doCon, (int) &W_predefined };
#define LAST WORD( _predefined )
/////////////////////////////////////////////////////////////////////////////////////////////////////////
const Word* word_set=LAST;
/////////////////////////////////////////////////////////////////////////////////////////////////////
#endif WORD_SET
